{"pageProps":{"post":{"id":"MDU6SXNzdWU3ODg3NTAwNzM=","url":"https://github.com/xiaotiandada/blog/issues/50","title":"GraphQL学习","updatedAt":"2021-01-19T06:36:49Z","createdAt":"2021-01-19T06:36:49Z","body":"2020-07-07 13:02:08\r\n\r\n学习记录📝 [Repo](https://github.com/xiaotiandada/graphql)\r\n\r\n<!-- more -->\r\n\r\n**资料**\r\n\r\nhttps://graphql.org/\r\n\r\nhttps://mp.weixin.qq.com/s/bqStS2IBvBSDAiSjLdYETw\r\n\r\nhttps://www.apollographql.com/docs/apollo-server/\r\n\r\n## 尝鲜(初次体验)\r\n\r\n### 复制文档\r\n\r\n```bash\r\n# ... init ...\r\nnpm install graphql\r\n```\r\n\r\n```javascript\r\nvar { graphql, buildSchema } = require('graphql');\r\n\r\nvar schema = buildSchema(`\r\n  type Query {\r\n    hello: String\r\n  }\r\n`);\r\n\r\nvar root = { hello: () => 'Hello world!' };\r\n\r\ngraphql(schema, '{ hello }', root).then((response) => {\r\n  console.log(response);\r\n});\r\n```\r\n\r\n然后运行 ``node app``, 基本操作了... 这个可能不太直观 ~\r\n\r\n```bash\r\nnpm install express express-graphql graphql\r\n```\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar graphqlHTTP = require('express-graphql');\r\nvar { buildSchema } = require('graphql');\r\n\r\nvar schema = buildSchema(`\r\n  type Query {\r\n    hello: String\r\n  }\r\n`);\r\n\r\nvar root = { hello: () => 'Hello world!' };\r\n\r\nvar app = express();\r\napp.use('/graphql', graphqlHTTP({\r\n  schema: schema,\r\n  rootValue: root,\r\n  graphiql: true,\r\n}));\r\napp.listen(4000, () => console.log('Now browse to localhost:4000/graphql'));\r\n```\r\n\r\n然后运行 ``node app``, 可以在 ``/graphql``路由下运行他的工具页面 (懒得截图 🍑)\r\n\r\n```bash\r\nnpm install apollo-server-express express\r\n```\r\n\r\n```javascript\r\nconst express = require('express');\r\nconst { ApolloServer, gql } = require('apollo-server-express');\r\n\r\nconst typeDefs = gql`\r\n  type Query {\r\n    hello: String\r\n  }\r\n`;\r\n\r\nconst resolvers = {\r\n  Query: {\r\n    hello: () => 'Hello world!',\r\n  },\r\n};\r\n\r\nconst server = new ApolloServer({ typeDefs, resolvers });\r\n\r\nconst app = express();\r\nserver.applyMiddleware({ app });\r\n\r\napp.listen({ port: 4000 }, () =>\r\n  console.log('Now browse to http://localhost:4000' + server.graphqlPath)\r\n);\r\n```\r\n\r\n重复上面的操作... 这里利用了 [apollo-server](https://www.apollographql.com/docs/apollo-server/)\r\n\r\n```json\r\n{\r\n\thello\r\n}\r\n```\r\n\r\n简单的查询 Query hello..... hello world 经典语录\r\n\r\n具体的可以看文档, 没有什么营养 因为都是copy的(凑点字数).....\r\n\r\n---\r\n\r\n### 简单的操作\r\n\r\n需要一个简单的 books list\r\n\r\n1. 查询所有books\r\n2. 添加 book\r\n3. 更新 book\r\n4. 删除 book\r\n\r\n跳过依赖安装, 缺少依赖自行搞定! 没有使用数据库 本地存放一个 **Varible** \r\n\r\n```javascript\r\nconst express = require('express');\r\nconst { ApolloServer, gql } = require('apollo-server-express');\r\n\r\n// 书库 没接数据库\r\nconst books = [\r\n  {\r\n    id: 0,\r\n    title: 'Harry Potter and the Chamber of Secrets',\r\n    author: 'J.K. Rowling',\r\n  },\r\n  {\r\n    id: 1,\r\n    title: 'Jurassic Park',\r\n    author: 'Michael Crichton'\r\n  },\r\n];\r\n\r\n// 定义 type\r\nconst typeDefs = gql`\r\n  type Book {\r\n    id: Int,\r\n    title: String\r\n    author: String\r\n  }\r\n\r\n  type Query {\r\n    books: [Book],\r\n  }\r\n\r\n  type Mutation {\r\n    createBook(title: String, author: String): Book,\r\n    updateBook(id: Int, title: String, author: String): Book,\r\n    deleteBook(id: Int, title: String, author: String): Book,\r\n  }\r\n`;\r\n// 定义 resolvers\r\nconst resolvers = {\r\n  Query: {\r\n    // 查询所有书\r\n    books: () => books,\r\n  },\r\n  Mutation: {\r\n    // 创建一本书\r\n    createBook: (_, { title, author }) => {\r\n      let list = {\r\n        id: books.length,\r\n        title,\r\n        author\r\n      }\r\n      books.push(list)\r\n      return list\r\n    },\r\n    // 更新一本书\r\n    updateBook: (_, { id, title, author }) => {\r\n      let idx = books.findIndex(i => i.id === id)\r\n      if (~idx) {\r\n        books[idx] = {\r\n          id: idx,\r\n          title: title,\r\n          author: author\r\n        }\r\n        return books[idx]\r\n      } else {\r\n        return []\r\n      }\r\n    },\r\n    // 删除一本书\r\n    deleteBook: (_, { id }) => {\r\n      let idx = books.findIndex(i => i.id === id)\r\n      if (~idx) {\r\n        books.splice(idx, 1)\r\n        return books[idx]\r\n      } else {\r\n        return []\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst server = new ApolloServer({ typeDefs, resolvers });\r\n\r\nconst app = express();\r\nserver.applyMiddleware({ app });\r\n\r\napp.listen({ port: 4000 }, () =>\r\n  console.log('Now browse to http://localhost:4000' + server.graphqlPath)\r\n);\r\n```\r\n\r\n```json\r\nquery GetBooks {\r\n  books {\r\n    id,\r\n    title\r\n    author\r\n  }\r\n}\r\n\r\nmutation Create {\r\n  createBook(title: \"12312\", author: \"xxxxx\") {title, author},\r\n}\r\n\r\nmutation Update {\r\n  updateBook(id: 0, title: \"123\", author: \"xxxxx\") {id, title, author}\r\n}\r\n\r\nmutation Delete {\r\n  deleteBook(id: 1) {id, title, author}\r\n}\r\n```\r\n\r\n一些请求语句参考 愿君快速 **debug** \r\n\r\n```json\r\n{\r\n  \"data\": {\r\n    \"books\": [\r\n      {\r\n        \"id\": 0,\r\n        \"title\": \"Harry Potter and the Chamber of Secrets\",\r\n        \"author\": \"J.K. Rowling\"\r\n      },\r\n      {\r\n        \"id\": 1,\r\n        \"title\": \"Jurassic Park\",\r\n        \"author\": \"Michael Crichton\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n所有书单的返回 **list**\r\n\r\n因为第一次使用, 先给自己踩个坑, 后续的一些功能使用会慢慢了解, 并且更新文章 🍑","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<p>2020-07-07 13:02:08</p>\n<p>学习记录📝 <a href=\"https://github.com/xiaotiandada/graphql\">Repo</a></p>\n<!-- more -->\n\n<p><strong>资料</strong></p>\n<p><a href=\"https://graphql.org/\">https://graphql.org/</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/bqStS2IBvBSDAiSjLdYETw\">https://mp.weixin.qq.com/s/bqStS2IBvBSDAiSjLdYETw</a></p>\n<p><a href=\"https://www.apollographql.com/docs/apollo-server/\">https://www.apollographql.com/docs/apollo-server/</a></p>\n<h2 id=\"尝鲜初次体验\">尝鲜(初次体验)</h2>\n<h3 id=\"复制文档\">复制文档</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\"># ... init ...\nnpm install graphql</code></pre><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> buildSchema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> schema <span class=\"token operator\">=</span> <span class=\"token function\">buildSchema</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  type Query {\n    hello: String\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">hello</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Hello world!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">,</span> <span class=\"token string\">'{ hello }'</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>然后运行 <code>node app</code>, 基本操作了... 这个可能不太直观 ~</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npm install express express-graphql graphql</code></pre><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> graphqlHTTP <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> buildSchema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> schema <span class=\"token operator\">=</span> <span class=\"token function\">buildSchema</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  type Query {\n    hello: String\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">hello</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Hello world!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/graphql'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">graphqlHTTP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">schema</span><span class=\"token operator\">:</span> schema<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">rootValue</span><span class=\"token operator\">:</span> root<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">graphiql</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Now browse to localhost:4000/graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>然后运行 <code>node app</code>, 可以在 <code>/graphql</code>路由下运行他的工具页面 (懒得截图 🍑)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npm install apollo-server-express express</code></pre><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server-express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  type Query {\n    hello: String\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">Query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">hello</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Hello world!'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> typeDefs<span class=\"token punctuation\">,</span> resolvers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> app <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">4000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Now browse to http://localhost:4000'</span> <span class=\"token operator\">+</span> server<span class=\"token punctuation\">.</span>graphqlPath<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>重复上面的操作... 这里利用了 <a href=\"https://www.apollographql.com/docs/apollo-server/\">apollo-server</a></p>\n<pre class=\"language-json\"><code class=\"language-json\">{\n    hello\n}</code></pre><p>简单的查询 Query hello..... hello world 经典语录</p>\n<p>具体的可以看文档, 没有什么营养 因为都是copy的(凑点字数).....</p>\n<hr>\n<h3 id=\"简单的操作\">简单的操作</h3>\n<p>需要一个简单的 books list</p>\n<ol>\n<li>查询所有books</li>\n<li>添加 book</li>\n<li>更新 book</li>\n<li>删除 book</li>\n</ol>\n<p>跳过依赖安装, 缺少依赖自行搞定! 没有使用数据库 本地存放一个 <strong>Varible</strong> </p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server-express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 书库 没接数据库</span>\n<span class=\"token keyword\">const</span> books <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Harry Potter and the Chamber of Secrets'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">'J.K. Rowling'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Jurassic Park'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">'Michael Crichton'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 定义 type</span>\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  type Book {\n    id: Int,\n    title: String\n    author: String\n  }\n\n  type Query {\n    books: [Book],\n  }\n\n  type Mutation {\n    createBook(title: String, author: String): Book,\n    updateBook(id: Int, title: String, author: String): Book,\n    deleteBook(id: Int, title: String, author: String): Book,\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 定义 resolvers</span>\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">Query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 查询所有书</span>\n    <span class=\"token function-variable function\">books</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> books<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">Mutation</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 创建一本书</span>\n    <span class=\"token function-variable function\">createBook</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> author <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> books<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n        title<span class=\"token punctuation\">,</span>\n        author\n      <span class=\"token punctuation\">}</span>\n      books<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> list\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 更新一本书</span>\n    <span class=\"token function-variable function\">updateBook</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> author <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> books<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> i<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>idx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        books<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> idx<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> title<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> author\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> books<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 删除一本书</span>\n    <span class=\"token function-variable function\">deleteBook</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> books<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> i<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>idx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        books<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> books<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> typeDefs<span class=\"token punctuation\">,</span> resolvers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> app <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">4000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Now browse to http://localhost:4000'</span> <span class=\"token operator\">+</span> server<span class=\"token punctuation\">.</span>graphqlPath<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><pre class=\"language-json\"><code class=\"language-json\">query GetBooks {\n  books {\n    id,\n    title\n    author\n  }\n}\n\nmutation Create {\n  createBook(title: \"12312\", author: \"xxxxx\") {title, author},\n}\n\nmutation Update {\n  updateBook(id: 0, title: \"123\", author: \"xxxxx\") {id, title, author}\n}\n\nmutation Delete {\n  deleteBook(id: 1) {id, title, author}\n}</code></pre><p>一些请求语句参考 愿君快速 <strong>debug</strong> </p>\n<pre class=\"language-json\"><code class=\"language-json\">{\n  \"data\": {\n    \"books\": [\n      {\n        \"id\": 0,\n        \"title\": \"Harry Potter and the Chamber of Secrets\",\n        \"author\": \"J.K. Rowling\"\n      },\n      {\n        \"id\": 1,\n        \"title\": \"Jurassic Park\",\n        \"author\": \"Michael Crichton\"\n      }\n    ]\n  }\n}</code></pre><p>所有书单的返回 <strong>list</strong></p>\n<p>因为第一次使用, 先给自己踩个坑, 后续的一些功能使用会慢慢了解, 并且更新文章 🍑</p>\n","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}