{"pageProps":{"post":{"id":"MDU6SXNzdWU4NDQ5MTkxNzk=","url":"https://github.com/xiaotiandada/blog/issues/71","title":"Promise的源码实现","updatedAt":"2021-04-01T02:47:41Z","createdAt":"2021-03-30T17:19:49Z","body":"参考文章\r\n- [Promise的源码实现（完美符合Promise/A+规范）](https://github.com/YvetteLau/Blog/issues/2)\r\n\r\n```javascript\r\nconst log = (...args) => {\r\n  console.log(args)\r\n}\r\n\r\n// 三种状态 pending fulfilled rejected\r\n// Promise 必须处于以下三个状态之一: pending, fulfilled 或者是 rejected\r\nconst PENDING = 'pending'\r\nconst FULFILLED = 'fulfilled';\r\nconst REJECTED = 'rejected';\r\n\r\nfunction Promise(executor) {\r\n  let self = this\r\n  self.status = PENDING\r\n  self.onFulfilled = []\r\n  self.onRejected = []\r\n\r\n  // 可以变成 fulfilled 或者是 rejected\r\n  function resolve(value) {\r\n    if (self.status === PENDING) {\r\n      // 2.1.2 如果promise在fulfilled状态\r\n      self.status = FULFILLED\r\n      // 2.1.2.2 必须有一个value值\r\n      self.value = value\r\n      self.onFulfilled.forEach(fn => fn())\r\n    }\r\n  }\r\n  // 可以变成 fulfilled 或者是 rejected\r\n  function reject(reason) {\r\n    if (self.status === PENDING) {\r\n      // 2.1.3.1 不会变成其它状态\r\n      self.status = REJECTED\r\n      // 2.1.3.2 必须有一个promise被reject的reason\r\n      self.reason = reason\r\n      self.onRejected.forEach(fn => fn())\r\n    }\r\n  }\r\n\r\n  try {\r\n    // 执行executor\r\n    executor(resolve, reject)\r\n  } catch (e) {\r\n    reject(e)\r\n  }\r\n}\r\n// promise的then方法接收两个参数\r\nPromise.prototype.then = function (onFulfilled, onRejected) {\r\n\r\n  let self = this\r\n\r\n  // 2.2.1 onFulfilled 和 onRejected 都是可选参数\r\n  // 2.2.1.1 onFulfilled 必须是函数类型\r\n  // 2.2.1.2 onRejected 必须是函数类型\r\n  onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value\r\n  onRejected = typeof onRejected === 'function' ? onRejected : reason => {\r\n    throw reason\r\n  }\r\n\r\n  // 2.2.4 onFulfilled 和 onRejected 应该是微任务\r\n  // 2.2.5 onFulfilled 和 onRejected 必须作为函数被调用\r\n\r\n  // 2.2.7.1 onFulfilled 或 onRejected 执行的结果为x,调用 resolvePromise\r\n  // 2.2.7.2 如果 onFulfilled 或者 onRejected 执行时抛出异常e,promise2需要被reject\r\n  let promise2 = new Promise((resolve, reject) => {\r\n    if (self.status === FULFILLED) {\r\n      setTimeout(() => {\r\n        try {\r\n          let x = onFulfilled(self.value)\r\n          resolvePromise(promise2, x, resolve, reject)\r\n        } catch (e) {\r\n          reject(e)\r\n        }\r\n      })\r\n    } else if (self.status === REJECTED) {\r\n      setTimeout(() => {\r\n        try {\r\n          let x = onRejected(self.reason)\r\n          resolvePromise(promise2, x, resolve, reject)\r\n        } catch (e) {\r\n          reject(e)\r\n        }\r\n      })\r\n    } else if (self.status === PENDING) {\r\n      // 2.2.2.1 必须在promise变成 fulfilled 时，调用 onFulfilled，参数是promise的value\r\n      self.onFulfilled.push(() => {\r\n        setTimeout(() => {\r\n          try {\r\n            let x = onFulfilled(self.value)\r\n            resolvePromise(promise2, x, resolve, reject)\r\n          } catch (e) {\r\n            reject(e)\r\n          }\r\n        })\r\n      })\r\n      // 2.2.3.1 必须在promise变成 rejected 时，调用 onRejected，参数是promise的reason\r\n      self.onRejected.push(() => {\r\n        setTimeout(() => {\r\n          try {\r\n            let x = onRejected(self.reason)\r\n            resolvePromise(promise2, x, resolve, reject)\r\n          } catch (e) {\r\n            reject(e)\r\n          }\r\n        })\r\n      })\r\n    }\r\n  })\r\n  // 2.2.7 then必须返回一个promise\r\n  return promise2\r\n}\r\n\r\nfunction resolvePromise(promise2, x, resolve, reject) {\r\n  // 2.3.1 如果 promise2 和 x 相等，那么 reject promise with a TypeError\r\n  if (promise2 === x) {\r\n    reject(new TypeError('Chaining cycle'));\r\n  }\r\n  // 2.3.3.3.3 如果 resolvePromise 和 rejectPromise 都调用了，那么第一个调用优先，后面的调用忽略。\r\n  let used\r\n  // 2.3.3 如果 x 是一个 object 或者 是一个 function\r\n  if (x && typeof x === 'object' || typeof x === 'function') {\r\n    try {\r\n      // 2.3.3.2 如果 x.then 这步出错，那么 reject promise with e as the reason..\r\n      let then = x.then\r\n      // 2.3.3.3 如果 then 是一个函数，then.call(x, resolvePromiseFn, rejectPromise)\r\n      if (typeof then === 'function') { // 2.3.2 如果 x 是一个 promsie\r\n        // 2.3.2.2 如果 x 被 fulfilled, fulfill promise with the same value.\r\n        // 2.3.2.3 如果 x 被 rejected, reject promise with the same reason.\r\n        then.call(x, y => {\r\n          if (used) return\r\n          used = true\r\n          // 2.3.3.3.1 resolvePromiseFn 的 入参是 y, 执行 resolvePromise(promise2, y, resolve, reject);\r\n          resolvePromise(promise2, y, resolve, reject)\r\n        }, r => {\r\n          if (used) return\r\n          used = true\r\n          // 2.3.3.3.2 rejectPromise 的 入参是 r, reject promise with r.\r\n          reject(r)\r\n        })\r\n      } else {\r\n        if (used) return\r\n        used = true\r\n        resolve(x)\r\n      }\r\n    } catch (e) {\r\n      if (used) return\r\n      used = true\r\n      // 2.3.3.3.4 如果调用then抛出异常e\r\n      reject(e)\r\n    }\r\n  } else {\r\n    // 2.3.4 如果 x 不是一个 object 或者 function，fulfill promise with x.\r\n    resolve(x)\r\n  }\r\n}\r\n\r\n\r\n// {\r\n//   const p = new Promise((resolve, reject) => {\r\n//     setTimeout(() => {\r\n//       log(`setTimeout log ${Date.now()}`)\r\n//       resolve(12)\r\n//     }, 2000)\r\n//   })\r\n//   p.then(res => {\r\n//     log('res', res)\r\n//     return 2\r\n//   }).then(res => {\r\n//     log('res3', res)\r\n//     return {\r\n//       value: 123\r\n//     }\r\n//   }).then(res => {\r\n//     log('res4', res)\r\n//     return () => {\r\n//       log('fun')\r\n//     }\r\n//   }).then(res => {\r\n//     log('res5', res)\r\n//     return new Promise(() => {\r\n//       log('promise')\r\n//     })\r\n//   })\r\n// }\r\n\r\nPromise.resolve = function(params) {\r\n  // 如果 value 是个 thenable 对象，返回的promise会“跟随”这个thenable的对象，采用它的最终状态\r\n  if (params instanceof Promise) {\r\n    return params\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    // 如果传入的value本身就是promise对象，那么Promise.resolve将不做任何修改、原封不动地返回这个promise对象。\r\n    if (params && params.then && typeof params.then === 'function') {\r\n      setTimeout(() => {\r\n        params.then(resolve, reject)\r\n      })\r\n    // 其他情况，直接返回以该值为成功状态的promise对象。\r\n    } else {\r\n      resolve(params)\r\n    }\r\n  })\r\n}\r\n\r\n// {\r\n//   let p = Promise.resolve(20);\r\n//   p.then((data) => {\r\n//       console.log(1, data);\r\n//   });\r\n//   let p2 = Promise.resolve({\r\n//       then: function(resolve, reject) {\r\n//           resolve(30);\r\n//       }\r\n//   });\r\n//   p2.then((data)=> {\r\n//       console.log(2, data)\r\n//   });\r\n//   let p3 = Promise.resolve(new Promise((resolve, reject) => {\r\n//       resolve(400)\r\n//   }));\r\n//   p3.then((data) => {\r\n//       console.log(3, data)\r\n//   });\r\n// }\r\n\r\n// Promise.reject方法和Promise.resolve不同，Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。\r\nPromise.prototype.reject = function(reason) {\r\n  return new Promise((resolve, reject) => {\r\n    reject(reason)\r\n  })\r\n}\r\n\r\n// Promise.prototype.catch 用于指定出错时的回调，是特殊的then方法，catch之后，可以继续 .then\r\nPromise.prototype.catch = function(onRejected) {\r\n  return this.then(null, onRejected)\r\n}\r\n\r\n// {\r\n//   let x = new Promise((resolve, reject) => {\r\n//     resolve(1)\r\n//   })\r\n//   x.then(res => {\r\n//     throw new Error('err')\r\n//   }).catch(e => {\r\n//     console.log('err', e.toString())\r\n//   })\r\n// }\r\n\r\nPromise.prototype.finally = function(callback) {\r\n  return this.then(value => {\r\n    return Promise.resolve(callback()).then(() => value)\r\n  }, err => {\r\n    return new Promise.resolve(callback()).then(() => { throw err })\r\n  })\r\n}\r\n\r\n// {\r\n//   let x = new Promise((resolve, reject) => {\r\n//     resolve(1)\r\n//   })\r\n//   x.then(res => {\r\n//     console.log('111', res)\r\n//   }).finally(() => {\r\n//     console.log(222)\r\n//   }).then(() => {\r\n//     console.log('333')\r\n//   })\r\n// }\r\n\r\nPromise.all = function(promisees) {\r\n  return new Promise((resolve, reject) => {\r\n    let index = 0\r\n    // 在任何情况下，Promise.all 返回的 promise 的完成状态的结果都是一个数组\r\n    let result = []\r\n    if (promisees.length === 0) {\r\n      resolve(result)\r\n    } else {\r\n      function processValue(i, data) {\r\n        result[i] = data\r\n        if (++index === promisees.length) {\r\n          resolve(result)\r\n        }\r\n      }\r\n      for (let i = 0; i < promisees.length; i++) {\r\n        // promises[i] 可能是普通值\r\n        Promise.resolve(promisees[i]).then(data => {\r\n          processValue(i, data)\r\n        }, err => {\r\n          // 如果参数中有一个promise失败，那么Promise.all返回的promise对象失败\r\n          reject(err)\r\n          return\r\n        })\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// {\r\n//   var promise1 = new Promise((resolve, reject) => {\r\n//     resolve(3);\r\n//   })\r\n//   var promise2 = 42;\r\n//   var promise3 = new Promise(function(resolve, reject) {\r\n//     setTimeout(resolve, 100, 'foo');\r\n//   });\r\n\r\n//   Promise.all([promise1, promise2, promise3]).then(function(values) {\r\n//     console.log('values', values); //[3, 42, 'foo']\r\n//   },(err)=>{\r\n//       console.log(err)\r\n//   });\r\n\r\n//   var p = Promise.all([]); // will be immediately resolved\r\n//   var p2 = Promise.all([1337, \"hi\"]); // non-promise values will be ignored, but the evaluation will be done asynchronously\r\n//   console.log(p);\r\n//   console.log(p2)\r\n//   setTimeout(function(){\r\n//       console.log('the stack is now empty');\r\n//       console.log(p2);\r\n//   });\r\n// }\r\n\r\n\r\nPromise.race = function(promises) {\r\n  return new Promise((resolve, reject) => {\r\n    // 如果传的参数数组是空，则返回的 promise 将永远等待。\r\n    if (promises.length === 0) {\r\n      return\r\n    } else {\r\n      for (let i = 0; i < promises.length; i++) {\r\n        Promise.resolve(promises[i]).then(data => {\r\n          resolve(data)\r\n          return\r\n        }, err => {\r\n          reject(err)\r\n          return\r\n        })\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n{\r\n  Promise.race([\r\n    new Promise((resolve, reject) => { setTimeout(() => { resolve(100) }, 1000) }),\r\n    undefined,\r\n    new Promise((resolve, reject) => { setTimeout(() => { reject(100) }, 100) })\r\n  ]).then((data) => {\r\n      console.log('success ', data);\r\n  }, (err) => {\r\n      console.log('err ',err);\r\n  });\r\n\r\n  Promise.race([\r\n      new Promise((resolve, reject) => { setTimeout(() => { resolve(100) }, 1000) }),\r\n      new Promise((resolve, reject) => { setTimeout(() => { resolve(200) }, 200) }),\r\n      new Promise((resolve, reject) => { setTimeout(() => { reject(100) }, 100) })\r\n  ]).then((data) => {\r\n      console.log(data);\r\n  }, (err) => {\r\n      console.log(err);\r\n  });\r\n}\r\n\r\n\r\nPromise.defer = Promise.deferred = function () {\r\n  let dfd = {};\r\n  dfd.promise = new Promise((resolve, reject) => {\r\n    dfd.resolve = resolve;\r\n    dfd.reject = reject;\r\n  });\r\n  return dfd;\r\n}\r\n\r\nmodule.exports = Promise\r\n```\r\n\r\n```bash\r\n# 测试用例\r\n\r\nnpm install -g promises-aplus-tests\r\n\r\npromises-aplus-tests promise.js\r\n```\r\n\r\nSimple\r\n```javascript\r\n// simple\r\nconst log = (...args) => {\r\n  console.log(args)\r\n}\r\n\r\nconst PENDING = 'pending'\r\nconst FULFILLED = 'fulfilled';\r\nconst REJECTED = 'rejected';\r\n\r\nfunction Promise(executor) {\r\n  let self = this\r\n  self.status = PENDING\r\n  self.onFulfilled = []\r\n  self.onRejected = []\r\n\r\n  function resolve(value) {\r\n    if (self.status === PENDING) {\r\n      self.status = FULFILLED\r\n      self.value = value\r\n      self.onFulfilled.forEach(fn => fn())\r\n    }\r\n  }\r\n\r\n  function reject(reason) {\r\n    if (self.status === PENDING) {\r\n      self.status = REJECTED\r\n      self.reason = reason\r\n      self.onRejected.forEach(fn => fn())\r\n    }\r\n  }\r\n\r\n  try {\r\n    executor(resolve, reject)\r\n  } catch (e) {\r\n    reject(e)\r\n  }\r\n}\r\n\r\nPromise.prototype.then = function (onFulfilled, onRejected) {\r\n  let self = this\r\n\r\n  let promise2 = new Promise((resolve, reject) => {\r\n    if (self.status === PENDING) {\r\n      self.onFulfilled.push(() => {\r\n        setTimeout(() => {\r\n          try {\r\n            let x = onFulfilled(self.value)\r\n            resolve(x)\r\n          } catch (e) {\r\n            reject(e)\r\n          }\r\n        })\r\n      })\r\n    }\r\n  })\r\n  return promise2\r\n}\r\n\r\n{\r\n  const p = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      log(`setTimeout log ${Date.now()}`)\r\n      resolve(12)\r\n    }, 2000)\r\n  })\r\n  p.then(res => {\r\n      log('res', res)\r\n      return 2\r\n    }).then(res => {\r\n      log('res2', res)\r\n      return 3\r\n    })\r\n    .then(res => {\r\n      log('res3', res)\r\n    })\r\n}\r\n```\r\n\r\n参考文章写得非常好，改天理解更深入后再来更新\r\n","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<p>参考文章</p>\n<ul>\n<li><a href=\"https://github.com/YvetteLau/Blog/issues/2\">Promise的源码实现（完美符合Promise/A+规范）</a></li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">log</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 三种状态 pending fulfilled rejected</span>\n<span class=\"token comment\">// Promise 必须处于以下三个状态之一: pending, fulfilled 或者是 rejected</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PENDING</span> <span class=\"token operator\">=</span> <span class=\"token string\">'pending'</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token operator\">=</span> <span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REJECTED</span> <span class=\"token operator\">=</span> <span class=\"token string\">'rejected'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">PENDING</span>\n  self<span class=\"token punctuation\">.</span>onFulfilled <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  self<span class=\"token punctuation\">.</span>onRejected <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// 可以变成 fulfilled 或者是 rejected</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 2.1.2 如果promise在fulfilled状态</span>\n      self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">FULFILLED</span>\n      <span class=\"token comment\">// 2.1.2.2 必须有一个value值</span>\n      self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n      self<span class=\"token punctuation\">.</span>onFulfilled<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 可以变成 fulfilled 或者是 rejected</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 2.1.3.1 不会变成其它状态</span>\n      self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">REJECTED</span>\n      <span class=\"token comment\">// 2.1.3.2 必须有一个promise被reject的reason</span>\n      self<span class=\"token punctuation\">.</span>reason <span class=\"token operator\">=</span> reason\n      self<span class=\"token punctuation\">.</span>onRejected<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 执行executor</span>\n    <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// promise的then方法接收两个参数</span>\n<span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">then</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">onFulfilled<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n\n  <span class=\"token comment\">// 2.2.1 onFulfilled 和 onRejected 都是可选参数</span>\n  <span class=\"token comment\">// 2.2.1.1 onFulfilled 必须是函数类型</span>\n  <span class=\"token comment\">// 2.2.1.2 onRejected 必须是函数类型</span>\n  onFulfilled <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> onFulfilled <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onFulfilled</span> <span class=\"token operator\">:</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> value\n  onRejected <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> onRejected <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onRejected</span> <span class=\"token operator\">:</span> <span class=\"token parameter\">reason</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> reason\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 2.2.4 onFulfilled 和 onRejected 应该是微任务</span>\n  <span class=\"token comment\">// 2.2.5 onFulfilled 和 onRejected 必须作为函数被调用</span>\n\n  <span class=\"token comment\">// 2.2.7.1 onFulfilled 或 onRejected 执行的结果为x,调用 resolvePromise</span>\n  <span class=\"token comment\">// 2.2.7.2 如果 onFulfilled 或者 onRejected 执行时抛出异常e,promise2需要被reject</span>\n  <span class=\"token keyword\">let</span> promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">FULFILLED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n          <span class=\"token function\">resolvePromise</span><span class=\"token punctuation\">(</span>promise2<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">REJECTED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span>\n          <span class=\"token function\">resolvePromise</span><span class=\"token punctuation\">(</span>promise2<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 2.2.2.1 必须在promise变成 fulfilled 时，调用 onFulfilled，参数是promise的value</span>\n      self<span class=\"token punctuation\">.</span>onFulfilled<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">resolvePromise</span><span class=\"token punctuation\">(</span>promise2<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 2.2.3.1 必须在promise变成 rejected 时，调用 onRejected，参数是promise的reason</span>\n      self<span class=\"token punctuation\">.</span>onRejected<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">resolvePromise</span><span class=\"token punctuation\">(</span>promise2<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 2.2.7 then必须返回一个promise</span>\n  <span class=\"token keyword\">return</span> promise2\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">resolvePromise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promise2<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 2.3.1 如果 promise2 和 x 相等，那么 reject promise with a TypeError</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promise2 <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Chaining cycle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 2.3.3.3.3 如果 resolvePromise 和 rejectPromise 都调用了，那么第一个调用优先，后面的调用忽略。</span>\n  <span class=\"token keyword\">let</span> used\n  <span class=\"token comment\">// 2.3.3 如果 x 是一个 object 或者 是一个 function</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 2.3.3.2 如果 x.then 这步出错，那么 reject promise with e as the reason..</span>\n      <span class=\"token keyword\">let</span> then <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>then\n      <span class=\"token comment\">// 2.3.3.3 如果 then 是一个函数，then.call(x, resolvePromiseFn, rejectPromise)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> then <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 2.3.2 如果 x 是一个 promsie</span>\n        <span class=\"token comment\">// 2.3.2.2 如果 x 被 fulfilled, fulfill promise with the same value.</span>\n        <span class=\"token comment\">// 2.3.2.3 如果 x 被 rejected, reject promise with the same reason.</span>\n        <span class=\"token function\">then</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token parameter\">y</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>used<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n          used <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n          <span class=\"token comment\">// 2.3.3.3.1 resolvePromiseFn 的 入参是 y, 执行 resolvePromise(promise2, y, resolve, reject);</span>\n          <span class=\"token function\">resolvePromise</span><span class=\"token punctuation\">(</span>promise2<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>used<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n          used <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n          <span class=\"token comment\">// 2.3.3.3.2 rejectPromise 的 入参是 r, reject promise with r.</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>used<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n        used <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>used<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n      used <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      <span class=\"token comment\">// 2.3.3.3.4 如果调用then抛出异常e</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 2.3.4 如果 x 不是一个 object 或者 function，fulfill promise with x.</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   const p = new Promise((resolve, reject) => {</span>\n<span class=\"token comment\">//     setTimeout(() => {</span>\n<span class=\"token comment\">//       log(`setTimeout log ${Date.now()}`)</span>\n<span class=\"token comment\">//       resolve(12)</span>\n<span class=\"token comment\">//     }, 2000)</span>\n<span class=\"token comment\">//   })</span>\n<span class=\"token comment\">//   p.then(res => {</span>\n<span class=\"token comment\">//     log('res', res)</span>\n<span class=\"token comment\">//     return 2</span>\n<span class=\"token comment\">//   }).then(res => {</span>\n<span class=\"token comment\">//     log('res3', res)</span>\n<span class=\"token comment\">//     return {</span>\n<span class=\"token comment\">//       value: 123</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//   }).then(res => {</span>\n<span class=\"token comment\">//     log('res4', res)</span>\n<span class=\"token comment\">//     return () => {</span>\n<span class=\"token comment\">//       log('fun')</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//   }).then(res => {</span>\n<span class=\"token comment\">//     log('res5', res)</span>\n<span class=\"token comment\">//     return new Promise(() => {</span>\n<span class=\"token comment\">//       log('promise')</span>\n<span class=\"token comment\">//     })</span>\n<span class=\"token comment\">//   })</span>\n<span class=\"token comment\">// }</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">resolve</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 如果 value 是个 thenable 对象，返回的promise会“跟随”这个thenable的对象，采用它的最终状态</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> params\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 如果传入的value本身就是promise对象，那么Promise.resolve将不做任何修改、原封不动地返回这个promise对象。</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params <span class=\"token operator\">&amp;&amp;</span> params<span class=\"token punctuation\">.</span>then <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> params<span class=\"token punctuation\">.</span>then <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        params<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 其他情况，直接返回以该值为成功状态的promise对象。</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   let p = Promise.resolve(20);</span>\n<span class=\"token comment\">//   p.then((data) => {</span>\n<span class=\"token comment\">//       console.log(1, data);</span>\n<span class=\"token comment\">//   });</span>\n<span class=\"token comment\">//   let p2 = Promise.resolve({</span>\n<span class=\"token comment\">//       then: function(resolve, reject) {</span>\n<span class=\"token comment\">//           resolve(30);</span>\n<span class=\"token comment\">//       }</span>\n<span class=\"token comment\">//   });</span>\n<span class=\"token comment\">//   p2.then((data)=> {</span>\n<span class=\"token comment\">//       console.log(2, data)</span>\n<span class=\"token comment\">//   });</span>\n<span class=\"token comment\">//   let p3 = Promise.resolve(new Promise((resolve, reject) => {</span>\n<span class=\"token comment\">//       resolve(400)</span>\n<span class=\"token comment\">//   }));</span>\n<span class=\"token comment\">//   p3.then((data) => {</span>\n<span class=\"token comment\">//       console.log(3, data)</span>\n<span class=\"token comment\">//   });</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token comment\">// Promise.reject方法和Promise.resolve不同，Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。</span>\n<span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">reject</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Promise.prototype.catch 用于指定出错时的回调，是特殊的then方法，catch之后，可以继续 .then</span>\n<span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">catch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> onRejected<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   let x = new Promise((resolve, reject) => {</span>\n<span class=\"token comment\">//     resolve(1)</span>\n<span class=\"token comment\">//   })</span>\n<span class=\"token comment\">//   x.then(res => {</span>\n<span class=\"token comment\">//     throw new Error('err')</span>\n<span class=\"token comment\">//   }).catch(e => {</span>\n<span class=\"token comment\">//     console.log('err', e.toString())</span>\n<span class=\"token comment\">//   })</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">finally</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise<span class=\"token punctuation\">.</span>resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> err <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   let x = new Promise((resolve, reject) => {</span>\n<span class=\"token comment\">//     resolve(1)</span>\n<span class=\"token comment\">//   })</span>\n<span class=\"token comment\">//   x.then(res => {</span>\n<span class=\"token comment\">//     console.log('111', res)</span>\n<span class=\"token comment\">//   }).finally(() => {</span>\n<span class=\"token comment\">//     console.log(222)</span>\n<span class=\"token comment\">//   }).then(() => {</span>\n<span class=\"token comment\">//     console.log('333')</span>\n<span class=\"token comment\">//   })</span>\n<span class=\"token comment\">// }</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">all</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promisees</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token comment\">// 在任何情况下，Promise.all 返回的 promise 的完成状态的结果都是一个数组</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promisees<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">processValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>index <span class=\"token operator\">===</span> promisees<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> promisees<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// promises[i] 可能是普通值</span>\n        Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>promisees<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">processValue</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 如果参数中有一个promise失败，那么Promise.all返回的promise对象失败</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   var promise1 = new Promise((resolve, reject) => {</span>\n<span class=\"token comment\">//     resolve(3);</span>\n<span class=\"token comment\">//   })</span>\n<span class=\"token comment\">//   var promise2 = 42;</span>\n<span class=\"token comment\">//   var promise3 = new Promise(function(resolve, reject) {</span>\n<span class=\"token comment\">//     setTimeout(resolve, 100, 'foo');</span>\n<span class=\"token comment\">//   });</span>\n\n<span class=\"token comment\">//   Promise.all([promise1, promise2, promise3]).then(function(values) {</span>\n<span class=\"token comment\">//     console.log('values', values); //[3, 42, 'foo']</span>\n<span class=\"token comment\">//   },(err)=>{</span>\n<span class=\"token comment\">//       console.log(err)</span>\n<span class=\"token comment\">//   });</span>\n\n<span class=\"token comment\">//   var p = Promise.all([]); // will be immediately resolved</span>\n<span class=\"token comment\">//   var p2 = Promise.all([1337, \"hi\"]); // non-promise values will be ignored, but the evaluation will be done asynchronously</span>\n<span class=\"token comment\">//   console.log(p);</span>\n<span class=\"token comment\">//   console.log(p2)</span>\n<span class=\"token comment\">//   setTimeout(function(){</span>\n<span class=\"token comment\">//       console.log('the stack is now empty');</span>\n<span class=\"token comment\">//       console.log(p2);</span>\n<span class=\"token comment\">//   });</span>\n<span class=\"token comment\">// }</span>\n\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">race</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 如果传的参数数组是空，则返回的 promise 将永远等待。</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success '</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err '</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nPromise<span class=\"token punctuation\">.</span>defer <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">deferred</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> dfd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  dfd<span class=\"token punctuation\">.</span>promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    dfd<span class=\"token punctuation\">.</span>resolve <span class=\"token operator\">=</span> resolve<span class=\"token punctuation\">;</span>\n    dfd<span class=\"token punctuation\">.</span>reject <span class=\"token operator\">=</span> reject<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> dfd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Promise</code></pre><pre class=\"language-bash\"><code class=\"language-bash\"># 测试用例\n\nnpm install -g promises-aplus-tests\n\npromises-aplus-tests promise.js</code></pre><p>Simple</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// simple</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">log</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PENDING</span> <span class=\"token operator\">=</span> <span class=\"token string\">'pending'</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token operator\">=</span> <span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REJECTED</span> <span class=\"token operator\">=</span> <span class=\"token string\">'rejected'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">PENDING</span>\n  self<span class=\"token punctuation\">.</span>onFulfilled <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  self<span class=\"token punctuation\">.</span>onRejected <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">FULFILLED</span>\n      self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n      self<span class=\"token punctuation\">.</span>onFulfilled<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">REJECTED</span>\n      self<span class=\"token punctuation\">.</span>reason <span class=\"token operator\">=</span> reason\n      self<span class=\"token punctuation\">.</span>onRejected<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">then</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">onFulfilled<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n\n  <span class=\"token keyword\">let</span> promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      self<span class=\"token punctuation\">.</span>onFulfilled<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> promise2\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">setTimeout log </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'res'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'res2'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'res3'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre><p>参考文章写得非常好，改天理解更深入后再来更新</p>\n","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}