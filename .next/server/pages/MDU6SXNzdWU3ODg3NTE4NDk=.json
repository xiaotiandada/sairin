{"pageProps":{"post":{"id":"MDU6SXNzdWU3ODg3NTE4NDk=","url":"https://github.com/xiaotiandada/blog/issues/61","title":"bilibili banner动画研究【一】","updatedAt":"2021-01-19T06:40:19Z","createdAt":"2021-01-19T06:40:19Z","body":" 2020-11-16 21:52:56\r\n\r\n![动画效果](https://i.imgur.com/2BWZJjY.jpg?1)\r\n\r\nhttps://www.bilibili.com/ 后面可能会被更新掉\r\n\r\n>  为什么叫一？ 说不能还有别的好玩的动画学习！\r\n\r\n<!-- more -->\r\n\r\n<iframe src=\"https://codesandbox.io/embed/bilibili-bannner-w49d7?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\r\n     style=\"width:100%; height:200px; border:0; border-radius: 4px; overflow:hidden;\"\r\n     title=\"bilibili bannner\"\r\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\r\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\r\n   ></iframe>\r\n\r\n主要两个组件完成，代码我也是复制b站大佬的🍑 然后自己理解理解思路\r\n\r\n### Banner.vue\r\n\r\n```javascript\r\n  computed: {\r\n    locs() {\r\n      return {\r\n    \t\t//...\r\n        pic:\r\n          \"http://i0.hdslb.com/bfs/archive/0b7eef054547750e6bfeff6f36c83e83d2a058fb.png\",\r\n        litpic:\r\n          \"http://i0.hdslb.com/bfs/archive/622017dd4b0140432962d3ce0c6db99d77d2e937.png\",\r\n\t\t\t\t//...\r\n      };\r\n    },\r\n    bannerImg() {\r\n      return (this.locs && this.locs.pic).trim();\r\n    },\r\n    logoImg() {\r\n      return (this.locs && this.locs.litpic).trim();\r\n    },\r\n  },\r\n```\r\n\r\n返回一张静止的页面，在没有加载完成或者不支持的时候显示\r\n\r\n```javascript\r\n// 解析数据 提前定义好的具体看代码\r\nthis.layerConfig = JSON.parse('[...]');\r\n```\r\n\r\n解析banner数据\r\n\r\n```javascript\r\n// 只有在启用了动画banner的配置，且浏览器支持css filter时才加载动画banner的图片资源\r\nthis.animatedBannerSupport =\r\n  typeof CSS !== \"undefined\" &&\r\n  CSS.supports &&\r\n  CSS.supports(\"filter: blur(1px)\");\r\n```\r\n\r\n查看是否支持一些需要的条件\r\n\r\n```javascript\r\n// 根据每帧时长计算循环时间\r\nthis.layerConfig.map((v) => {\r\n  v.loopTime = v.images.reduce((p, c) => p + (c.duration || 0), 0);\r\n});\r\n```\r\n\r\n统计所有Time 利用 Reduce 累计\r\n\r\n```javascript\r\ntry {\r\n  // 加载所有图片资源\r\n  await Promise.all(\r\n    this.layerConfig.map(async (v) => {\r\n      console.log(\"v\", v);\r\n      return Promise.all(\r\n        v.images.map(async (i, index) => {\r\n          const img = document.createElement(\"img\");\r\n          img.src = i.src;\r\n          await new Promise((resolve) => (img.onload = resolve));\r\n          v.images[index].img = img;\r\n        })\r\n      );\r\n    })\r\n  );\r\n  console.log(\"this.layerConfig\", this.layerConfig);\r\n  // 切换为动画banner\r\n  this.animatedBannerLoaded = true;\r\n} catch (e) {\r\n  console.log(\"load animated banner images error\", e);\r\n}\r\n```\r\n\r\n利用Promise加载所有图片资源，两个Promise是因为images里面也是一个数组\r\n\r\n可以用这种方法提前加载图片 这样切换的时候就不会很卡顿 嗯 学习了！\r\n\r\n### AnimatedBanner\r\n\r\n```javascript\r\nprops: {\r\n  layerConfig: {\r\n    type: Array,\r\n      required: true,\r\n  },\r\n},\r\n```\r\n\r\n接收父组件处理好的数组数据\r\n\r\n```javascript\r\nconst layerConfig = this.layerConfig;\r\nif (!layerConfig.length) {\r\n  this.$emit(\"error\");\r\n}\r\n\r\nconst container = this.$refs[\"container\"];\r\nlet containerHeight = container.clientHeight;\r\nlet containerWidth = container.clientWidth;\r\nlet containerScale = containerHeight / 155;\r\n\r\n// 加载图片资源移动到组件外部， 这里只设置图片宽高\r\nlayerConfig.forEach((v) => {\r\n  v.images.forEach((i, index) => {\r\n    const img = v.images[index].img;\r\n    img.dataset.height = img.height;\r\n    img.dataset.width = img.width;\r\n    img.height =\r\n      img.dataset.height * containerScale * (v.initial.scale || 1);\r\n    img.width = img.dataset.width * containerScale * (v.initial.scale || 1);\r\n  });\r\n});\r\n```\r\n\r\n如果没有调用$emit告诉父组件显示静态图片\r\n\r\n获取容器和宽高缩放等属性，并且设置父组件获取图片的宽高等属性 并且根据缩放比例计算\r\n\r\n```javascript\r\n// 初始化图层\r\nconst layers = layerConfig.map((v) => {\r\n  const layer = document.createElement(\"div\");\r\n  layer.classList.add(\"layer\");\r\n  container.appendChild(layer);\r\n  return layer;\r\n});\r\n```\r\n\r\n初始化图层到container\r\n\r\n```javascript\r\n// 初始状态\r\nconst iaf = () => {\r\n  try {\r\n    layers.map((layer, i) => {\r\n      // console.log(\"layer log\", i, layer);\r\n      const v = layerConfig[i];\r\n      const a = layer.firstChild;\r\n      // console.log(\"a\", a);\r\n      let rotateStr = \"\";\r\n      let translateStr = \"\";\r\n      if (v.initial.rotate) {\r\n        rotateStr = `rotate(${v.initial.rotate}deg)`;\r\n      }\r\n      if (v.initial.translate) {\r\n        const base = v.initial.translate || [0, 0];\r\n        translateStr = `translate(${base[0]}px, ${base[1]}px)`;\r\n      }\r\n      a.style.transform = `${translateStr} ${rotateStr}`;\r\n      if (v.initial.blur) {\r\n        a.style.filter = `blur(${Math.abs(v.initial.blur)}px)`;\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    this.$emit(\"error\");\r\n  }\r\n};\r\n\r\n// 切换下一帧的方法\r\nconst changeToNextFrame = (layer, images, i) => {\r\n  setTimeout(() => {\r\n    const next = i === images.length - 1 ? 0 : i + 1;\r\n    layer.removeChild(layer.firstChild);\r\n    layer.appendChild(images[next].img);\r\n    changeToNextFrame(layer, images, next);\r\n    requestAnimationFrame(af);\r\n  }, images[i].duration);\r\n};\r\n\r\n// 初始化图层内图片和帧动画\r\nlayerConfig.map((v, i) => {\r\n  const a = v.images[0].img;\r\n  layers[i].appendChild(a);\r\n  requestAnimationFrame(iaf);\r\n  if (v.images.length > 1 && v.loopTime > 0) {\r\n    changeToNextFrame(layers[i], v.images, 0);\r\n  }\r\n});\r\n```\r\n\r\n初始化图层图片和一些默认样式并且开始帧动画\r\n\r\n利用定时器loop toggle img 删除第一个元素然后添加下一帧图片然后再调用自己\r\n\r\n```javascript\r\ndocument.addEventListener(\"mouseleave\", this.handleMouseLeave);\r\nwindow.addEventListener(\"mousemove\", this.handleMouseMove);\r\nwindow.addEventListener(\"resize\", this.handleResize);\r\n\r\nbeforeDestroy() {\r\n  document.removeEventListener(\"mouseleave\", this.handleMouseLeave);\r\n  window.removeEventListener(\"mousemove\", this.handleMouseMove);\r\n  window.removeEventListener(\"resize\", this.handleResize);\r\n},\r\n```\r\n\r\n监听一些事件\r\n\r\n```javascript\r\nthis.handleMouseMove = (e) => {\r\n  const offsetY = document.documentElement.scrollTop + e.clientY;\r\n  console.log(\"offsetY\", offsetY, e);\r\n  if (offsetY < containerHeight) {\r\n    if (!entered) {\r\n      entered = true;\r\n      enterX = e.clientX;\r\n    }\r\n    displace = (e.clientX - enterX) / containerWidth;\r\n    cancelAnimationFrame(raf);\r\n    raf = requestAnimationFrame(af);\r\n  } else {\r\n    if (entered) {\r\n      entered = false;\r\n      handleLeave();\r\n    }\r\n  }\r\n};\r\n```\r\n\r\n鼠标经过容器执行af 先取消再继续，不在容器内调用 handleLeave\r\n\r\n```javascript\r\nenterX = e.clientX;\r\ndisplace = (e.clientX - enterX) / containerWidth;\r\n```\r\n\r\n这两个的含义其实我还没太理解 后续需要用 displace 参与计算 应该就是用来判断往左还是右边的\r\n\r\n```javascript\r\n// 根据鼠标位置改变状态\r\nconst af = (t) => {\r\n  try {\r\n    layers.map((layer, i) => {\r\n      const v = layerConfig[i];\r\n      const a = layer.firstChild;\r\n      if (!v.offset || !a) {\r\n        return;\r\n      }\r\n\r\n      const baseRotate = v.initial.rotate || 0;\r\n      const baseTranslate = v.initial.trannslate || [0, 0];\r\n      let scaleStr = ``;\r\n      let rotateStr = `rotate(${v.initial.rotate || 0}deg)`;\r\n      let translateStr = `translate(${baseTranslate[0]}px, ${baseTranslate[1]}px)`;\r\n\r\n      console.log(\r\n        \"rotateStr translateStr\",\r\n        rotateStr,\r\n        translateStr,\r\n        v.offset\r\n      );\r\n\r\n      if (v.offset.scale) {\r\n        const itp =\r\n              v.offsetCurve && v.offsetCurve.scale\r\n        ? curveParameterToFunc(v.offsetCurve.scale)\r\n        : (x) => x;\r\n        const offset = v.offset.scale * itp(displace);\r\n        scaleStr = `scale(${1 + offset})`;\r\n      }\r\n      if (v.offset.rotate) {\r\n        const itp =\r\n              v.offsetCurve && v.offsetCurve.rotate\r\n        ? curveParameterToFunc(v.offsetCurve.rotate)\r\n        : (x) => x;\r\n        const offset = v.offset.rotate * itp(displace);\r\n        rotateStr = `rotate(${baseRotate + offset}deg)`;\r\n      }\r\n      if (v.offset.translate) {\r\n        const itp =\r\n              v.offsetCurve && v.offsetCurve.translate\r\n        ? curveParameterToFunc(v.offsetCurve.translate)\r\n        : (x) => x;\r\n        const offset = v.offset.translate.map((v) => itp(displace) * v);\r\n        const translate = baseTranslate.map(\r\n          (x, i) =>\r\n          (x + offset[i]) * containerScale * (v.initial.scale || 1)\r\n        );\r\n        translateStr = `translate(${translate[0]}px, ${translate[1]}px)`;\r\n      }\r\n      a.style.transform = `${scaleStr} ${translateStr} ${rotateStr}`;\r\n      if (v.offset.blur) {\r\n        const itp =\r\n              v.offsetCurve && v.offsetCurve.blur\r\n        ? curveParameterToFunc(v.offsetCurve.blur)\r\n        : (x) => x;\r\n        const blurOffset = itp(displace) * v.offset.blur;\r\n        a.style.filter = `blur(${Math.abs(\r\n          (v.initial.blur || 0) + blurOffset\r\n        )}px)`;\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    this.$emit(\"error\");\r\n  }\r\n};\r\n```\r\n\r\n关键代码在这里...\r\n\r\n1. 判断有没有元素\r\n\r\n2. 获取一些初始的style\r\n\r\n3. 然后判断有没有offset scale rotate translate blur 然后执行动画\r\n\r\n4. 判断有没有 offset curve 如果有用 cubicBezier 没有就用默认参数\r\n\r\n5. 往右边 x2 > x1 / width 正数\r\n\r\n   1. Scale 默认是 1\r\n\r\n      ```javascript\r\n      const offset = v.offset.scale * itp(displace);\r\n      scaleStr = `scale(${1 + offset})`;\r\n      ```\r\n\r\n   2. Rotate 根据上面定义的默认参数然后加上新角度\r\n\r\n      ```javascript\r\n      const offset = v.offset.rotate * itp(displace);\r\n      rotateStr = `rotate(${baseRotate + offset}deg)`;\r\n      ```\r\n\r\n   3. Translate 根据比例计算\r\n\r\n      ```javascript\r\n      const offset = v.offset.translate.map((v) => itp(displace) * v);\r\n      const translate = baseTranslate.map(\r\n        (x, i) =>\r\n        (x + offset[i]) * containerScale * (v.initial.scale || 1)\r\n      );\r\n      translateStr = `translate(${translate[0]}px, ${translate[1]}px)`;\r\n      ```\r\n\r\n      因为是个arr所以map loop，后面的 * 容器比例 * 初始化scale 应该是适配缩放的比例然后变化位置\r\n\r\n      ```javascript\r\n      a.style.transform = `${scaleStr} ${translateStr} ${rotateStr}`;\r\n      ```\r\n\r\n      最后设置属性\r\n\r\n   4. blur 初始的blur + 变化后的blur\r\n\r\n      ```javascript\r\n      const blurOffset = itp(displace) * v.offset.blur;\r\n      a.style.filter = `blur(${Math.abs(\r\n        (v.initial.blur || 0) + blurOffset\r\n      )}px)`;\r\n      ```\r\n\r\n```javascript\r\nconst handleLeave = () => {\r\n  const now = performance.now();\r\n  const timeout = 200;\r\n  const tempDisplace = displace;\r\n  cancelAnimationFrame(raf);\r\n  const leaveAF = (t) => {\r\n    if (t - now < timeout) {\r\n      displace = tempDisplace * (1 - (t - now) / 200);\r\n      af(t);\r\n      requestAnimationFrame(leaveAF);\r\n    } else {\r\n      displace = 0;\r\n      af(t);\r\n    }\r\n  };\r\n  raf = requestAnimationFrame(leaveAF);\r\n};\r\n```\r\n\r\n鼠标离开后 在200time内displace会逐渐变小或扩大 取决于正数还是负数 超过时间后会设置为 0 然后调用动画恢复默认参数\r\n\r\n```javascript\r\nthis.handleResize = () => {\r\n  containerHeight = container.clientHeight;\r\n  containerWidth = container.clientWidth;\r\n  containerScale = containerHeight / 155;\r\n  layerConfig.forEach((lc) => {\r\n    lc.images.forEach((i) => {\r\n      const img = i.img;\r\n      img.height =\r\n        img.dataset.height * containerScale * (lc.initial.scale || 1);\r\n      img.width =\r\n        img.dataset.width * containerScale * (lc.initial.scale || 1);\r\n    });\r\n  });\r\n  cancelAnimationFrame(raf);\r\n  raf = requestAnimationFrame((t) => {\r\n    af(t);\r\n  });\r\n};\r\n```\r\n\r\n 设置容器的样式参数然后取消动画再开始动画赋值给raf\r\n\r\n","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<p> 2020-11-16 21:52:56</p>\n<p><img src=\"https://i.imgur.com/2BWZJjY.jpg?1\" alt=\"动画效果\"></p>\n<p><a href=\"https://www.bilibili.com/\">https://www.bilibili.com/</a> 后面可能会被更新掉</p>\n<blockquote>\n<p> 为什么叫一？ 说不能还有别的好玩的动画学习！</p>\n</blockquote>\n<!-- more -->\n\n<iframe src=\"https://codesandbox.io/embed/bilibili-bannner-w49d7?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\n     style=\"width:100%; height:200px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"bilibili bannner\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n<p>主要两个组件完成，代码我也是复制b站大佬的🍑 然后自己理解理解思路</p>\n<h3 id=\"bannervue\">Banner.vue</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">locs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//...</span>\n        <span class=\"token literal-property property\">pic</span><span class=\"token operator\">:</span>\n          <span class=\"token string\">\"http://i0.hdslb.com/bfs/archive/0b7eef054547750e6bfeff6f36c83e83d2a058fb.png\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">litpic</span><span class=\"token operator\">:</span>\n          <span class=\"token string\">\"http://i0.hdslb.com/bfs/archive/622017dd4b0140432962d3ce0c6db99d77d2e937.png\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">//...</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">bannerImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>locs <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>locs<span class=\"token punctuation\">.</span>pic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">logoImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>locs <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>locs<span class=\"token punctuation\">.</span>litpic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre><p>返回一张静止的页面，在没有加载完成或者不支持的时候显示</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 解析数据 提前定义好的具体看代码</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>layerConfig <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[...]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>解析banner数据</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 只有在启用了动画banner的配置，且浏览器支持css filter时才加载动画banner的图片资源</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>animatedBannerSupport <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">typeof</span> <span class=\"token constant\">CSS</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">&amp;&amp;</span>\n  <span class=\"token constant\">CSS</span><span class=\"token punctuation\">.</span>supports <span class=\"token operator\">&amp;&amp;</span>\n  <span class=\"token constant\">CSS</span><span class=\"token punctuation\">.</span><span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filter: blur(1px)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>查看是否支持一些需要的条件</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 根据每帧时长计算循环时间</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>layerConfig<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  v<span class=\"token punctuation\">.</span>loopTime <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> p <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>统计所有Time 利用 Reduce 累计</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 加载所有图片资源</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>layerConfig<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n        v<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          v<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>img <span class=\"token operator\">=</span> img<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this.layerConfig\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>layerConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 切换为动画banner</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>animatedBannerLoaded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load animated banner images error\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre><p>利用Promise加载所有图片资源，两个Promise是因为images里面也是一个数组</p>\n<p>可以用这种方法提前加载图片 这样切换的时候就不会很卡顿 嗯 学习了！</p>\n<h3 id=\"animatedbanner\">AnimatedBanner</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">layerConfig</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Array<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre><p>接收父组件处理好的数组数据</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> layerConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>layerConfig<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>layerConfig<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">[</span><span class=\"token string\">\"container\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> containerHeight <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> containerWidth <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>clientWidth<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> containerScale <span class=\"token operator\">=</span> containerHeight <span class=\"token operator\">/</span> <span class=\"token number\">155</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 加载图片资源移动到组件外部， 这里只设置图片宽高</span>\nlayerConfig<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  v<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span>\n      img<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>height <span class=\"token operator\">*</span> containerScale <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>scale <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> containerScale <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>scale <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>如果没有调用$emit告诉父组件显示静态图片</p>\n<p>获取容器和宽高缩放等属性，并且设置父组件获取图片的宽高等属性 并且根据缩放比例计算</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 初始化图层</span>\n<span class=\"token keyword\">const</span> layers <span class=\"token operator\">=</span> layerConfig<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> layer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  layer<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"layer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> layer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>初始化图层到container</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 初始状态</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">iaf</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    layers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">layer<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// console.log(\"layer log\", i, layer);</span>\n      <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> layerConfig<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> layer<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// console.log(\"a\", a);</span>\n      <span class=\"token keyword\">let</span> rotateStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> translateStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>rotate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        rotateStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rotate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>rotate<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">deg)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>translate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> base <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>translate <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        translateStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>base<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>base<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      a<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>translateStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rotateStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>blur<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        a<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>filter <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">blur(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>blur<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 切换下一帧的方法</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeToNextFrame</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">layer<span class=\"token punctuation\">,</span> images<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> i <span class=\"token operator\">===</span> images<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    layer<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    layer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">changeToNextFrame</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">,</span> images<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>af<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> images<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 初始化图层内图片和帧动画</span>\nlayerConfig<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">;</span>\n  layers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>iaf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> v<span class=\"token punctuation\">.</span>loopTime <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">changeToNextFrame</span><span class=\"token punctuation\">(</span>layers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>初始化图层图片和一些默认样式并且开始帧动画</p>\n<p>利用定时器loop toggle img 删除第一个元素然后添加下一帧图片然后再调用自己</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseleave\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseLeave<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousemove\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resize\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseleave\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseLeave<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousemove\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resize\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre><p>监听一些事件</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handleMouseMove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> offsetY <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>clientY<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"offsetY\"</span><span class=\"token punctuation\">,</span> offsetY<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offsetY <span class=\"token operator\">&lt;</span> containerHeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>entered<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      entered <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      enterX <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    displace <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">-</span> enterX<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> containerWidth<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>raf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    raf <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>af<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entered<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      entered <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">handleLeave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><p>鼠标经过容器执行af 先取消再继续，不在容器内调用 handleLeave</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">enterX <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">;</span>\ndisplace <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">-</span> enterX<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> containerWidth<span class=\"token punctuation\">;</span></code></pre><p>这两个的含义其实我还没太理解 后续需要用 displace 参与计算 应该就是用来判断往左还是右边的</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 根据鼠标位置改变状态</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">af</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    layers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">layer<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> layerConfig<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> layer<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>v<span class=\"token punctuation\">.</span>offset <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> baseRotate <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>rotate <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> baseTranslate <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>trannslate <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> scaleStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> rotateStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rotate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>rotate <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">deg)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> translateStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseTranslate<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseTranslate<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"rotateStr translateStr\"</span><span class=\"token punctuation\">,</span>\n        rotateStr<span class=\"token punctuation\">,</span>\n        translateStr<span class=\"token punctuation\">,</span>\n        v<span class=\"token punctuation\">.</span>offset\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> itp <span class=\"token operator\">=</span>\n              v<span class=\"token punctuation\">.</span>offsetCurve <span class=\"token operator\">&amp;&amp;</span> v<span class=\"token punctuation\">.</span>offsetCurve<span class=\"token punctuation\">.</span>scale\n        <span class=\"token operator\">?</span> <span class=\"token function\">curveParameterToFunc</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>offsetCurve<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>scale <span class=\"token operator\">*</span> <span class=\"token function\">itp</span><span class=\"token punctuation\">(</span>displace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        scaleStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">scale(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> offset<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>rotate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> itp <span class=\"token operator\">=</span>\n              v<span class=\"token punctuation\">.</span>offsetCurve <span class=\"token operator\">&amp;&amp;</span> v<span class=\"token punctuation\">.</span>offsetCurve<span class=\"token punctuation\">.</span>rotate\n        <span class=\"token operator\">?</span> <span class=\"token function\">curveParameterToFunc</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>offsetCurve<span class=\"token punctuation\">.</span>rotate<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>rotate <span class=\"token operator\">*</span> <span class=\"token function\">itp</span><span class=\"token punctuation\">(</span>displace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rotateStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rotate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseRotate <span class=\"token operator\">+</span> offset<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">deg)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>translate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> itp <span class=\"token operator\">=</span>\n              v<span class=\"token punctuation\">.</span>offsetCurve <span class=\"token operator\">&amp;&amp;</span> v<span class=\"token punctuation\">.</span>offsetCurve<span class=\"token punctuation\">.</span>translate\n        <span class=\"token operator\">?</span> <span class=\"token function\">curveParameterToFunc</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>offsetCurve<span class=\"token punctuation\">.</span>translate<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>translate<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">itp</span><span class=\"token punctuation\">(</span>displace<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> translate <span class=\"token operator\">=</span> baseTranslate<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n          <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> containerScale <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>scale <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        translateStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>translate<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>translate<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      a<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>scaleStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>translateStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rotateStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>blur<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> itp <span class=\"token operator\">=</span>\n              v<span class=\"token punctuation\">.</span>offsetCurve <span class=\"token operator\">&amp;&amp;</span> v<span class=\"token punctuation\">.</span>offsetCurve<span class=\"token punctuation\">.</span>blur\n        <span class=\"token operator\">?</span> <span class=\"token function\">curveParameterToFunc</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>offsetCurve<span class=\"token punctuation\">.</span>blur<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> blurOffset <span class=\"token operator\">=</span> <span class=\"token function\">itp</span><span class=\"token punctuation\">(</span>displace<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>blur<span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>filter <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">blur(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>blur <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> blurOffset\n        <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><p>关键代码在这里...</p>\n<ol>\n<li><p>判断有没有元素</p>\n</li>\n<li><p>获取一些初始的style</p>\n</li>\n<li><p>然后判断有没有offset scale rotate translate blur 然后执行动画</p>\n</li>\n<li><p>判断有没有 offset curve 如果有用 cubicBezier 没有就用默认参数</p>\n</li>\n<li><p>往右边 x2 &gt; x1 / width 正数</p>\n<ol>\n<li><p>Scale 默认是 1</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>scale <span class=\"token operator\">*</span> <span class=\"token function\">itp</span><span class=\"token punctuation\">(</span>displace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscaleStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">scale(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> offset<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></li>\n<li><p>Rotate 根据上面定义的默认参数然后加上新角度</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>rotate <span class=\"token operator\">*</span> <span class=\"token function\">itp</span><span class=\"token punctuation\">(</span>displace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrotateStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rotate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseRotate <span class=\"token operator\">+</span> offset<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">deg)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></li>\n<li><p>Translate 根据比例计算</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>translate<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">itp</span><span class=\"token punctuation\">(</span>displace<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> translate <span class=\"token operator\">=</span> baseTranslate<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> containerScale <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>scale <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntranslateStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>translate<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>translate<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre><p>因为是个arr所以map loop，后面的 * 容器比例 * 初始化scale 应该是适配缩放的比例然后变化位置</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">a<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>scaleStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>translateStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rotateStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre><p>最后设置属性</p>\n</li>\n<li><p>blur 初始的blur + 变化后的blur</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> blurOffset <span class=\"token operator\">=</span> <span class=\"token function\">itp</span><span class=\"token punctuation\">(</span>displace<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>blur<span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>filter <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">blur(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>blur <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> blurOffset\n<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></li>\n</ol>\n</li>\n</ol>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLeave</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> timeout <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> tempDisplace <span class=\"token operator\">=</span> displace<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>raf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">leaveAF</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">-</span> now <span class=\"token operator\">&lt;</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      displace <span class=\"token operator\">=</span> tempDisplace <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">-</span> now<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">af</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>leaveAF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      displace <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">af</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  raf <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>leaveAF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><p>鼠标离开后 在200time内displace会逐渐变小或扩大 取决于正数还是负数 超过时间后会设置为 0 然后调用动画恢复默认参数</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handleResize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  containerHeight <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span>\n  containerWidth <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>clientWidth<span class=\"token punctuation\">;</span>\n  containerScale <span class=\"token operator\">=</span> containerHeight <span class=\"token operator\">/</span> <span class=\"token number\">155</span><span class=\"token punctuation\">;</span>\n  layerConfig<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lc</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    lc<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">;</span>\n      img<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span>\n        img<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>height <span class=\"token operator\">*</span> containerScale <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>lc<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>scale <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      img<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span>\n        img<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> containerScale <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>lc<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">.</span>scale <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>raf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  raf <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">af</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><p> 设置容器的样式参数然后取消动画再开始动画赋值给raf</p>\n","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}