{"pageProps":{"post":{"id":"MDU6SXNzdWU3ODg3NTAyMjE=","url":"https://github.com/xiaotiandada/blog/issues/51","title":"让Mocha支持es6语法","updatedAt":"2021-01-19T06:37:07Z","createdAt":"2021-01-19T06:37:07Z","body":"2020-07-08 18:23:34\r\n\r\n因为 Mocha 默认支持 commonJS\r\n\r\n参考资料 https://greenfavo.github.io/blog/docs/02.html\r\n\r\n<!-- more -->\r\n\r\n如果直接引入 import 会报错, 这让 写 es 语法的时候无法通过 import 来直接测试\r\n\r\n这里借助 babel 转换\t\r\n\r\n定义 **scripts** 运行 **test** Mocha 会自动执行 test 目录的测试代码\r\n\r\n```javascript\r\n\"scripts\": {\r\n  \"test\": \"mocha\",\r\n}\r\n```\r\n\r\n为了支持es6语法，加上以下代码\r\n\r\n```javascript\r\n\"scripts\": {\r\n  \"test\": \"mocha --require babel-register --bail\",\r\n}\r\n```\r\n\r\n安装依赖\r\n\r\n```bash\r\nnpm install babel-register  babel-preset-env -D\r\n```\r\n\r\n新建 **.babelrc** \r\n\r\n```json\r\n{\r\n  \"presets\": [\r\n    [\"env\"]\r\n  ]\r\n}\r\n```\r\n\r\nbabel会自动读取`.babelrc`配置文件，这样就让我们的Mocha代码支持es6的模块系统和es6的其他语法了\r\n\r\n运行\r\n\r\n```bash\r\nnpm run test\r\n```\r\n\r\nMocha配置说明 (纯复制\r\n\r\n>Mocha的两个配置--require和--bail,官方文档是这样说的：\r\n>\r\n>–require\r\n>\r\n>The –require option is useful for libraries such as should.js, so you may simply –require should instead of manually invoking require(‘should’) within each test file.\r\n>\r\n>意思是--require和在代码里手动require('babel-register')一样，但写在配置里会作用到每个test文件。默认支持.es .js .jsx扩展名. 老版本的Mocha使用--compilers命令支持其他文件扩展名，但在4.0后就废弃掉了。\r\n>\r\n>–bail\r\n>\r\n>Only interested in the first exception? use –bail!\r\n>\r\n>--bail可以在第一个异常抛出的时候停止运行测试,这对集成测试很重要。\r\n>\r\n>About Babel\r\n>\r\n>If your ES6 modules have extension .js, you can npm install –save-dev babel-register and use mocha –require babel-register; –compilers is only necessary if you need to specify a file extension.\r\n>\r\n>babel-register可以让Mocha支持ES6 module，就是import export 写法.\r\n>\r\n>babel-preset-env在没有任何配置选项的情况下，与 babel-preset-latest（或者babel-preset-es2015，babel-preset-es2016和babel-preset-es2017一起）的行为完全相同。官方推荐使用babel-preset-env.\r\n\r\n","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<p>2020-07-08 18:23:34</p>\n<p>因为 Mocha 默认支持 commonJS</p>\n<p>参考资料 <a href=\"https://greenfavo.github.io/blog/docs/02.html\">https://greenfavo.github.io/blog/docs/02.html</a></p>\n<!-- more -->\n\n<p>如果直接引入 import 会报错, 这让 写 es 语法的时候无法通过 import 来直接测试</p>\n<p>这里借助 babel 转换\t</p>\n<p>定义 <strong>scripts</strong> 运行 <strong>test</strong> Mocha 会自动执行 test 目录的测试代码</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mocha\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre><p>为了支持es6语法，加上以下代码</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mocha --require babel-register --bail\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre><p>安装依赖</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npm install babel-register  babel-preset-env -D</code></pre><p>新建 <strong>.babelrc</strong> </p>\n<pre class=\"language-json\"><code class=\"language-json\">{\n  \"presets\": [\n    [\"env\"]\n  ]\n}</code></pre><p>babel会自动读取<code>.babelrc</code>配置文件，这样就让我们的Mocha代码支持es6的模块系统和es6的其他语法了</p>\n<p>运行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npm run test</code></pre><p>Mocha配置说明 (纯复制</p>\n<blockquote>\n<p>Mocha的两个配置--require和--bail,官方文档是这样说的：</p>\n<p>–require</p>\n<p>The –require option is useful for libraries such as should.js, so you may simply –require should instead of manually invoking require(‘should’) within each test file.</p>\n<p>意思是--require和在代码里手动require(&#39;babel-register&#39;)一样，但写在配置里会作用到每个test文件。默认支持.es .js .jsx扩展名. 老版本的Mocha使用--compilers命令支持其他文件扩展名，但在4.0后就废弃掉了。</p>\n<p>–bail</p>\n<p>Only interested in the first exception? use –bail!</p>\n<p>--bail可以在第一个异常抛出的时候停止运行测试,这对集成测试很重要。</p>\n<p>About Babel</p>\n<p>If your ES6 modules have extension .js, you can npm install –save-dev babel-register and use mocha –require babel-register; –compilers is only necessary if you need to specify a file extension.</p>\n<p>babel-register可以让Mocha支持ES6 module，就是import export 写法.</p>\n<p>babel-preset-env在没有任何配置选项的情况下，与 babel-preset-latest（或者babel-preset-es2015，babel-preset-es2016和babel-preset-es2017一起）的行为完全相同。官方推荐使用babel-preset-env.</p>\n</blockquote>\n","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}