{"pageProps":{"post":{"id":"MDU6SXNzdWU3ODg3NDY4NDc=","url":"https://github.com/xiaotiandada/blog/issues/40","title":"node-mysql爬取图片并显示","updatedAt":"2021-01-19T06:30:27Z","createdAt":"2021-01-19T06:30:27Z","body":" 2019-11-03 23:11:39\r\n\r\n[node爬虫 简易版【站酷】](https://xiaotiandada.github.io/2019/08/29/node%E7%88%AC%E8%99%AB-%E7%AE%80%E6%98%93%E7%89%88%E3%80%90%E7%AB%99%E9%85%B7%E3%80%91/)\r\n\r\n[node mysql 增删改查【简易版】](https://xiaotiandada.github.io/2019/09/02/node-mysql-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E3%80%90%E7%AE%80%E6%98%93%E7%89%88%E3%80%91/)\r\n\r\n结合上面的文章做了一个图片展示\r\n\r\n<!-- more -->\r\n\r\n![node-mysql爬取图片并显示](node-mysql爬取图片并显示/client.png)\r\n\r\n## start\r\n\r\n启动node服务, 使用express\r\n\r\n```js\r\n\r\nconst express = require('express')\r\nconst app = express()\r\nconst router = require('./router')\r\n\r\napp.use(router)\r\napp.listen(3000, () => console.log('port in 3000'))\r\n\r\n// router\r\nconst router = express.Router()\r\nrouter.get('/', (req, res) => {\r\n  res.send(`hello world`)\r\n})\r\nmodule.exports = router\r\n```\r\n\r\n```bash\r\nnode index.js\r\n# 或者利用nodemon监听\r\nnodemon index  # 写入配置文件\r\n```\r\n\r\n```js\r\n  \"scripts\": {\r\n    \"dev\": \"nodemon index.js\"\r\n  },\r\n```\r\n\r\n```bash\r\nyarn dev\r\n\r\n#or\r\n\r\nnpm run dev\r\n```\r\n\r\n在屏幕看见 hello world 就算是成功了\r\n\r\n### 修改crawler.js\r\n\r\n```js\r\n// 在之前下载图片逻辑后面写入插入数据库逻辑\r\n\r\n// ...\r\nconst mysql = require('./mysql')\r\n// ...\r\n\r\n  // 下载图片\r\n  const download = (item, id) => {\r\n    try {\r\n      let userAgent = userAgents[parseInt(Math.random() * userAgents.length)]\r\n      // 通过 superagent 保存图片\r\n      const req =  superagent.get(item.url)\r\n      .set({ 'User-Agent': userAgent })\r\n      // 增加 url title\r\n      let url = `/image/page${id}/${item.title}.png`\r\n      let title = item.title\r\n      // 使用了stream(流)\r\n      req.pipe(fs.createWriteStream(`./static/image/page${id}/${item.title}.png`))\r\n      // 写入数据库\r\n      mysql.sqlAdd(url, title)\r\n      return `下载${item.title}done`\r\n    } catch (error) {\r\n      return console.log(`下载图片失败${item.title}`, error)\r\n    }\r\n  }\r\n\r\n// mysql 文件\r\n  // 插入数据 id自增\r\n  sqlAdd  (url, title)  {\r\n    let sqlAdd = 'INSERT INTO image SET ?';\r\n    let sqlAddJson = {\r\n      url,\r\n      title\r\n    }\r\n    connection.query(sqlAdd, sqlAddJson, (err,res) => {\r\n      if(err) return console.log('INSERT INFO ERROR:',err.message);\r\n      console.log('INSERT INFO', res.insertId);\r\n    });\r\n  }\r\n\r\n  // 没有做一些错误等预防(2333)\r\n```\r\n\r\n插入成功后, 打开数据库查一下\r\n\r\n记得启动数据库!!!\r\n\r\n```bash\r\nmysql.server start\r\n```\r\n\r\n![db](node-mysql爬取图片并显示/db.png)\r\n\r\n建表的过程就省略了...\r\n\r\n### 查数据\r\n\r\n数据有了之后, 开始查询数据\r\n\r\n```js\r\nconst express = require('express')\r\nconst router = express.Router()\r\nconst controller = require('./controller')\r\nrouter.get('/', (req, res) => {\r\n  res.send(`hello world 11qq`)\r\n})\r\n\r\nrouter.get('/allimg', async (req, res) => {\r\n  // 调用controller.js\r\n  let allImg = await controller.getAllImg()\r\n  res.send(allImg)\r\n})\r\n\r\nmodule.exports = router\r\n```\r\n\r\n调用controller.getAllImg()并返回\r\n\r\n```js\r\nconst mysql = require('./mysql')\r\n\r\nmodule.exports = {\r\n  async getAllImg() {\r\n    try {\r\n      // 调用mysql方法\r\n      let res = await mysql.getAllImg()\r\n      return {\r\n        code: 0,\r\n        data: res,\r\n        message: 'success'\r\n      }\r\n    } catch (error) {\r\n      console.log('mysql getAllImg error', error)\r\n      return {\r\n        code: -1,\r\n        data: {},\r\n        message: 'fail'\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n调用mysql.getAllImg()并返回\r\n\r\n\r\n```js\r\n// mysql.js\r\n// 查询所有数据并且返回\r\n  getAllImg() {\r\n    let sql = 'SELECT * FROM image'\r\n    return new Promise((resolve, reject) => {\r\n      connection.query(sql, (err, result) => {\r\n        if (err) return reject(err)\r\n        resolve(result)\r\n      })\r\n    })\r\n  }\r\n```\r\n\r\n![data](node-mysql爬取图片并显示/data.png)\r\n\r\n访问http://localhost:3000/allimg路由之后可能是这样\r\n\r\n### 展示\r\n\r\n数据有了之后就可以展示了\r\n\r\n这里用了[parcel](https://parceljs.org/)打包工具\r\n\r\n```bash\r\n# 快速\r\n\r\nyarn init -y\r\n\r\ntouch index.html\r\ntouch index.ts\r\ntouch index.less\r\n\r\nyarn add --dev typescript\r\nyarn add --dev parcel-bundler\r\n\r\n// package.json\r\n\"scripts\": {\r\n  \"start\": \"parcel index.html\"\r\n}\r\n\r\nyarn start # 启动一个服务, 会有一个新页面\r\n```\r\n\r\n```html\r\n<!-- ... -->\r\n  <div id=\"app\"></div>\r\n  <script src=\"./index.ts\"></script>\r\n  <!-- ... -->\r\n```\r\n内容很简单\r\n\r\n```ts\r\n// 使用axios\r\nimport axios from 'axios'\r\n// 导入 less\r\nimport './index.less'\r\nconst APP_URL = 'http://127.0.0.1:3000'\r\nconst API = axios.create({\r\n  baseURL: APP_URL,\r\n  timeout: 1000\r\n});\r\n\r\nAPI.get('/allimg')\r\n  .then( (res) => {\r\n    console.log(res)\r\n    if (res.status === 200 && res.data.code === 0)\r\n    setList(res.data.data)\r\n  })\r\n  .catch( (error) => {\r\n    console.log(error);\r\n  })\r\n\r\n\r\n// 写入html结构\r\nconst setList = (arr: object[]) => {\r\n  let app = document.querySelector('#app')\r\n  let ulDom = document.createElement('ul')\r\n  ulDom.classList.add('list')\r\n  ulDom.setAttribute('role', 'list')\r\n  let dom: string = ``\r\n\r\n  interface Img {\r\n    url: string,\r\n    title: string\r\n  }\r\n\r\n  arr.map((i: Img) => {\r\n    dom += `<li>\r\n      <img src=\"${APP_URL}${i.url}\">\r\n      <div>\r\n      <span>url: ${i.url}</span>\r\n      <span>title: ${i.title}</span>\r\n      </div>\r\n    </li>`\r\n  })\r\n\r\n  ulDom.innerHTML = dom\r\n  app.append(ulDom)\r\n}\r\n```\r\n\r\n然后查看, 发现有问题,接口请求 Network Error (这里是跨域问题)\r\n\r\n我们使用cors来解决\r\n\r\n```js\r\n\r\n// yarn add cors\r\nconst express = require('express')\r\nconst router = express.Router()\r\nconst cors = require('cors') // 导入\r\nconst controller = require('./controller')\r\n\r\nrouter.use(cors()) // 全局允许 如果需要单独配置, 看官方文档\r\nrouter.get('/', (req, res) => {\r\n  res.send(`hello world 11qq`)\r\n})\r\n\r\nrouter.get('/allimg', async (req, res) => {\r\n  let allImg = await controller.getAllImg()\r\n  res.send(allImg)\r\n})\r\n\r\nmodule.exports = router\r\n```\r\n\r\n解决跨域之后就出现数据了, 然后把样式美化一下, 到这里上面的图片还没有加上!!!\r\n\r\n```less\r\n.list {\r\n  li {\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 6px 0;\r\n    &:hover {\r\n      background-color: #eee;\r\n      img {\r\n        width: 300px;\r\n      }\r\n    }\r\n    & > span {\r\n      font-size: 14px;\r\n      color: #333;\r\n      list-style: 1.5;\r\n    }\r\n    & > div {\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: center;\r\n      margin-left: 20px;\r\n    }\r\n  }\r\n  img {\r\n    width: 100px;\r\n    transition: width .3s;\r\n  }\r\n}\r\n```\r\n\r\n为了假如图片, 我设置了node静态资源(也不知道做法对不对 反正是跑起来了)\r\n\r\n[在 Express 中提供静态文件](https://expressjs.com/zh-cn/starter/static-files.html)\r\n\r\n```js\r\n\r\nconst express = require('express')\r\nconst app = express()\r\n// 设置static\r\napp.use(express.static('static'));\r\nconst mysql = require('./mysql')\r\nmysql.init()\r\n\r\nconst router = require('./router')\r\napp.use(router)\r\n// 这里是爬虫的方法\r\n// const crawler = require('./crawler')\r\n// crawler.init()\r\n\r\n\r\napp.listen(3000, () => console.log('port in 3000'))\r\n\r\n```\r\n然后访问接口数据的路径加上http://localhost:3000/就可以了\r\n\r\n效果展示\r\n\r\n![node-mysql爬取图片并显示](node-mysql爬取图片并显示/client.png)\r\n\r\n还有很多优化点可以做, 分页什么什么吧啦吧啦, 代码优化 错误处理 emmmmm","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<p> 2019-11-03 23:11:39</p>\n<p><a href=\"https://xiaotiandada.github.io/2019/08/29/node%E7%88%AC%E8%99%AB-%E7%AE%80%E6%98%93%E7%89%88%E3%80%90%E7%AB%99%E9%85%B7%E3%80%91/\">node爬虫 简易版【站酷】</a></p>\n<p><a href=\"https://xiaotiandada.github.io/2019/09/02/node-mysql-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E3%80%90%E7%AE%80%E6%98%93%E7%89%88%E3%80%91/\">node mysql 增删改查【简易版】</a></p>\n<p>结合上面的文章做了一个图片展示</p>\n<!-- more -->\n\n<p><img src=\"node-mysql%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87%E5%B9%B6%E6%98%BE%E7%A4%BA/client.png\" alt=\"node-mysql爬取图片并显示\"></p>\n<h2 id=\"start\">start</h2>\n<p>启动node服务, 使用express</p>\n<pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./router'</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'port in 3000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// router</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello world</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre><pre class=\"language-bash\"><code class=\"language-bash\">node index.js\n# 或者利用nodemon监听\nnodemon index  # 写入配置文件</code></pre><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon index.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre><pre class=\"language-bash\"><code class=\"language-bash\">yarn dev\n\n#or\n\nnpm run dev</code></pre><p>在屏幕看见 hello world 就算是成功了</p>\n<h3 id=\"修改crawlerjs\">修改crawler.js</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 在之前下载图片逻辑后面写入插入数据库逻辑</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./mysql'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span>\n\n  <span class=\"token comment\">// 下载图片</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">download</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> userAgent <span class=\"token operator\">=</span> userAgents<span class=\"token punctuation\">[</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> userAgents<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token comment\">// 通过 superagent 保存图片</span>\n      <span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span>  superagent<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'User-Agent'</span><span class=\"token operator\">:</span> userAgent <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 增加 url title</span>\n      <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/image/page</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.png</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token keyword\">let</span> title <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>title\n      <span class=\"token comment\">// 使用了stream(流)</span>\n      req<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./static/image/page</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.png</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 写入数据库</span>\n      mysql<span class=\"token punctuation\">.</span><span class=\"token function\">sqlAdd</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">下载</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">done</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">下载图片失败</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// mysql 文件</span>\n  <span class=\"token comment\">// 插入数据 id自增</span>\n  <span class=\"token function\">sqlAdd</span>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> title</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sqlAdd <span class=\"token operator\">=</span> <span class=\"token string\">'INSERT INTO image SET ?'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> sqlAddJson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      url<span class=\"token punctuation\">,</span>\n      title\n    <span class=\"token punctuation\">}</span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>sqlAdd<span class=\"token punctuation\">,</span> sqlAddJson<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INFO ERROR:'</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INFO'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>insertId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 没有做一些错误等预防(2333)</span></code></pre><p>插入成功后, 打开数据库查一下</p>\n<p>记得启动数据库!!!</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">mysql.server start</code></pre><p><img src=\"node-mysql%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87%E5%B9%B6%E6%98%BE%E7%A4%BA/db.png\" alt=\"db\"></p>\n<p>建表的过程就省略了...</p>\n<h3 id=\"查数据\">查数据</h3>\n<p>数据有了之后, 开始查询数据</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controller'</span><span class=\"token punctuation\">)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello world 11qq</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/allimg'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 调用controller.js</span>\n  <span class=\"token keyword\">let</span> allImg <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">getAllImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>allImg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre><p>调用controller.getAllImg()并返回</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./mysql'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">getAllImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 调用mysql方法</span>\n      <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> mysql<span class=\"token punctuation\">.</span><span class=\"token function\">getAllImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> res<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'success'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql getAllImg error'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'fail'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre><p>调用mysql.getAllImg()并返回</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// mysql.js</span>\n<span class=\"token comment\">// 查询所有数据并且返回</span>\n  <span class=\"token function\">getAllImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">'SELECT * FROM image'</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre><p><img src=\"node-mysql%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87%E5%B9%B6%E6%98%BE%E7%A4%BA/data.png\" alt=\"data\"></p>\n<p>访问<a href=\"http://localhost:3000/allimg%E8%B7%AF%E7%94%B1%E4%B9%8B%E5%90%8E%E5%8F%AF%E8%83%BD%E6%98%AF%E8%BF%99%E6%A0%B7\">http://localhost:3000/allimg路由之后可能是这样</a></p>\n<h3 id=\"展示\">展示</h3>\n<p>数据有了之后就可以展示了</p>\n<p>这里用了<a href=\"https://parceljs.org/\">parcel</a>打包工具</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"># 快速\n\nyarn init -y\n\ntouch index.html\ntouch index.ts\ntouch index.less\n\nyarn add --dev typescript\nyarn add --dev parcel-bundler\n\n// package.json\n\"scripts\": {\n  \"start\": \"parcel index.html\"\n}\n\nyarn start # 启动一个服务, 会有一个新页面</code></pre><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- ... --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./index.ts<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- ... --></span></code></pre><p>内容很简单</p>\n<pre class=\"language-ts\"><code class=\"language-ts\">// 使用axios\nimport axios from 'axios'\n// 导入 less\nimport './index.less'\nconst APP_URL = 'http://127.0.0.1:3000'\nconst API = axios.create({\n  baseURL: APP_URL,\n  timeout: 1000\n});\n\nAPI.get('/allimg')\n  .then( (res) => {\n    console.log(res)\n    if (res.status === 200 && res.data.code === 0)\n    setList(res.data.data)\n  })\n  .catch( (error) => {\n    console.log(error);\n  })\n\n\n// 写入html结构\nconst setList = (arr: object[]) => {\n  let app = document.querySelector('#app')\n  let ulDom = document.createElement('ul')\n  ulDom.classList.add('list')\n  ulDom.setAttribute('role', 'list')\n  let dom: string = ``\n\n  interface Img {\n    url: string,\n    title: string\n  }\n\n  arr.map((i: Img) => {\n    dom += `<li>\n      <img src=\"${APP_URL}${i.url}\">\n      <div>\n      <span>url: ${i.url}</span>\n      <span>title: ${i.title}</span>\n      </div>\n    </li>`\n  })\n\n  ulDom.innerHTML = dom\n  app.append(ulDom)\n}</code></pre><p>然后查看, 发现有问题,接口请求 Network Error (这里是跨域问题)</p>\n<p>我们使用cors来解决</p>\n<pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token comment\">// yarn add cors</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> cors <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cors'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 导入</span>\n<span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controller'</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 全局允许 如果需要单独配置, 看官方文档</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello world 11qq</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/allimg'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> allImg <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">getAllImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>allImg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre><p>解决跨域之后就出现数据了, 然后把样式美化一下, 到这里上面的图片还没有加上!!!</p>\n<pre class=\"language-less\"><code class=\"language-less\">.list {\n  li {\n    display: flex;\n    align-items: center;\n    margin: 6px 0;\n    &:hover {\n      background-color: #eee;\n      img {\n        width: 300px;\n      }\n    }\n    & > span {\n      font-size: 14px;\n      color: #333;\n      list-style: 1.5;\n    }\n    & > div {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      margin-left: 20px;\n    }\n  }\n  img {\n    width: 100px;\n    transition: width .3s;\n  }\n}</code></pre><p>为了假如图片, 我设置了node静态资源(也不知道做法对不对 反正是跑起来了)</p>\n<p><a href=\"https://expressjs.com/zh-cn/starter/static-files.html\">在 Express 中提供静态文件</a></p>\n<pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 设置static</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./mysql'</span><span class=\"token punctuation\">)</span>\nmysql<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./router'</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 这里是爬虫的方法</span>\n<span class=\"token comment\">// const crawler = require('./crawler')</span>\n<span class=\"token comment\">// crawler.init()</span>\n\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'port in 3000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre><p>然后访问接口数据的路径加上<a href=\"http://localhost:3000/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86\">http://localhost:3000/就可以了</a></p>\n<p>效果展示</p>\n<p><img src=\"node-mysql%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87%E5%B9%B6%E6%98%BE%E7%A4%BA/client.png\" alt=\"node-mysql爬取图片并显示\"></p>\n<p>还有很多优化点可以做, 分页什么什么吧啦吧啦, 代码优化 错误处理 emmmmm</p>\n","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}