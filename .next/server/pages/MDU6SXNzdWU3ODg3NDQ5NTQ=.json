{"pageProps":{"post":{"id":"MDU6SXNzdWU3ODg3NDQ5NTQ=","url":"https://github.com/xiaotiandada/blog/issues/32","title":"Building Components Custom Elements 自定义元素","updatedAt":"2021-01-19T06:26:38Z","createdAt":"2021-01-19T06:26:38Z","body":"2019-09-15 01:42:32\r\n\r\n首先来写一个示例吧\r\n\r\n\r\nWeb Components 标准非常重要的一个特性是，它使开发者能够将HTML页面的功能封装为 custom elements（自定义标签），而往常，开发者不得不写一大堆冗长、深层嵌套的标签来实现同样的页面功能。这篇文章将会介绍如何使用HTML的custom elements。 - MDN\r\n\r\nhttps://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_custom_elements\r\n\r\n具体看MDN文档,(复制完应该就差不多了 然后去这里玩)\r\n\r\nhttps://developers.google.com/web/fundamentals/web-components/\r\n\r\n<!-- more -->\r\n\r\n**查看demo**\r\n```html\r\n<style for-run for-show>\r\n.popup-info {\r\n  width: 100px;\r\n  height: 100px;\r\n  position: relative;\r\n  top: 100px;\r\n  left: 300px;\r\n}\r\n.popup-info1 {\r\n  width: 100px;\r\n  height: 100px;\r\n  position: relative;\r\n  top: 160px;\r\n  left: 600px;\r\n}\r\n.popup-info img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  cursor: pointer;\r\n}\r\n.popup-info .info {\r\n  font-size: 20px;\r\n  width: 200px;\r\n  display: inline-block;\r\n  border: 1px solid black;\r\n  padding: 10px;\r\n  background: white;\r\n  border-radius: 4px;\r\n  opacity: 0;\r\n  transition: 0.6s all;\r\n  position: absolute;\r\n  bottom: 110px;\r\n  left: 0px;\r\n  z-index: 3;\r\n}\r\n.popup-info:hover .info{\r\n  opacity: 1;\r\n}\r\n</style>\r\n\r\n<template for-run for-show>\r\n\r\n<popup-info role=\"popup\" img=\"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4038933139,466219061&fm=26&gp=0.jpg\" data-text=\"I Learn Js 💗\"></popup-info>\r\n<button id=\"remove\">remove</button>\r\n<button id=\"move\">move</button>\r\n<button id=\"toggle\">toggle attribute</button>\r\n\r\n\r\n<popup-info1 role=\"popup\" img=\"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4038933139,466219061&fm=26&gp=0.jpg\" data-text=\"I Learn Js 💗\"></popup-info1>\r\n\r\n<button is=\"popup-button\">popup-button!</button>\r\n\r\n</template>\r\n\r\n<script for-run for-show>\r\nclass popupInfo extends HTMLElement {\r\n  constructor() {\r\n    super()\r\n\r\n  }\r\n  static get observedAttributes() {\r\n    return ['role']\r\n  }\r\n  // 生命周期钩子\r\n  connectedCallback() {\r\n    // 创建 div\r\n    let div = document.createElement('div')\r\n    div.setAttribute('role', 'popup-info')\r\n\r\n    // 创建 img\r\n    let img = document.createElement('img')\r\n    let src = this.getAttribute('img')\r\n\r\n    // 创建info信息\r\n    let info = document.createElement('span')\r\n    let text = this.getAttribute('data-text')\r\n\r\n    // 设置img内容\r\n    img.src = src\r\n    img.alt = text\r\n\r\n    // 设置info内容\r\n    info.classList.add('info')\r\n    info.innerText = text\r\n\r\n    // 添加class\r\n    div.classList.add('popup-info')\r\n\r\n    // 添加内容 img info\r\n    div.appendChild(img)\r\n    div.appendChild(info)\r\n\r\n    this.appendChild(div)\r\n  }\r\n  disconnectedCallback() {\r\n    console.log('我没有了呀')\r\n  }\r\n  attributeChangedCallback(attrName, oldVal, newVal) {\r\n    console.log('当前的属性:', attrName)\r\n    console.log('当前的属性 old:', oldVal)\r\n    console.log('当前的属性 new:', newVal)\r\n  }\r\n  adoptedCallback() {\r\n    console.log('adoptedCallback 自定义元素被移入新的 document')\r\n  }\r\n}\r\n\r\ncustomElements.define('popup-info', popupInfo)\r\n\r\n\r\n// 测试 自定义元素被移入新的 document\r\nconst testAdoptedCallback = ()=> {\r\n  // 创建 iframe\r\n  const createWindow = () => {\r\n    let iframe = document.createElement('iframe')\r\n    document.body.appendChild(iframe)\r\n    return iframe.contentWindow\r\n  }\r\n  let cw = createWindow()\r\n  // 创建 自定义元素\r\n  let cw1 = document.querySelector('popup-info')\r\n\r\n  // 创建的元素插入到 新创建的iframe\r\n  cw.document.body.appendChild(cw1)\r\n}\r\n\r\nconst move = () => {\r\n  let move = document.querySelector('#move')\r\n  move.onclick = function() {\r\n    testAdoptedCallback()\r\n  }\r\n}\r\nmove()\r\n\r\n// 测试移除 popup-info\r\nconst remove = () => {\r\n  let remove = document.querySelector('#remove')\r\n  remove.onclick = function() {\r\n    document.querySelector('popup-info').remove()\r\n  }\r\n}\r\nremove()\r\n\r\n// 测试属性被修改 toggle\r\nconst toggle = () => {\r\n  let i = 0\r\n  let toggle = document.querySelector('#toggle')\r\n  toggle.onclick = function() {\r\n    i++\r\n    document.querySelector('popup-info').setAttribute('role', `popup-info-change, ${i}`)\r\n  }\r\n}\r\ntoggle()\r\n\r\n\r\n\r\nclass popupInfo1 extends popupInfo {\r\n  constructor() {\r\n    super()\r\n  }\r\n  connectedCallback() {\r\n    this.innerText = 'extends popupInfo'\r\n  }\r\n}\r\n\r\ncustomElements.define('popup-info1', popupInfo1)\r\n\r\n\r\nclass popupButton extends HTMLButtonElement {\r\n  constructor() {\r\n    super()\r\n  }\r\n  connectedCallback() {\r\n    this.innerText += ' extends'\r\n  }\r\n}\r\n\r\ncustomElements.define('popup-button', popupButton, {extends: 'button'})\r\n\r\n</script>\r\n```\r\n\r\n**定义新元素**\r\n\r\n```js\r\nclass popupInfo extends HTMLElement {\r\n  constructor() {\r\n    super()\r\n  }\r\n  static get observedAttributes() {\r\n    return ['role']\r\n  }\r\n  // 生命周期钩子\r\n  connectedCallback() {\r\n    // 创建 div\r\n    let div = document.createElement('div')\r\n    div.setAttribute('role', 'popup-info')\r\n\r\n    // 创建 img\r\n    let img = document.createElement('img')\r\n    let src = this.getAttribute('img')\r\n\r\n    // 创建info信息\r\n    let info = document.createElement('span')\r\n    let text = this.getAttribute('data-text')\r\n\r\n    // 设置img内容\r\n    img.src = src\r\n    img.alt = text\r\n\r\n    // 设置info内容\r\n    info.classList.add('info')\r\n    info.innerText = text\r\n\r\n    // 添加class\r\n    div.classList.add('popup-info')\r\n\r\n    // 添加内容 img info\r\n    div.appendChild(img)\r\n    div.appendChild(info)\r\n\r\n    this.appendChild(div)\r\n  }\r\n  disconnectedCallback() {\r\n    console.log('我没有了呀')\r\n  }\r\n  attributeChangedCallback(attrName, oldVal, newVal) {\r\n    console.log('当前的属性:', attrName)\r\n    console.log('当前的属性 old:', oldVal)\r\n    console.log('当前的属性 new:', newVal)\r\n  }\r\n  adoptedCallback() {\r\n    console.log('adoptedCallback 自定义元素被移入新的 document')\r\n  }\r\n}\r\n\r\ncustomElements.define('popup-info', popupInfo)\r\n\r\n```\r\n\r\n```html\r\n<popup-info role=\"popup\" img=\"https://miro.medium.com/max/1440/1*LjR0UrFB2a__5h1DWqzstA.png\" data-text=\"I Learn Js 💗\"></popup-info>\r\n\r\n```\r\n\r\n> 定义一个自定义的元素 然后使用\r\n\r\n**扩展元素**\r\n\r\n**扩展自定义元素**\r\n\r\ncustomElements 全局性用于定义自定义元素\r\n\r\n customElements.define()，并使用 JavaScript class 扩展基础 HTMLElement\r\n\r\n```js\r\nclass popupInfo1 extends popupInfo {\r\n  constructor() {\r\n    super()\r\n  }\r\n  connectedCallback() {\r\n    this.innerText = 'extends popupInfo'\r\n  }\r\n}\r\n\r\ncustomElements.define('popup-info1', popupInfo1)\r\n```\r\n\r\n继承自定义元素好像效果有点不对(我还没找到为啥 希望大佬教教我)\r\n\r\n有关创建自定义元素的规则\r\n\r\n- 自定义元素的名称必须包含短横线 (-)。因此，<x-tags>、<my-element> 和 <my-awesome-app> 等均为有效名称，而 <tabs> 和 <foo_bar> 则为无效名称....\r\n- 您不能多次注册同一标记...\r\n- 自定义元素不能自我封闭标签\r\n\r\n> 教程里面更详细\r\n\r\n和上面很相识, 扩展了自定义的元素\r\n\r\n**扩展原生 HTML 元素**\r\n\r\n```js\r\nclass popupButton extends HTMLButtonElement {\r\n  constructor() {\r\n    super()\r\n  }\r\n  connectedCallback() {\r\n    this.innerText += ' extends'\r\n  }\r\n}\r\n\r\ncustomElements.define('popup-button', popupButton, {extends: 'button'})\r\n```\r\n<img src=\"Building-Components-Custom-Elements-自定义元素/button.png\" />\r\n\r\n\r\n要扩展元素，您需要创建继承自正确 DOM 接口的类定义\r\n\r\n扩展原生元素时，对 define() 的调用会稍有不同。所需的第三个参数告知浏览器要扩展的标记。\r\n\r\n这很有必要，因为许多 HTML 标记均使用同一 DOM 接口\r\n\r\n例如 section address 和 em（以及其他）都使用 HTMLElement；q 和 blockquote 则使用 HTMLQuoteElement；等等。\r\n\r\n指定 {extends: 'blockquote'} 可让浏览器知道您创建的是 blockquote 而不是 q。有关 HTML DOM 接口的完整列表，请参阅 HTML 规范。\r\n\r\n\r\n\r\n```js\r\nclass popupButton extends HTMLButtonElement {}\r\n\r\ncustomElements.define('popup-button', popupButton)\r\n```\r\n\r\n**自定义元素响应**\r\n\r\n自定义元素可以定义特殊生命周期钩子\r\n\r\n\r\n|  名称   | 描述  |\r\n| ---- | ---- |\r\n| constructor | 创建或升级元素的一个实例。用于初始化状态、设置事件侦听器或创建 Shadow DOM... |\r\n| connectedCallback | 元素每次插入到 DOM 时都会调用... |\r\n| disconnectedCallback() | \t元素每次从 DOM 中移除时都会调用... |\r\n| attributeChangedCallback(attrName, oldVal, newVal) | 属性添加、移除、更新或替换... |\r\n| adoptedCallback(attrName, oldVal, newVal) | 自定义元素被移入新的 document... |\r\n\r\nhttps://developers.google.com/web/fundamentals/web-components/customelements#extendhtml\r\n\r\nhttps://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_custom_elements#%E4%BD%BF%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\r\n\r\n> 上面写得很清晰 比我这个容易理解\r\n\r\n```js\r\n  // 生命周期钩子\r\n  connectedCallback() {\r\n    // 创建 div\r\n    let div = document.createElement('div')\r\n    div.setAttribute('role', 'popup-info')\r\n\r\n    // 创建 img\r\n    let img = document.createElement('img')\r\n    let src = this.getAttribute('img')\r\n\r\n    // 创建info信息\r\n    let info = document.createElement('span')\r\n    let text = this.getAttribute('data-text')\r\n\r\n    // 设置img内容\r\n    img.src = src\r\n    img.alt = text\r\n\r\n    // 设置info内容\r\n    info.classList.add('info')\r\n    info.innerText = text\r\n\r\n    // 添加class\r\n    div.classList.add('popup-info')\r\n\r\n    // 添加内容 img info\r\n    div.appendChild(img)\r\n    div.appendChild(info)\r\n\r\n    this.appendChild(div)\r\n  }\r\n```\r\n\r\ndom创建时候 创建内容\r\n\r\n```js\r\n...\r\n  disconnectedCallback() {\r\n    console.log('我没有了呀')\r\n  }\r\n  ...\r\n\r\n  // 测试移除 popup-info\r\nconst remove = () => {\r\n  let remove = document.querySelector('#remove')\r\n  remove.onclick = function() {\r\n    document.querySelector('popup-info').remove()\r\n  }\r\n}\r\nremove()\r\n```\r\n\r\ndom 移除执行的方法 可以移除事件什么的\r\n\r\n```js\r\n...\r\n  attributeChangedCallback(attrName, oldVal, newVal) {\r\n    console.log('当前的属性:', attrName)\r\n    console.log('当前的属性 old:', oldVal)\r\n    console.log('当前的属性 new:', newVal)\r\n  }\r\n...\r\n  // 测试属性被修改 toggle\r\nconst toggle = () => {\r\n  let i = 0\r\n  let toggle = document.querySelector('#toggle')\r\n  toggle.onclick = function() {\r\n    i++\r\n    document.querySelector('popup-info').setAttribute('role', `popup-info-change, ${i}`)\r\n  }\r\n}\r\ntoggle()\r\n```\r\n\r\n需要注意的是，如果需要在元素属性变化后，触发 attributeChangedCallback()回调函数，你必须监听这个属性。这可以通过定义observedAttributes() get函数来实现，observedAttributes()函数体内包含一个 return语句，返回一个数组，包含了需要监听的属性名称：\r\n\r\n```js\r\n\r\n  static get observedAttributes() {\r\n    return ['role']\r\n  }\r\n\r\n```\r\n\r\n监听属性变化 调用的方法 比如 role=\"popup\" 什么的\r\n\r\n```js\r\n...\r\n  adoptedCallback() {\r\n    console.log('adoptedCallback 自定义元素被移入新的 document')\r\n  }\r\n...\r\n\r\n  // 测试 自定义元素被移入新的 document\r\nconst testAdoptedCallback = ()=> {\r\n  // 创建 iframe\r\n  const createWindow = () => {\r\n    let iframe = document.createElement('iframe')\r\n    document.body.appendChild(iframe)\r\n    return iframe.contentWindow\r\n  }\r\n  let cw = createWindow()\r\n  // 创建 自定义元素\r\n  let cw1 = document.querySelector('popup-info')\r\n\r\n  // 创建的元素插入到 新创建的iframe\r\n  cw.document.body.appendChild(cw1)\r\n}\r\n\r\nconst move = () => {\r\n  let move = document.querySelector('#move')\r\n  move.onclick = function() {\r\n    testAdoptedCallback()\r\n  }\r\n}\r\nmove()\r\n```\r\n\r\n自定义元素被移入新的 document\r\n\r\n\r\n\r\n**元素定义的内容**\r\n\r\n```js\r\nclass popupInfo extends HTMLElement {\r\n  constructor() {\r\n    super()\r\n\r\n  }\r\n  connectedCallback() {\r\n     this.innerHTML = \"xxxxxx\";\r\n  }\r\n}\r\n```\r\n\r\n以新内容覆盖元素的子项并非一种好的做法，因为这样做会不符合设想。\r\n添加元素定义内容的更好做法是使用 shadow DOM，下一篇文章会写\r\n\r\n\r\n```js\r\nclass popupInfoShadow extends HTMLElement {\r\n  constructor() {\r\n    super()\r\n\r\n    let shadowRoot = this.attachShadow({mode: 'open'})\r\n    shadowRoot.innerHTML = \"<span>hello</span>\"\r\n  }\r\n\r\n}\r\n\r\ncustomElements.define('popup-info-shadow', popupInfoShadow)\r\n```\r\n\r\n<img src=\"Building-Components-Custom-Elements-自定义元素/shadow.png\" />\r\n\r\n\r\n**通过 template 创建元素**\r\n\r\n```js\r\n<info-template></info-template>\r\n\r\n<template id=\"info-template\">\r\n  <style>\r\n    p {\r\n      color: red;\r\n    }\r\n  </style>\r\n  <p>hello template</p>\r\n\r\n</template>\r\n\r\n\r\n<script>\r\nclass infoTemplate extends HTMLElement {\r\n  constructor(){\r\n    super()\r\n\r\n    let shadowRoot = this.attachShadow({mode: 'open'})\r\n    const t = document.querySelector('#info-template')\r\n    const instance = t.content.cloneNode(true)\r\n    shadowRoot.appendChild(instance)\r\n  }\r\n}\r\n\r\ncustomElements.define('info-template', infoTemplate)\r\n```\r\n\r\n<img src=\"Building-Components-Custom-Elements-自定义元素/template.png\" />\r\n\r\n- 我们在 HTML 中定义新的元素：info-template\r\n- 元素的 Shadow DOM 使用 template 创建\r\n- 由于是 Shadow DOM，元素的 DOM 局限于元素本地\r\n- 由于是 Shadow DOM，元素的内部 CSS 作用域限于元素内\r\n\r\n**设置自定义元素样式**\r\n\r\n```css\r\n<style>\r\np {\r\n  ...\r\n}\r\n</style>\r\n```\r\n:defined CSS 伪类 表示任何已定义的元素。这包括任何浏览器内置的标准元素以及已成功定义的自定义元素 (例如通过 CustomElementRegistry.define() 方法)。\r\n\r\nhttps://developer.mozilla.org/zh-CN/docs/Web/CSS/:defined\r\n\r\n```css\r\napp-drawer:not(:defined) {}\r\n```\r\n\r\n```html\r\n<style>\r\ninfo-template {\r\n  color:red;\r\n  opacity: 0;\r\n}\r\naa-bb:not(:defined) {\r\n  color:red;\r\n  opacity: 0;\r\n}\r\n</style>\r\n\r\n<info-template></info-template>\r\n<info-template>123</info-template>\r\n\r\n<aa-bb>123</aa-bb>\r\n```\r\n\r\n<img src=\"Building-Components-Custom-Elements-自定义元素/style.png\" />\r\n\r\n\r\n定义之前会隐藏起来哦\r\n\r\n**其他详情**\r\n\r\n未知元素与未定义的自定义元素\r\n\r\nHTML 使用起来非常宽松和灵活。例如，在页面上声明 randomtagthatdoesntexist，浏览器将非常乐意接受它。为什么非标准标记可以生效？答案在于 HTML 规范允许这样。规范没有定义的元素作为 HTMLUnknownElement 进行解析。\r\n\r\n自定义元素则并非如此。如果在创建时使用有效的名称（包含“-”），则潜在的自定义元素将解析为 HTMLElement。 您可以在支持自定义元素的浏览器中核实这一点。打开控制台：Ctrl+Shift+J（或者在 Mac 上，Cmd+Opt+J）并粘贴下列代码行：\r\n\r\n```js\r\n// \"tabs\" is not a valid custom element name\r\ndocument.createElement('tabs') instanceof HTMLUnknownElement === true\r\n\r\n// \"x-tabs\" is a valid custom element name\r\ndocument.createElement('x-tabs') instanceof HTMLElement === true\r\n```\r\n\r\n**API 参考**\r\n\r\n全局性 customElements 定义了处理自定义元素的方法。\r\n\r\n**define(tagName, constructor, options)**\r\n\r\n在浏览器中定义新的自定义元素。\r\n\r\n```js\r\ncustomElements.define('my-app', class extends HTMLElement { ... });\r\ncustomElements.define(\r\n  'fancy-button', class extends HTMLButtonElement { ... }, {extends: 'button'});\r\n```\r\n\r\n抽离出来可以更利于阅读\r\n\r\n\r\n**get(tagName)**\r\n\r\n```js\r\nlet Drawer = customElements.get('app-drawer');\r\nconsole.log(Drawer)\r\nif (Drawer) {\r\n  let drawer = new Drawer();\r\n}\r\n\r\n\r\nlet PopupInfo = customElements.get('popup-info');\r\nconsole.log(PopupInfo)\r\nif (PopupInfo) {\r\n  let popupInfo = new PopupInfo();\r\n}\r\n```\r\n\r\n在给定有效自定义元素标记名称的情况下，返回元素的构造函数。\r\n\r\n如果没有注册元素定义，则返回 undefined。\r\n\r\n<img src=\"Building-Components-Custom-Elements-自定义元素/get.png\" />\r\n\r\n\r\n**whenDefined(tagName)**\r\n\r\n```js\r\ncustomElements.whenDefined('popup-info').then(() => {\r\n  console.log('popup-info ready!');\r\n});\r\n\r\ncustomElements.whenDefined('app-drawer').then(() => {\r\n  console.log('app-drawer ready!');\r\n}).catch(err => {\r\n  console.log('err', err)\r\n})\r\n```\r\n<img src=\"Building-Components-Custom-Elements-自定义元素/whenDefined.png\" />\r\n\r\n如果定义了自定义元素，则返回可解析的 Promise。如果元素已定义，则立即得到解析。\r\n\r\n如果标记名称并非有效自定义元素名称，则拒绝(好像也不会走catch)\r\n\r\n**历史记录和浏览器支持**\r\n\r\n如果您最近几年持续关注网络组件，您应知道 Chrome 36+ 实施的自定义元素 API 版本使用了 document.registerElement() 而不是 customElements.define()。\r\n\r\n但前者是标准的弃用版本，称为 v0。customElements.define() 成为现行标准并逐步获得各大浏览器厂商的支持。这称为自定义元素 v1。\r\n\r\nhttps://developers.google.com/web/fundamentals/web-components/customelements\r\n\r\n**浏览器支持**\r\n\r\n要检测自定义元素功能，检测是否存在 window.customElements：\r\n\r\n```js\r\nconst supportsCustomElementsV1 = 'customElements' in window;\r\n```\r\n\r\n<img src=\"Building-Components-Custom-Elements-自定义元素/in.png\" />\r\n\r\n**Polyfill**\r\n\r\nhttps://www.npmjs.com/package/@webcomponents/custom-elements\r\n\r\n注：无法对 :defined CSS 伪类执行 polyfill。 (没测试过)\r\n\r\n```js\r\nconst supportsCustomElementsV1 = 'customElements' in window;\r\nfunction loadScript(src) {\r\n  return new Promise((resolve, reject) => {\r\n    const script = document.createElement('script')\r\n    script.src = src\r\n    script.onload = resolve\r\n    script.onerror = reject\r\n    document.head.appendChild(script)\r\n  })\r\n}\r\n\r\nif (!supportsCustomElementsV1) {\r\n  loadScript('https://unpkg.com/@webcomponents/custom-elements')\r\n  console.log('use polyfill')\r\n} else {\r\n  // Native support.Good to go.\r\n  console.log('native')\r\n}\r\n```\r\n\r\n总结:\r\n\r\n自定义元素提供了一种新工具，可让我们在浏览器中定义新 HTML 标记并创建可重用的组件。\r\n它们与 Shadow DOM 和 template 等新平台原语结合使用，我们可开始实现更多的可能\r\n\r\n- 创建和扩展可重复使用组件的跨浏览器（网络标准）\r\n- 无需库或框架即可使用。原生 JS/HTML 威武！\r\n- 提供熟悉的编程模型。仅需使用 DOM/CSS/HTML。\r\n- 与其他网络平台功能良好匹配（Shadow DOM、template、CSS 自定义属性等）\r\n- 与浏览器的 DevTools 紧密集成。\r\n- 利用现有的无障碍功能。\r\n- (我也是复制的 2333)\r\n\r\nhttps://developers.google.com/web/fundamentals/web-components/customelements\r\n\r\nhttps://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_custom_elements\r\n","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<p>2019-09-15 01:42:32</p>\n<p>首先来写一个示例吧</p>\n<p>Web Components 标准非常重要的一个特性是，它使开发者能够将HTML页面的功能封装为 custom elements（自定义标签），而往常，开发者不得不写一大堆冗长、深层嵌套的标签来实现同样的页面功能。这篇文章将会介绍如何使用HTML的custom elements。 - MDN</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_custom_elements\">https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_custom_elements</a></p>\n<p>具体看MDN文档,(复制完应该就差不多了 然后去这里玩)</p>\n<p><a href=\"https://developers.google.com/web/fundamentals/web-components/\">https://developers.google.com/web/fundamentals/web-components/</a></p>\n<!-- more -->\n\n<p><strong>查看demo</strong></p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">for-run</span> <span class=\"token attr-name\">for-show</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">.popup-info</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.popup-info1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 160px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.popup-info img</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">object-fit</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.popup-info .info</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 4px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> 0.6s all<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 110px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.popup-info:hover .info</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">for-run</span> <span class=\"token attr-name\">for-show</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>popup-info</span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>popup<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">img</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4038933139,466219061&amp;fm=26&amp;gp=0.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>I Learn Js 💗<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>popup-info</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>remove<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>remove<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>move<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>move<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>toggle attribute<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>popup-info1</span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>popup<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">img</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=4038933139,466219061&amp;fm=26&amp;gp=0.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>I Learn Js 💗<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>popup-info1</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>popup-button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>popup-button!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">for-run</span> <span class=\"token attr-name\">for-show</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">popupInfo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'role'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 生命周期钩子</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 创建 div</span>\n    <span class=\"token keyword\">let</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n    div<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 创建 img</span>\n    <span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> src <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 创建info信息</span>\n    <span class=\"token keyword\">let</span> info <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-text'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 设置img内容</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src\n    img<span class=\"token punctuation\">.</span>alt <span class=\"token operator\">=</span> text\n\n    <span class=\"token comment\">// 设置info内容</span>\n    info<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span>\n    info<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> text\n\n    <span class=\"token comment\">// 添加class</span>\n    div<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 添加内容 img info</span>\n    div<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    div<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我没有了呀'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">attrName<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">,</span> newVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'当前的属性:'</span><span class=\"token punctuation\">,</span> attrName<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'当前的属性 old:'</span><span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'当前的属性 new:'</span><span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">adoptedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'adoptedCallback 自定义元素被移入新的 document'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">,</span> popupInfo<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">// 测试 自定义元素被移入新的 document</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">testAdoptedCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 创建 iframe</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createWindow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iframe'</span><span class=\"token punctuation\">)</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>iframe<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> iframe<span class=\"token punctuation\">.</span>contentWindow\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> cw <span class=\"token operator\">=</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 创建 自定义元素</span>\n  <span class=\"token keyword\">let</span> cw1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 创建的元素插入到 新创建的iframe</span>\n  cw<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>cw1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">move</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> move <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#move'</span><span class=\"token punctuation\">)</span>\n  move<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">testAdoptedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 测试移除 popup-info</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> remove <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#remove'</span><span class=\"token punctuation\">)</span>\n  remove<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 测试属性被修改 toggle</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> toggle <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#toggle'</span><span class=\"token punctuation\">)</span>\n  toggle<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i<span class=\"token operator\">++</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">popup-info-change, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">popupInfo1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">popupInfo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'extends popupInfo'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info1'</span><span class=\"token punctuation\">,</span> popupInfo1<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">popupButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLButtonElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">+=</span> <span class=\"token string\">' extends'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-button'</span><span class=\"token punctuation\">,</span> popupButton<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre><p><strong>定义新元素</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">popupInfo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'role'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 生命周期钩子</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 创建 div</span>\n    <span class=\"token keyword\">let</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n    div<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 创建 img</span>\n    <span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> src <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 创建info信息</span>\n    <span class=\"token keyword\">let</span> info <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-text'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 设置img内容</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src\n    img<span class=\"token punctuation\">.</span>alt <span class=\"token operator\">=</span> text\n\n    <span class=\"token comment\">// 设置info内容</span>\n    info<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span>\n    info<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> text\n\n    <span class=\"token comment\">// 添加class</span>\n    div<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 添加内容 img info</span>\n    div<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    div<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我没有了呀'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">attrName<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">,</span> newVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'当前的属性:'</span><span class=\"token punctuation\">,</span> attrName<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'当前的属性 old:'</span><span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'当前的属性 new:'</span><span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">adoptedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'adoptedCallback 自定义元素被移入新的 document'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">,</span> popupInfo<span class=\"token punctuation\">)</span>\n</code></pre><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>popup-info</span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>popup<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">img</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://miro.medium.com/max/1440/1*LjR0UrFB2a__5h1DWqzstA.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>I Learn Js 💗<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>popup-info</span><span class=\"token punctuation\">></span></span>\n</code></pre><blockquote>\n<p>定义一个自定义的元素 然后使用</p>\n</blockquote>\n<p><strong>扩展元素</strong></p>\n<p><strong>扩展自定义元素</strong></p>\n<p>customElements 全局性用于定义自定义元素</p>\n<p> customElements.define()，并使用 JavaScript class 扩展基础 HTMLElement</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">popupInfo1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">popupInfo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'extends popupInfo'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info1'</span><span class=\"token punctuation\">,</span> popupInfo1<span class=\"token punctuation\">)</span></code></pre><p>继承自定义元素好像效果有点不对(我还没找到为啥 希望大佬教教我)</p>\n<p>有关创建自定义元素的规则</p>\n<ul>\n<li>自定义元素的名称必须包含短横线 (-)。因此，<x-tags>、<my-element> 和 <my-awesome-app> 等均为有效名称，而 <tabs> 和 <foo_bar> 则为无效名称....</li>\n<li>您不能多次注册同一标记...</li>\n<li>自定义元素不能自我封闭标签</li>\n</ul>\n<blockquote>\n<p>教程里面更详细</p>\n</blockquote>\n<p>和上面很相识, 扩展了自定义的元素</p>\n<p><strong>扩展原生 HTML 元素</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">popupButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLButtonElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">+=</span> <span class=\"token string\">' extends'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-button'</span><span class=\"token punctuation\">,</span> popupButton<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre><img src=\"Building-Components-Custom-Elements-自定义元素/button.png\" />\n\n\n<p>要扩展元素，您需要创建继承自正确 DOM 接口的类定义</p>\n<p>扩展原生元素时，对 define() 的调用会稍有不同。所需的第三个参数告知浏览器要扩展的标记。</p>\n<p>这很有必要，因为许多 HTML 标记均使用同一 DOM 接口</p>\n<p>例如 section address 和 em（以及其他）都使用 HTMLElement；q 和 blockquote 则使用 HTMLQuoteElement；等等。</p>\n<p>指定 {extends: &#39;blockquote&#39;} 可让浏览器知道您创建的是 blockquote 而不是 q。有关 HTML DOM 接口的完整列表，请参阅 HTML 规范。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">popupButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLButtonElement</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-button'</span><span class=\"token punctuation\">,</span> popupButton<span class=\"token punctuation\">)</span></code></pre><p><strong>自定义元素响应</strong></p>\n<p>自定义元素可以定义特殊生命周期钩子</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>constructor</td>\n<td>创建或升级元素的一个实例。用于初始化状态、设置事件侦听器或创建 Shadow DOM...</td>\n</tr>\n<tr>\n<td>connectedCallback</td>\n<td>元素每次插入到 DOM 时都会调用...</td>\n</tr>\n<tr>\n<td>disconnectedCallback()</td>\n<td>元素每次从 DOM 中移除时都会调用...</td>\n</tr>\n<tr>\n<td>attributeChangedCallback(attrName, oldVal, newVal)</td>\n<td>属性添加、移除、更新或替换...</td>\n</tr>\n<tr>\n<td>adoptedCallback(attrName, oldVal, newVal)</td>\n<td>自定义元素被移入新的 document...</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://developers.google.com/web/fundamentals/web-components/customelements#extendhtml\">https://developers.google.com/web/fundamentals/web-components/customelements#extendhtml</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_custom_elements#%E4%BD%BF%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\">https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_custom_elements#%E4%BD%BF%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0</a></p>\n<blockquote>\n<p>上面写得很清晰 比我这个容易理解</p>\n</blockquote>\n<pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">// 生命周期钩子</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 创建 div</span>\n    <span class=\"token keyword\">let</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n    div<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 创建 img</span>\n    <span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> src <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 创建info信息</span>\n    <span class=\"token keyword\">let</span> info <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-text'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 设置img内容</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src\n    img<span class=\"token punctuation\">.</span>alt <span class=\"token operator\">=</span> text\n\n    <span class=\"token comment\">// 设置info内容</span>\n    info<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span>\n    info<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> text\n\n    <span class=\"token comment\">// 添加class</span>\n    div<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 添加内容 img info</span>\n    div<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    div<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre><p>dom创建时候 创建内容</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n  <span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我没有了呀'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token comment\">// 测试移除 popup-info</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> remove <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#remove'</span><span class=\"token punctuation\">)</span>\n  remove<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre><p>dom 移除执行的方法 可以移除事件什么的</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n  <span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">attrName<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">,</span> newVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'当前的属性:'</span><span class=\"token punctuation\">,</span> attrName<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'当前的属性 old:'</span><span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'当前的属性 new:'</span><span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n  <span class=\"token comment\">// 测试属性被修改 toggle</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> toggle <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#toggle'</span><span class=\"token punctuation\">)</span>\n  toggle<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i<span class=\"token operator\">++</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">popup-info-change, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre><p>需要注意的是，如果需要在元素属性变化后，触发 attributeChangedCallback()回调函数，你必须监听这个属性。这可以通过定义observedAttributes() get函数来实现，observedAttributes()函数体内包含一个 return语句，返回一个数组，包含了需要监听的属性名称：</p>\n<pre class=\"language-js\"><code class=\"language-js\">\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'role'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre><p>监听属性变化 调用的方法 比如 role=&quot;popup&quot; 什么的</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n  <span class=\"token function\">adoptedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'adoptedCallback 自定义元素被移入新的 document'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n\n  <span class=\"token comment\">// 测试 自定义元素被移入新的 document</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">testAdoptedCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 创建 iframe</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createWindow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iframe'</span><span class=\"token punctuation\">)</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>iframe<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> iframe<span class=\"token punctuation\">.</span>contentWindow\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> cw <span class=\"token operator\">=</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 创建 自定义元素</span>\n  <span class=\"token keyword\">let</span> cw1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 创建的元素插入到 新创建的iframe</span>\n  cw<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>cw1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">move</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> move <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#move'</span><span class=\"token punctuation\">)</span>\n  move<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">testAdoptedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre><p>自定义元素被移入新的 document</p>\n<p><strong>元素定义的内容</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">popupInfo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxxxx\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre><p>以新内容覆盖元素的子项并非一种好的做法，因为这样做会不符合设想。\n添加元素定义内容的更好做法是使用 shadow DOM，下一篇文章会写</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">popupInfoShadow</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> shadowRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    shadowRoot<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;span>hello&lt;/span>\"</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info-shadow'</span><span class=\"token punctuation\">,</span> popupInfoShadow<span class=\"token punctuation\">)</span></code></pre><img src=\"Building-Components-Custom-Elements-自定义元素/shadow.png\" />\n\n\n<p><strong>通过 template 创建元素</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>info<span class=\"token operator\">-</span>template<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>info<span class=\"token operator\">-</span>template<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>template id<span class=\"token operator\">=</span><span class=\"token string\">\"info-template\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span>\n    p <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> red<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>hello template<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">infoTemplate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> shadowRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#info-template'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    shadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info-template'</span><span class=\"token punctuation\">,</span> infoTemplate<span class=\"token punctuation\">)</span></code></pre><img src=\"Building-Components-Custom-Elements-自定义元素/template.png\" />\n\n<ul>\n<li>我们在 HTML 中定义新的元素：info-template</li>\n<li>元素的 Shadow DOM 使用 template 创建</li>\n<li>由于是 Shadow DOM，元素的 DOM 局限于元素本地</li>\n<li>由于是 Shadow DOM，元素的内部 CSS 作用域限于元素内</li>\n</ul>\n<p><strong>设置自定义元素样式</strong></p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">&lt;style>\np</span> <span class=\"token punctuation\">{</span>\n  ...\n<span class=\"token punctuation\">}</span>\n&lt;/style></code></pre><p>:defined CSS 伪类 表示任何已定义的元素。这包括任何浏览器内置的标准元素以及已成功定义的自定义元素 (例如通过 CustomElementRegistry.define() 方法)。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:defined\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/:defined</a></p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">app-drawer:not(:defined)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">info-template</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">aa-bb:not(:defined)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>info-template</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>info-template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>info-template</span><span class=\"token punctuation\">></span></span>123<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>info-template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aa-bb</span><span class=\"token punctuation\">></span></span>123<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aa-bb</span><span class=\"token punctuation\">></span></span></code></pre><img src=\"Building-Components-Custom-Elements-自定义元素/style.png\" />\n\n\n<p>定义之前会隐藏起来哦</p>\n<p><strong>其他详情</strong></p>\n<p>未知元素与未定义的自定义元素</p>\n<p>HTML 使用起来非常宽松和灵活。例如，在页面上声明 randomtagthatdoesntexist，浏览器将非常乐意接受它。为什么非标准标记可以生效？答案在于 HTML 规范允许这样。规范没有定义的元素作为 HTMLUnknownElement 进行解析。</p>\n<p>自定义元素则并非如此。如果在创建时使用有效的名称（包含“-”），则潜在的自定义元素将解析为 HTMLElement。 您可以在支持自定义元素的浏览器中核实这一点。打开控制台：Ctrl+Shift+J（或者在 Mac 上，Cmd+Opt+J）并粘贴下列代码行：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// \"tabs\" is not a valid custom element name</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tabs'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HTMLUnknownElement</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token comment\">// \"x-tabs\" is a valid custom element name</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x-tabs'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span></code></pre><p><strong>API 参考</strong></p>\n<p>全局性 customElements 定义了处理自定义元素的方法。</p>\n<p><strong>define(tagName, constructor, options)</strong></p>\n<p>在浏览器中定义新的自定义元素。</p>\n<pre class=\"language-js\"><code class=\"language-js\">customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> HTMLElement <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'fancy-button'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> HTMLButtonElement <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>抽离出来可以更利于阅读</p>\n<p><strong>get(tagName)</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> Drawer <span class=\"token operator\">=</span> customElements<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app-drawer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Drawer<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Drawer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> drawer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Drawer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> PopupInfo <span class=\"token operator\">=</span> customElements<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>PopupInfo<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PopupInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> popupInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PopupInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre><p>在给定有效自定义元素标记名称的情况下，返回元素的构造函数。</p>\n<p>如果没有注册元素定义，则返回 undefined。</p>\n<img src=\"Building-Components-Custom-Elements-自定义元素/get.png\" />\n\n\n<p><strong>whenDefined(tagName)</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\">customElements<span class=\"token punctuation\">.</span><span class=\"token function\">whenDefined</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info ready!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">whenDefined</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app-drawer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app-drawer ready!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre><img src=\"Building-Components-Custom-Elements-自定义元素/whenDefined.png\" />\n\n<p>如果定义了自定义元素，则返回可解析的 Promise。如果元素已定义，则立即得到解析。</p>\n<p>如果标记名称并非有效自定义元素名称，则拒绝(好像也不会走catch)</p>\n<p><strong>历史记录和浏览器支持</strong></p>\n<p>如果您最近几年持续关注网络组件，您应知道 Chrome 36+ 实施的自定义元素 API 版本使用了 document.registerElement() 而不是 customElements.define()。</p>\n<p>但前者是标准的弃用版本，称为 v0。customElements.define() 成为现行标准并逐步获得各大浏览器厂商的支持。这称为自定义元素 v1。</p>\n<p><a href=\"https://developers.google.com/web/fundamentals/web-components/customelements\">https://developers.google.com/web/fundamentals/web-components/customelements</a></p>\n<p><strong>浏览器支持</strong></p>\n<p>要检测自定义元素功能，检测是否存在 window.customElements：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> supportsCustomElementsV1 <span class=\"token operator\">=</span> <span class=\"token string\">'customElements'</span> <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">;</span></code></pre><img src=\"Building-Components-Custom-Elements-自定义元素/in.png\" />\n\n<p><strong>Polyfill</strong></p>\n<p><a href=\"https://www.npmjs.com/package/@webcomponents/custom-elements\">https://www.npmjs.com/package/@webcomponents/custom-elements</a></p>\n<p>注：无法对 :defined CSS 伪类执行 polyfill。 (没测试过)</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> supportsCustomElementsV1 <span class=\"token operator\">=</span> <span class=\"token string\">'customElements'</span> <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadScript</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span>\n    script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src\n    script<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> resolve\n    script<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> reject\n    document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>supportsCustomElementsV1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">loadScript</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://unpkg.com/@webcomponents/custom-elements'</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'use polyfill'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Native support.Good to go.</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'native'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre><p>总结:</p>\n<p>自定义元素提供了一种新工具，可让我们在浏览器中定义新 HTML 标记并创建可重用的组件。\n它们与 Shadow DOM 和 template 等新平台原语结合使用，我们可开始实现更多的可能</p>\n<ul>\n<li>创建和扩展可重复使用组件的跨浏览器（网络标准）</li>\n<li>无需库或框架即可使用。原生 JS/HTML 威武！</li>\n<li>提供熟悉的编程模型。仅需使用 DOM/CSS/HTML。</li>\n<li>与其他网络平台功能良好匹配（Shadow DOM、template、CSS 自定义属性等）</li>\n<li>与浏览器的 DevTools 紧密集成。</li>\n<li>利用现有的无障碍功能。</li>\n<li>(我也是复制的 2333)</li>\n</ul>\n<p><a href=\"https://developers.google.com/web/fundamentals/web-components/customelements\">https://developers.google.com/web/fundamentals/web-components/customelements</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_custom_elements\">https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_custom_elements</a></p>\n","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}