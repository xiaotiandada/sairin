{"pageProps":{"post":{"id":"MDU6SXNzdWU3ODg3NDg3MTQ=","url":"https://github.com/xiaotiandada/blog/issues/44","title":"设计模式","updatedAt":"2021-01-19T06:34:06Z","createdAt":"2021-01-19T06:34:06Z","body":"2020-02-26 23:57:00\r\n\r\n第一次学习设计模式 [repo 所有的代码都在这儿啦!](https://github.com/xiaotiandada/javaScript-design-patterns)\r\n\r\n<!-- more --> \r\n\r\n## 工厂模式\r\n\r\n**相关资料:**\r\n\r\n[JavaScript设计模式总结](https://juejin.im/post/5c984610e51d45656702a785)\r\n\r\n[js设计模式-工厂模式](https://fanerge.github.io/2017/js设计模式-工厂模式.html)\r\n\r\n**创建三个角色然后随机决斗⚔️**\r\n\r\n```js\r\nconsole.log('工厂模式');\r\n\r\n// 攻击力1-100\r\nconst attackPower = () => Math.floor(Math.random() * 100 + 1)\r\n\r\n// 战士\r\nclass Warrior {\r\n  constructor() {\r\n    this.occupation = '战士'\r\n    this.skill = '单一狂砍'\r\n    this.blood = 100\r\n    this.hit = attackPower()\r\n    // other\r\n  }\r\n}\r\n\r\n// 法师\r\nclass Mage {\r\n  constructor() {\r\n    this.occupation = '法师'\r\n    this.skill = '集体冰冻'\r\n    this.blood = 100\r\n    this.hit = attackPower()\r\n  }\r\n}\r\n\r\n// 射手\r\nclass Archer {\r\n  constructor() {\r\n    this.occupation = '射手'\r\n    this.skill = '全局轰炸'\r\n    this.blood = 100\r\n    this.hit = attackPower()\r\n  }\r\n}\r\n\r\n// 工厂对象\r\n// class、function、object\r\nclass RoleFactory {\r\n  constructor() {}\r\n  createRole(role) {\r\n    let roles = {\r\n      Warrior: Warrior,\r\n      Mage: Mage,\r\n      Archer: Archer\r\n    }\r\n\r\n    const Character = roles[role]\r\n    return role ? new Character() : new Warrior()\r\n\r\n  }\r\n}\r\n\r\n// 创建角色\r\nlet roleFactory = new RoleFactory\r\nlet warrior = roleFactory.createRole('Warrior')\r\nlet mage = roleFactory.createRole('Mage')\r\nlet archer = roleFactory.createRole('Archer')\r\n\r\nconsole.log('warrior:', warrior);\r\nconsole.log('mage:', mage);\r\nconsole.log('archer:', archer);\r\n\r\nconsole.log('----------')\r\n\r\n// 随机角色\r\nconst randomRole = (data, number) => {\r\n  if (!data || !data.length || !number) return\r\n\r\n  let randomRole = []\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    let sub = Math.floor(Math.random() * data.length )\r\n    randomRole.push(...data.splice(sub, 1))\r\n  }\r\n  return randomRole\r\n}\r\n\r\n// 战斗\r\nconst duel = roles => {\r\n  // 最强角色\r\n  let maxRole = null\r\n  // 最高攻击力\r\n  let maxHit = -1\r\n  roles.map(item => {\r\n    console.log(item)\r\n    // 如果攻击力大于最大攻击力\r\n    if (item.hit > maxHit) {\r\n      // 设置当前角色\r\n      maxRole = item\r\n      // 攻击力也替换\r\n      maxHit = item.hit\r\n    } else if (item.hit === maxHit) {\r\n      // 清空\r\n      maxRole = null\r\n      maxHit = -1\r\n    }\r\n\r\n  })\r\n\r\n  return maxRole\r\n}\r\n\r\nconst compose = (...fn) => fn.reduce((a, b) => (...args) => a(b(...args)))\r\n\r\nlet winner = compose(duel, randomRole)([warrior, mage, archer], 2)\r\n\r\nif (winner) {\r\n  console.log(`胜利者是: ${winner.occupation}, 他的技能是: ${winner.skill}, 攻击力: ${winner.hit}`)\r\n} else {\r\n  console.log(`这是平局`)\r\n}\r\n```\r\n\r\n**输出**\r\n\r\n```js\r\n工厂模式\r\nwarrior: Warrior { occupation: '战士', skill: '单一狂砍', blood: 100, hit: 1 }\r\nmage: Mage { occupation: '法师', skill: '集体冰冻', blood: 100, hit: 39 }\r\narcher: Archer { occupation: '射手', skill: '全局轰炸', blood: 100, hit: 33 }\r\n----------\r\nWarrior { occupation: '战士', skill: '单一狂砍', blood: 100, hit: 1 }\r\nMage { occupation: '法师', skill: '集体冰冻', blood: 100, hit: 39 }\r\n胜利者是: 法师, 他的技能是: 集体冰冻, 攻击力: 39\r\n```\r\n\r\n\r\n\r\n因为**第一次**学习 还不太知道具体的**优点和好处** 也没办法**口喷** 所以暂时留个坑给自己 下次更加了解之后回来**填坑** 🍑\r\n\r\n## 单例模式\r\n\r\nhttps://juejin.im/post/5c984610e51d45656702a785\r\n\r\n[https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html](https://fanerge.github.io/2017/js设计模式-单例模式.html)\r\n\r\n> 定义：单例就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。 -- 复制的\r\n\r\n我的理解为一个类仅有一个实例, 并且全局访问都是相同的实例\r\n\r\n建议先看完上面文章的单例模块, 我觉得他们总结得比我要好\r\n\r\n```javascript\r\n// 登录框\r\n/**\r\n* 我这里单击按钮🔘显示登录框, 并且自身设置关闭事件 只是隐藏\r\n* 在下一次显示登录框的时候不会创建 而是直接展示 因为单例模式\r\n* 登录框已经创建了 所以直接返回了对象 然后展示\r\n*/\r\nconst loginBox = (function(){\r\n  let div\r\n  return function() {\r\n    if (!div) {\r\n      div = document.createElement('div')\r\n      div.onclick = function() {\r\n        div.style.display = 'none'\r\n      }\r\n      div.innerHTML = '登录 hhhh (单击我隐藏)'\r\n      document.body.appendChild(div)\r\n    }\r\n    return div\r\n  }\r\n})()\r\n\r\ndocument.querySelector('#btn').onclick = function() {\r\n  let loginbox = loginBox()\r\n  loginbox.style.display = 'block'\r\n}\r\n```\r\n\r\n这只是一个简单的示范... 🍑\r\n\r\n## 装饰器模式\r\n\r\nhttps://juejin.im/post/5c984610e51d45656702a785\r\n\r\n> 在不改变对象自身的基础上，动态的给某个对象添加新的功能，同时又不改变其接口\r\n\r\nhttps://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.html\r\n\r\n> 定义：装饰者(decorator)模式能够在不改变对象自身的基础上，在程序运行期间给对象动态的添加职责。\r\n>\r\n> 这样给对象动态的增加职责的方式就没有改变对象自身，一个对象放入另一个对象就形成了一条装饰链（一个聚合对象）， 而上面的shot和track也就是装饰者、装饰函数 ，当函数执行时，会把请求转给链中的下一个对象。\r\n\r\n\r\n\r\n```javascript\r\n{\r\n  class Plane {\r\n    fire() {\r\n      console.log('发射普通子弹')\r\n    }\r\n  }\r\n\r\n  class Missile {\r\n    plane: any\r\n    constructor(plane) {\r\n      this.plane = plane\r\n    }\r\n\r\n    fire () {\r\n      this.plane.fire()\r\n      console.log('发射导弹')\r\n    }\r\n  }\r\n\r\n  let plane = new Plane()\r\n  plane = new Missile(plane)\r\n  console.log(plane.fire())\r\n}\r\n```\r\n\r\n```javascript\r\n// 利用AOP给函数动态添加功能，即Function的after或者before\r\n{\r\n  let func = function() {\r\n    console.log('2')\r\n  }\r\n\r\n  Function.prototype.before = function(fn) {\r\n    const _this = this\r\n    return function() {\r\n      fn.apply(this, arguments)\r\n      return _this.apply(this, arguments)\r\n    }\r\n  }\r\n  Function.prototype.after = function(fn) {\r\n    const _this = this\r\n    return function() {\r\n      const ret = _this.apply(this, arguments)\r\n      fn.apply(this, arguments)\r\n      return ret\r\n    }\r\n  }\r\n  \r\n  func = func.before(function() {\r\n    console.log(1)\r\n  }).after(() => {\r\n    console.log(3)\r\n  });\r\n  \r\n  func()\r\n}\r\n```\r\n\r\n```javascript\r\n\r\n{\r\n  // 利用装饰器\r\n  function func1() {\r\n    console.log(1)\r\n  }\r\n  function func2() {\r\n    console.log(2)\r\n  }\r\n  class Func {\r\n    @func2\r\n    @func1\r\n    init() {\r\n      console.log(3)\r\n    }\r\n  }\r\n\r\n  let func = new Func()\r\n  func.init()\r\n\r\n}\r\n```\r\n\r\n```javascript\r\n{\r\n  // 封装成函数\r\n  const before = function (fn, before) {\r\n    return function() {\r\n      before.apply(this, arguments)\r\n      return fn.apply(this, arguments)\r\n    }\r\n  }\r\n\r\n  const after = function(fn, after) {\r\n    return function() {\r\n      const ret = fn.apply(this, arguments)\r\n      after.apply(this, arguments)\r\n      return ret\r\n    }\r\n  }\r\n\r\n  function func(x) {\r\n    console.log(x)\r\n  }\r\n\r\n  function func1(2) {\r\n    console.log(1)\r\n  }\r\n\r\n\r\n  function func2() {\r\n    console.log(2)\r\n  }\r\n\r\n\r\n  before(func1, func2)()\r\n  after(func1, func2)()\r\n}\r\n```\r\n\r\n核心就在``after`` ``before`` 了\r\n\r\n ```javascript\r\n{\r\n  // ...\r\n  function handwashing() {\r\n    console.log('洗手')\r\n  }\r\n\r\n  function drink() {\r\n    console.log('喝水')\r\n  }\r\n\r\n  function eat() {\r\n    console.log('吃饭')\r\n  }\r\n\r\n\r\n  before(eat, handwashing)()\r\n  after(eat, drink)()\r\n  \r\n  // 吃饭前洗手\r\n  // 吃饭后喝水\r\n}\r\n ```\r\n\r\n比较基础的演示了 :)\r\n\r\n## 代理模式\r\n\r\n> 为一个对象提供一个代用品或占位符，以便控制对它的访问。\r\n\r\n[https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html](https://fanerge.github.io/2017/js设计模式-代理模式.html)\r\n\r\n```javascript\r\n// 缓存代理\r\nconst mult = function() {\r\n  let a = 1\r\n\r\n  for (let i = 0; i < arguments.length; i++) {\r\n    a *= arguments[i]\r\n  }\r\n\r\n  return a\r\n}\r\n\r\n\r\nconst plus = function() {\r\n  let a = 0\r\n\r\n  for (let i = 0; i < arguments.length; i++) {\r\n    a += arguments[i]\r\n  }\r\n\r\n  return a\r\n}\r\n\r\n\r\nconst createProxyFactory = function(fn) {\r\n  let cache = {} // 保存计算结果\r\n  return function() {\r\n    let args = Array.from(arguments).join(',')\r\n    if (args in cache) {\r\n      return cache[args]\r\n    } else {\r\n      return cache[args] = fn.apply(this, arguments)\r\n    }\r\n  }\r\n}\r\n\r\n\r\nlet proxyMult = createProxyFactory(mult)\r\nlet proxyPlus = createProxyFactory(plus)\r\n\r\nconsole.log(proxyMult(1,2,3,4))\r\nconsole.log(proxyPlus(1,2,3,4))\r\n```\r\n\r\n> 这里每次进行同类的计算时（乘法和加法两类），先判断缓存对象cache中是否存在该参数连接成的字符串作为key的属性。\r\n> 如果有，则直接从cache中读取，否则就进行计算并保存其结果。\r\n\r\n```javascript\r\n// 虚拟代理\r\n\r\nconst sleep = time => new Promise(resolve => setTimeout(resolve, time))\r\n\r\nconst imgFunc = (function() {\r\n  let imgNode = document.createElement('img')\r\n  document.body.appendChild(imgNode)\r\n\r\n  return {\r\n    setSrc(src) {\r\n      imgNode.src = src\r\n    }\r\n  }\r\n})()\r\n\r\n\r\nconst proxyImage = (function() {\r\n  const img = new Image()\r\n  img.onload = function() {\r\n    imgFunc.setSrc(this.src)\r\n  }\r\n\r\n  return {\r\n    setSrc(src) {\r\n      imgFunc.setSrc('https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=766379944,3048822499&fm=26&gp=0.jpg')\r\n      // 模拟加载时间\r\n      setTimeout(() => {\r\n        img.src = src\r\n      }, 2000)\r\n    }\r\n  }\r\n})()\r\n\r\nproxyImage.setSrc('http://t8.baidu.com/it/u=1484500186,1503043093&fm=79&app=86&f=JPEG?w=1280&h=853')\r\n```\r\n\r\n> 图片懒加载的方式：先通过一张loading图占位，然后通过异步的方式加载图片，等图片加载好了再把完成的图片加载到img标签里面。\r\n\r\n## 策略模式\r\n\r\n[https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html](https://fanerge.github.io/2017/js设计模式-策略模式.html)\r\n\r\n>  定义：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。\r\n\r\n```javascript\r\nconst strategy = {\r\n  a(salary) {\r\n     return salary * 4\r\n  },\r\n  b(salary) {\r\n    return salary * 3\r\n  },\r\n  c(salary) {\r\n    return salary * 2\r\n  }\r\n}\r\n\r\n\r\nObject.freeze(strategy)\r\n\r\n\r\nconst returnMoney = (type, salary) => {\r\n  return strategy[type](salary)\r\n}\r\n\r\nconsole.log(returnMoney('a', 1000))\r\nconsole.log(returnMoney('b', 3000))\r\nconsole.log(returnMoney('c', 4000))\r\n```\r\n\r\n简单的使用\r\n\r\nps: 策略模式指的是定义一系列的算法，把它们一个个封装起来，将不变的部分和变化的部分隔开，\r\n实际就是将算法的使用和实现分离出来；\r\n\r\n**表单验证**\r\n\r\n我在原有的code上加了一个方法(错误展示, 比较基础所以很多地方没有考虑到)\r\n\r\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"策略模式\" src=\"https://codepen.io/xiaotiandada/embed/xxZOBvG?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\r\n  See the Pen <a href='https://codepen.io/xiaotiandada/pen/xxZOBvG'>策略模式</a> by xiaotiandada\r\n  (<a href='https://codepen.io/xiaotiandada'>@xiaotiandada</a>) on <a href='https://codepen.io'>CodePen</a>.\r\n</iframe>\r\n\r\n\r\n\r\n```html\r\n<!-- ... -->\r\n<style>\r\n  .error-msg {\r\n    color: red;\r\n    font-size: 14px;\r\n  }\r\n</style>\r\n\r\n<form id=\"registerForm\">\r\n  <div>\r\n    <label for=\"\">用户名</label>\r\n    <input type=\"text\" name=\"username\">\r\n  </div>\r\n  <div>\r\n    <label for=\"\">密码</label>\r\n    <input type=\"password\" name=\"password\">\r\n  </div>\r\n  <div>\r\n    <label for=\"\">手机号码</label>\r\n    <input type=\"text\" name=\"phoneNumber\">\r\n  </div>\r\n  <button>submit</button>\r\n</form>\r\n<!-- ... -->\r\n```\r\n\r\n```js\r\n// 这里我们实现一组策略类封装具体的验证规则\r\nconst strategyForm = {\r\n\t// 是否为空\r\n\tisNotEmpty (value, errorMsg){\r\n\t\tif (value === '') {\r\n\t\t\treturn errorMsg;\r\n\t\t}\r\n\t},\r\n\t// 最小长度\r\n\tminLength (value, length, errorMsg){\r\n\t\tif (value.length < length) {\r\n\t\t\treturn errorMsg;\r\n\t\t}\r\n\t},\r\n\t// 手机号码格式\r\n\tmobileFormat (value,errorMsg){\r\n\t\tif(!/(^1[3|5|8][0-9]{9}$)/.test(value)) {\r\n\t\t\treturn errorMsg;\r\n\t\t}\r\n\t}\r\n};\r\nObject.freeze(strategyForm);\r\n\r\n\r\nconst Validator = function() {\r\n  this.cache = []\r\n}\r\n\r\nValidator.prototype.add = function(dom, rules) {\r\n\tlet slef = this\r\n\t// 添加错误信息提示\r\n\tconst addErrorMsg = (msg, dom, errorMsg) => {\r\n\t\t// 如果有错误信息\r\n\t\tif (msg) {\r\n\t\t\t// 如果已经有了错误提示\r\n\t\t\tlet errorMsgDom = dom.parentNode.querySelector('.error-msg')\r\n\t\t\tif (errorMsgDom) {\r\n\t\t\t\terrorMsgDom.innerHTML = errorMsg\r\n\t\t\t} else {\r\n\t\t\t\t// 没有提示创建\r\n\t\t\t\tlet errorHtml = document.createElement('span')\r\n\t\t\t\terrorHtml.className = 'error-msg'\r\n\t\t\t\terrorHtml.innerHTML = errorMsg\r\n\t\t\t\tdom.parentNode.appendChild(errorHtml)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// 没有错误提示\r\n\t\t\t// 如果有错误提示但是tag还存在则清除\r\n\t\t\tlet errorMsgDom = dom.parentNode.querySelector('.error-msg')\r\n\t\t\tif (errorMsgDom) {\r\n\t\t\t\terrorMsgDom.remove()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfor(let i = 0, rule; rule = rules[i++]; ) {\r\n\t\t(function(rule) {\r\n\t\t\tlet strategyArr = rule.strategy.split(':')\r\n\t\t\tlet errorMsg = rule.errorMsg\r\n\r\n\t\t\tslef.cache.push(function() {\r\n\t\t\t\tlet strategy = strategyArr.shift() // 取第一个 策略名\r\n\t\t\t\tstrategyArr.unshift(dom.value)\r\n\t\t\t\tstrategyArr.push(errorMsg)\r\n\t\t\t\tlet msg = strategyForm[strategy].apply(dom, strategyArr)\r\n\t\t\t\taddErrorMsg(msg, dom, errorMsg)\r\n\t\t\t\treturn msg\r\n\t\t\t})\r\n\r\n\t\t})(rule)\r\n\t}\r\n}\r\n\r\nValidator.prototype.start = function() {\r\n\tfor (let i = 0, validatorFunc; validatorFunc = this.cache[i++];) {\r\n\t\tlet msg = validatorFunc()\r\n\t\tif (msg) return msg\r\n\t}\r\n}\r\n\r\nlet registerForm = document.getElementById('registerForm')\r\n\r\nlet validateFunc = function() {\r\n\tlet validator = new Validator()\r\n\tvalidator.add(registerForm.username, [\r\n\t\t{ strategy: 'isNotEmpty', errorMsg: '用户名不能为空' },\r\n\t\t{ strategy: 'minLength:6', errorMsg: '用户名长度不能小于6位' }\r\n\t])\r\n\tvalidator.add(registerForm.password,[\r\n\t\t{strategy: 'minLength:6',errorMsg:'密码长度不能小于6位'},\r\n\t]);\r\n\tvalidator.add(registerForm.phoneNumber,[\r\n\t\t{strategy: 'mobileFormat',errorMsg:'手机号格式不正确'},\r\n\t]);\r\n\tlet errorMsg = validator.start()\r\n\treturn errorMsg\r\n}\r\n\r\nregisterForm.onsubmit = function() {\r\n\tlet errorMsg = validateFunc()\r\n\tif (errorMsg) {\r\n\t\tconsole.log(errorMsg)\r\n\t} else {\r\n\t\tconsole.log('done')\r\n\t}\r\n\treturn false\r\n}\r\n```\r\n\r\n## 中介者模式\r\n\r\nhttps://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html\r\n\r\n定义：中介者模式的作用就是解除对象与对象之间的紧耦合关系\r\n\r\n```javascript\r\n// MVC 模式\r\nlet M = {}\r\nlet V = {}\r\nlet C = {}\r\n\r\nM.data = 'Hello World'\r\nV.render = (M) => {\r\n    // alert(M.data)\r\n    document.body.append(document.createElement('p').innerHTML = M.data)\r\n}\r\nC.handleOnload = () => {\r\n    V.render(M)\r\n}\r\n\r\n\r\nwindow.onload = C.handleOnload\r\n```\r\n\r\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"中介者模式\" src=\"https://codepen.io/xiaotiandada/embed/abdBOvp?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\r\n  See the Pen <a href='https://codepen.io/xiaotiandada/pen/abdBOvp'>中介者模式</a> by xiaotiandada\r\n  (<a href='https://codepen.io/xiaotiandada'>@xiaotiandada</a>) on <a href='https://codepen.io'>CodePen</a>.\r\n</iframe>\r\n\r\n```html\r\n<form action=\"#\" id=\"selectPhone\">\r\n  <div>\r\n    <label for=\"\">选择手机颜色</label>\r\n    <select name=\"\" id=\"colorSelect\">\r\n      <option value=\"\">请选择</option>\r\n      <option value=\"red\">红色</option>\r\n      <option value=\"blue\">蓝色</option>\r\n    </select>\r\n  </div>\r\n  <div>\r\n    <label for=\"\">选择内存</label>\r\n    <select name=\"\" id=\"memorySelect\">\r\n      <option value=\"\">请选择</option>\r\n      <option value=\"16G\">16G</option>\r\n      <option value=\"32G\">32G</option>\r\n    </select>\r\n  </div>\r\n  <div>\r\n    <label for=\"\">输入购买数量</label>\r\n    <input type=\"number\" min=\"0\" id=\"numberInput\">\r\n  </div>\r\n  <div>\r\n    您选择了颜色: <div id=\"colorInfo\"></div><br/>\r\n    您选择了内存: <div id=\"memoryInfo\"></div><br/>\r\n    您输入了数量: <div id=\"numberInfo\"></div><br/>\r\n    <button id=\"nextBtn\" disabled=\"true\">请选择手机颜色和购买数量</button>\r\n  </div>\r\n</form>\r\n```\r\n\r\n```javascript\r\nlet goods = {\r\n   \"red|32G\": 3,\r\n\t\"red|16G\": 0,\r\n\t\"blue|32G\": 1,\r\n\t\"blue|16G\": 6\r\n}\r\n\r\n// 获得所有节点的引用，以便对其进行操作（中介者必许获得对其他对象的引用）\r\nlet colorSelect = document.getElementById( 'colorSelect' )\r\nlet memorySelect = document.getElementById( 'memorySelect' )\r\nlet numberInput = document.getElementById( 'numberInput' )\r\n\r\nlet colorInfo = document.getElementById( 'colorInfo' )\r\nlet memoryInfo = document.getElementById( 'memoryInfo' )\r\nlet numberInfo = document.getElementById( 'numberInfo' )\r\nlet nextBtn = document.getElementById( 'nextBtn' )\r\n\r\nlet mediator = (function() {\r\n    return {\r\n        changed(obj) {\r\n            var color = colorSelect.value // 颜色\r\n            let memory = memorySelect.value// 内存\r\n            let number = numberInput.value // 数量\r\n\r\n            if (obj === colorSelect) {\r\n                colorInfo.innerHTML = color\r\n            } else if (obj === memorySelect) {\r\n                memoryInfo.innerHTML = memory\r\n            } else if (obj === numberInput) {\r\n                numberInfo.innerHTML = number\r\n            } else {\r\n                console.log(obj)\r\n            }\r\n\r\n            if (!color) {\r\n                nextBtn.disabled = true\r\n                nextBtn.innerHTML = '请选择手机颜色'\r\n                return\r\n            }\r\n\r\n            if (!memory) {\r\n                nextBtn.disabled = true\r\n                nextBtn.innerHTML = '请选择内存大小'\r\n                return\r\n            }\r\n\r\n            if (((number - 0) | 0 !== number - 0)) {\r\n                nextBtn.disabled = true\r\n                nextBtn.innerHTML = '请输入正确的购买数量'\r\n                return\r\n            }\r\n\r\n            nextBtn.disabled = false;\r\n\t\t\tnextBtn.innerHTML = '放入购物车';\r\n\r\n        }\r\n    }\r\n})()\r\n\r\n\r\n// 与中介者联系起来，事件函数\r\ncolorSelect.onchange = function(){\r\n\tmediator.changed( this );\r\n};\r\nmemorySelect.onchange = function(){\r\n\tmediator.changed( this );\r\n};\r\nnumberInput.onchange = function(){\r\n\tmediator.changed( this );\r\n};\r\n```\r\n\r\n## 发布订阅模式\r\n\r\n```js\r\n// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.html\r\n\r\n// 对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。\r\n\r\nconst Event = (function() {\r\n  // 缓存列表\r\n  let list = {}\r\n\r\n  // 监听函数\r\n  const listen = function(key, fn) {\r\n    if (!list[key]) {\r\n      list[key] = []\r\n    }\r\n    list[key].push(fn)\r\n  }\r\n\r\n  // 触发监听\r\n  const trigger = function() {\r\n    let key = Array.prototype.shift.call(arguments)\r\n    let fns = list[key]\r\n\r\n    if (!fns || fns.length === 0) {\r\n      return false\r\n    }\r\n\r\n    for (let i = 0, fn; fn = fns[i++];) {\r\n      fn.apply(this, arguments)\r\n    }\r\n  }\r\n  // 移除监听函数\r\n  const remove = function(key, fn) {\r\n    let fns = list[key]\r\n\r\n    if (!fns) {\r\n      return false\r\n    }\r\n\r\n    if (!fn) {\r\n      fns && (fns.length = 0)\r\n    } else {\r\n      for (let i = fns.length - 1; i >= 0; i--) {\r\n        let _fn = fns[i]\r\n        if (_fn === fn) {\r\n          fns.splice(i, 1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    listen,\r\n    trigger,\r\n    remove\r\n  }\r\n})()\r\n\r\n\r\nfunction d1() {\r\n  console.log('d11111')\r\n}\r\n\r\nfunction d2() {\r\n  console.log('d22222')\r\n}\r\n\r\nfunction d3() {\r\n  console.log('d33333')\r\n}\r\n\r\nEvent.listen('color', d1)\r\nEvent.listen('color', d2)\r\nEvent.listen('color', d3)\r\n\r\n\r\nEvent.listen('size', d1)\r\nEvent.listen('size', d2)\r\nEvent.remove('size', d1)\r\nEvent.listen('size', d3)\r\n\r\nEvent.trigger('color')\r\nconsole.log('----')\r\nEvent.trigger('size')\r\nconsole.log('----')\r\nEvent.trigger('color')\r\n\r\n\r\n// d11111\r\n// d22222\r\n// d33333\r\n// ----\r\n// d22222\r\n// d33333\r\n// ----\r\n// d11111\r\n// d22222\r\n// d33333\r\n```\r\n\r\n## 迭代器模式\r\n\r\n```javascript\r\n// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html\r\n// 定义：迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。\r\n\r\n// 内部迭代器\r\n\r\nconst each = (array, callback) => {\r\n  for (let i = 0, len = array.length; i < len; i++) {\r\n    if (callback.call(array[i], array[i], i) === false) {\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\neach([1,2,3,4,5], (val, i) => {\r\n  console.log(val + ' - ' + i)\r\n})\r\nconsole.log('-----')\r\neach([1,2,3,4,5], (val, i) => {\r\n  if (i === 3) {\r\n    return false\r\n  }\r\n  console.log(val + ' - ' + i)\r\n})\r\n\r\n// 外部迭代器\r\n\r\nconst Iterator = obj => {\r\n  let current = 0;\r\n\r\n  const next = () => {\r\n    if (current > obj.length) {\r\n      return false\r\n    }\r\n    current += 1;\r\n  }\r\n\r\n  const isDone = () => {\r\n    return current >= obj.length\r\n  }\r\n\r\n  const getCurrentItem = () => {\r\n    return obj[current]\r\n  }\r\n\r\n  return {\r\n    next,\r\n    isDone,\r\n    getCurrentItem\r\n  }\r\n}\r\n\r\nconsole.log('-----')\r\n\r\nlet iterator = Iterator([1,2,3,4,5])\r\nconsole.log(iterator.getCurrentItem())\r\nconsole.log(iterator.getCurrentItem())\r\n\r\niterator.next()\r\n\r\nconsole.log(iterator.getCurrentItem())\r\nconsole.log(iterator.isDone())\r\n\r\niterator.next()\r\nconsole.log(iterator.getCurrentItem())\r\niterator.next()\r\nconsole.log(iterator.getCurrentItem())\r\niterator.next()\r\nconsole.log(iterator.getCurrentItem())\r\niterator.next()\r\nconsole.log(iterator.getCurrentItem())\r\niterator.next()\r\n\r\nconsole.log(iterator.isDone())\r\n\r\n\r\n\r\n// 1 - 0\r\n// 2 - 1\r\n// 3 - 2\r\n// 4 - 3\r\n// 5 - 4\r\n// -----\r\n// 1 - 0\r\n// 2 - 1\r\n// 3 - 2\r\n// -----\r\n// 1\r\n// 1\r\n// 2\r\n// false\r\n// 3\r\n// 4\r\n// 5\r\n// undefined\r\n// true\r\n```\r\n\r\n## 桥接模式\r\n\r\n[https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.html](https://fanerge.github.io/2017/js设计模式-桥接模式.html)\r\n\r\n定义：桥接模式（Bridge）将抽象部分与它的实现部分分离，使它们都可以独立地变化。\r\n\r\n\r\n\r\n## 外观模式\r\n\r\n```html\r\n<button id=\"button\">外观模式</button>\r\n<div id=\"foo\"></div>\r\n<div id=\"foo1\"></div>\r\n<div id=\"foo2\"></div>\r\n```\r\n\r\n```javascript\r\n// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.html\r\n// https://natee.gitbooks.io/javascript-design-patterns/facade-pattern.html\r\n// 定义：外观模式（Facade）为子系统中的一组接口提供了一个一致的界面，此模块定义了一个高层接口，这个接口使得这一子系统更加容易使用。\r\n\r\n\r\nconst addEvent = function(el, ev, fn) {\r\n  if (el.addEventListener) {\r\n    el.addEventListener(ev, fn, false)\r\n  } else if (el.attachEvent) {\r\n    el.attachEvent(`on${ev}`, fn)\r\n  } else {\r\n    el[`on${ev}`] = fn\r\n  }\r\n}\r\n\r\n// 没测试\r\nlet N = window.N || {}\r\nN.tools = {\r\n  stopPropagation(e) {\r\n    if (e.stopPropagation) {\r\n      e.stopPropagation()\r\n    } else {\r\n      e.cancelBubble = true\r\n    }\r\n  },\r\n  preventDefault(e) {\r\n    if (e.preventDefault) {\r\n      e.preventDefault()\r\n    } else {\r\n      e.returnValue = false\r\n    }\r\n  },\r\n  stopEvent(e) {\r\n    this.stopPropagation(e)\r\n    this.preventDefault(e)\r\n  }\r\n}\r\n\r\n\r\naddEvent(document.getElementById('button'), 'click', function() {\r\n  console.log('button')\r\n})\r\n\r\n\r\n\r\nfunction setStyles(elements, styles) {\r\n  for (let i = 0, len = elements.length; i < len; i++) {\r\n    let element = document.getElementById(elements[i])\r\n    if (element) {\r\n      for (let property in styles) {\r\n        element.style[property] = styles[property]\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nsetStyles(['foo', 'foo1', 'foo2'], {\r\n  backgroundColor: 'red',\r\n  width: '150px',\r\n  height: '200px'\r\n});\r\n```\r\n\r\n## 访问者模式\r\n\r\n```javascript\r\n// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html\r\n// 没太理解...\r\n\r\nfunction Visitor () {\r\n  this.visit  = function(ConceteElement) {\r\n    ConceteElement.doSomething()\r\n  }\r\n}\r\n\r\nfunction ConceteElement() {\r\n  this.doSomething = function() {\r\n    console.log('this is a element')\r\n  }\r\n\r\n  this.accept = function(visitor) {\r\n    visitor.visit(this)\r\n  }\r\n}\r\n\r\n\r\nlet visitor = new Visitor()\r\nlet conceteElement = new ConceteElement()\r\n\r\nconceteElement.accept(visitor)\r\n\r\n```\r\n\r\n## 模版方法模式\r\n\r\n定义：模板方法模式由二部分组成，第一部分是抽象父类，第二部分是具体实现的子类，一般的情况下是抽象父类封装了子类的算法框架，包括实现一些公共方法及封装子类中所有方法的执行顺序，子类可以继承这个父类，并且可以在子类中重写父类的方法，从而实现自己的业务逻辑。\r\n\r\n```javascript\r\n// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html\r\n\r\n\r\nconst ITInterview = function() {}\r\n\r\nITInterview.prototype.writeTest = function() {\r\n  console.log('this is a write test')\r\n}\r\n\r\nITInterview.prototype.technicalInterView = function() {\r\n  console.log('this is a technical interview')\r\n}\r\n\r\nITInterview.prototype.leader = function() {\r\n  console.log('this is a leader interview')\r\n}\r\n\r\nITInterview.prototype.waitNotice = function() {\r\n  console.log('wait notice')\r\n}\r\n\r\nITInterview.prototype.init = function() {\r\n  this.writeTest()\r\n  this.technicalInterView()\r\n  this.leader()\r\n  this.waitNotice()\r\n}\r\n\r\nconst itInterview = new ITInterview()\r\nitInterview.init()\r\n\r\n\r\n// baidu\r\nconst BaiDuITInterview = function() {}\r\nBaiDuITInterview.prototype = new ITInterview()\r\n\r\nBaiDuITInterview.prototype.writeTest = function() {\r\n  console.log('this is a baidu write test')\r\n}\r\n\r\nBaiDuITInterview.prototype.technicalInterView = function() {\r\n  console.log('this is a baidu technical interview')\r\n}\r\n\r\n\r\nconst baiduItInterview = new BaiDuITInterview()\r\nbaiduItInterview.init()\r\n\r\n```\r\n\r\n## 组合模式\r\n\r\n定义：组合模式（Composite）将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。\r\n\r\n```javascript\r\n// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html\r\n// 定义：组合模式（Composite）将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。\r\n\r\n\r\n// 定义组合对象（文件夹）\r\nlet Folder = function(name) {\r\n  this.name = name\r\n  this.files = []\r\n}\r\n\r\nFolder.prototype.add = function(file) {\r\n  this.files.push(file)\r\n}\r\n\r\nFolder.prototype.scan = function() {\r\n  console.log('开始文件扫描:' + this.name)\r\n\tfor( let i = 0, file, files = this.files; file = files[i++]; ){\r\n\t\tfile.scan();\r\n\t}\r\n} \r\n\r\n//定义叶子对象（文件）\r\nlet File = function(name) {\r\n  this.name = name\r\n}\r\n\r\nFile.prototype.add = function() {\r\n  throw new Error('文件下面不能再添加文件')\r\n}\r\nFile.prototype.scan = function() {\r\n  console.log('开始扫瞄：' + this.name)\r\n}\r\n\r\n\r\nlet folder = new Folder('前端学习');\r\nlet folder1 = new Folder('JS学习');\r\nlet folder2 = new Folder('JQ学习');\r\n\r\nlet file1 = new File('JS设计模式');\r\nlet file2 = new File('JQ实战');\r\nlet file3 = new File('前端性能');\r\n\r\nfolder1.add(file1);\r\nfolder2.add(file2);\r\n\r\nfolder.add(folder1);\r\nfolder.add(folder2);\r\nfolder.add(file3);\r\nfolder.scan();\r\n\r\n// 开始文件扫描:前端学习\r\n// 开始文件扫描:JS学习\r\n// 开始扫瞄：JS设计模式\r\n// 开始文件扫描:JQ学习\r\n// 开始扫瞄：JQ实战\r\n// 开始扫瞄：前端性能\r\n```\r\n\r\n## 备忘录模式\r\n\r\n定义：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样就可以将该对象恢复到原先保存的状态\r\n\r\n```javascript\r\n// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.html\r\n// 定义：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样就可以将该对象恢复到原先保存的状态\r\n\r\nconst render = data => {\r\n  console.log(data)\r\n}\r\n\r\nconst page = function () {\r\n  let cache = {}\r\n\r\n  return (page) => {\r\n    console.log('page', page)\r\n    console.log('cache', JSON.stringify(cache))\r\n\r\n    if (cache[page]) {\r\n      render(cache[page])\r\n    } else {\r\n      let data = [\r\n        {\r\n          title: \"hi\"\r\n        }\r\n      ]\r\n\r\n      cache[page] = data\r\n      render(data)\r\n    }\r\n  }\r\n}()\r\n\r\n\r\n\r\npage(1)\r\npage(1)\r\npage(1)\r\npage(1)\r\n\r\npage(1)\r\npage(2)\r\npage(3)\r\npage(4)\r\n\r\npage(2)\r\n\r\n```\r\n\r\n## 职责链模式\r\n\r\n```javascript\r\n// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.html\r\n\r\n// 定义：职责链模式（Chain of responsibility）是使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理他为止。职责链模式的名字非常形象，一系列可能会处理请求的对象被该连接成一条链，请求在这些对象之间依次传递，直到遇到一个可以处理它的对象，我们把这些对象成为链中的节点。\r\n\r\n// 500 元客户订单\r\nvar order500 = function (orderType, pay, stock) {\r\n  if (orderType === 1 && pay) {\r\n    console.log('500 rmb deposit, get 100 coupon ')\r\n  } else {\r\n    return 'nextSuccessor' // unknow the next node but always pass to next.\r\n  }\r\n};\r\n// 200 元客户订单\r\nvar order200 = function (orderType, pay, stock) {\r\n  if (orderType === 2 && pay) {\r\n    console.log('200 rmb deposit , get 50 coupon')\r\n  } else {\r\n    return 'nextSuccessor';\r\n  }\r\n};\r\n// 无预约客户订单\r\nvar orderNormal = function (orderType, pay, stock) {\r\n  if (stock > 0) {\r\n    console.log('normal buy no coupon')\r\n  } else {\r\n    console.log('the stock lack')\r\n  }\r\n};\r\n\r\nlet Chain = function (fn) {\r\n  this.fn = fn\r\n  this.successor = null\r\n}\r\n\r\nChain.prototype.setNextSuccessor = function (successor) {\r\n  return this.successor = successor\r\n}\r\n\r\nChain.prototype.passRequest = function () {\r\n  let ret = this.fn.apply(this, arguments)\r\n  if (ret === 'nextSuccessor') {\r\n    return this.successor && this.successor.passRequest.apply(this.successor, arguments)\r\n  }\r\n  return ret\r\n}\r\n\r\n\r\n\r\n// 现在我们把3个订单函数分别包装成职责链的节点\r\nvar chainOrder500 = new Chain(order500);\r\nvar chainOrder200 = new Chain(order200);\r\nvar chainOrderNormal = new Chain(orderNormal);\r\n\r\n// 这里我们把上面封装的节点连成一条线，依次判断执行\r\nchainOrder500.setNextSuccessor(chainOrder200)\r\nchainOrder200.setNextSuccessor(chainOrderNormal)\r\n// 测试代码\r\nchainOrder500.passRequest(1,true,6); // 500 rmb deposit, get 100 coupon\r\nchainOrder500.passRequest(2,true,4); // 200 rmb deposit , get 50 coupon\r\n\r\nchainOrderNormal.passRequest(2,true,0); // 200 rmb deposit , get 50 coupon\r\n\r\n```\r\n\r\n## 状态模式\r\n\r\n```javascript\r\n// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html\r\n// 定义：状态模式（State）定义一个对象，这个对象可以通过管理其状态从而使得应用程序作出相应的变化。\r\n\r\nvar trafficLight = (function () {\r\n\tvar currentLight = null;\r\n\treturn {\r\n\t\tchange: function (light) {\r\n\t\t\tcurrentLight = light;\r\n\t\t\tcurrentLight.go();\r\n\t\t}\r\n\t}\r\n})();\r\n\r\n\r\n// 红灯\r\nfunction RedLight() { }\r\nRedLight.prototype.go = function () {\r\n\tconsole.log(\"this is red light\");\r\n}\r\n// 绿灯\r\nfunction GreenLight() { }\r\nGreenLight.prototype.go = function () {\r\n\tconsole.log(\"this is green light\");\r\n}\r\n// 黄灯\r\nfunction YellowLight() { }\r\nYellowLight.prototype.go = function () {\r\n\tconsole.log(\"this is yellow light\");\r\n}\r\n\r\ntrafficLight.change(new RedLight()); // this is red light\r\ntrafficLight.change(new YellowLight()); // this is yellow light\r\n\r\n\r\nfunction Menu() { }\r\nMenu.prototype.toggle = function (state) {\r\n\tstate();\r\n}\r\n\r\nvar menuStates = {\r\n\t\"show\": function () {\r\n\t\tconsole.log(\"the menu is showing\");\r\n\t},\r\n\t\"hide\": function () {\r\n\t\tconsole.log(\"the menu is hiding\");\r\n\t}\r\n};\r\n\r\nvar menu = new Menu();\r\nmenu.toggle(menuStates.show);\r\nmenu.toggle(menuStates.hide);\r\n\r\n```\r\n\r\n## 享元模式\r\n\r\n```javascript\r\n// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html\r\n\r\n// 定义：享元模式是一种用于性能优化的模式，如果系统中因为创建了大量类似的对象而导致内存不足或占用过高这种模式就非常有用了。\r\n\r\n// 定义塑料模特的构造函数\r\nvar Model = function (sex) {\r\n\tthis.sex = sex;\r\n}\r\n// 为模特拍照\r\nModel.prototype.takePhoto = function () {\r\n\tconsole.log('sex=' + this.sex + 'underwear=' + this.underwear )\r\n}\r\n// 实例化一个男模特 和 一个女模特\r\nvar maleModel = new Model('male');\r\nlet female    = new Model('female');    \r\nfor (var i = 1; i <=50; i++){\r\n\t// 分别为模特换上 50 件内衣 以及 照相\r\n\tmaleModel.underwear = 'underwear' + i;\r\n\tmaleModel.takePhoto();\r\n}\r\nfor (var i = 1; i <=50; i++){\r\n\t// 分别为模特换上 50 件内衣 以及 照相\r\n\tfemale.underwear = 'underwear' + i;\r\n\tfemale.takePhoto();\r\n}\r\n\r\n\r\n\r\n\r\nlet toolTipFactory = (function() {\r\n  let tooplTipPool = []\r\n  return {\r\n    create: function() {\r\n      if (tooplTipPool.length === 0) {\r\n        console.log(1)\r\n        let div = document.createElement('div')\r\n        document.body.appendChild(div)\r\n        return div\r\n      } else {\r\n        console.log(2)\r\n        return tooplTipPool.shift()\r\n      }\r\n    },\r\n    recover: function(tooltipDOm) {\r\n      tooplTipPool.push(tooltipDOm)\r\n    }\r\n  }\r\n})()\r\n\r\n// 2\r\nlet arr = []\r\nfor (let i = 0, str; str = ['a', 'b'][i++];) {\r\n  let toolTip = toolTipFactory.create()\r\n  toolTip.innerHTML = str\r\n  arr.push(toolTip)\r\n}\r\n\r\n\r\nfor (let i = 0, toolTip; toolTip = arr[i++];) {\r\n  toolTipFactory.recover(toolTip)\r\n}\r\n\r\n// 11\r\n// 22\r\n// 1111\r\nfor (let i = 0, str; str = ['a', 'b', 'c', 'd', 'e', 'f'][i++];) {\r\n  let toolTip = toolTipFactory.create()\r\n  toolTip.innerHTML = str\r\n}\r\n```\r\n\r\n","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<p>2020-02-26 23:57:00</p>\n<p>第一次学习设计模式 <a href=\"https://github.com/xiaotiandada/javaScript-design-patterns\">repo 所有的代码都在这儿啦!</a></p>\n<!-- more --> \n\n<h2 id=\"工厂模式\">工厂模式</h2>\n<p><strong>相关资料:</strong></p>\n<p><a href=\"https://juejin.im/post/5c984610e51d45656702a785\">JavaScript设计模式总结</a></p>\n<p><a href=\"https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html\">js设计模式-工厂模式</a></p>\n<p><strong>创建三个角色然后随机决斗⚔️</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'工厂模式'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 攻击力1-100</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">attackPower</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 战士</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Warrior</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>occupation <span class=\"token operator\">=</span> <span class=\"token string\">'战士'</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>skill <span class=\"token operator\">=</span> <span class=\"token string\">'单一狂砍'</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>blood <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hit <span class=\"token operator\">=</span> <span class=\"token function\">attackPower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// other</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 法师</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Mage</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>occupation <span class=\"token operator\">=</span> <span class=\"token string\">'法师'</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>skill <span class=\"token operator\">=</span> <span class=\"token string\">'集体冰冻'</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>blood <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hit <span class=\"token operator\">=</span> <span class=\"token function\">attackPower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 射手</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Archer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>occupation <span class=\"token operator\">=</span> <span class=\"token string\">'射手'</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>skill <span class=\"token operator\">=</span> <span class=\"token string\">'全局轰炸'</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>blood <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hit <span class=\"token operator\">=</span> <span class=\"token function\">attackPower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 工厂对象</span>\n<span class=\"token comment\">// class、function、object</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RoleFactory</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">createRole</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">role</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> roles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">Warrior</span><span class=\"token operator\">:</span> Warrior<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">Mage</span><span class=\"token operator\">:</span> Mage<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">Archer</span><span class=\"token operator\">:</span> Archer\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> Character <span class=\"token operator\">=</span> roles<span class=\"token punctuation\">[</span>role<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> role <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Warrior</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 创建角色</span>\n<span class=\"token keyword\">let</span> roleFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RoleFactory</span>\n<span class=\"token keyword\">let</span> warrior <span class=\"token operator\">=</span> roleFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Warrior'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> mage <span class=\"token operator\">=</span> roleFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mage'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> archer <span class=\"token operator\">=</span> roleFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Archer'</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'warrior:'</span><span class=\"token punctuation\">,</span> warrior<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mage:'</span><span class=\"token punctuation\">,</span> mage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'archer:'</span><span class=\"token punctuation\">,</span> archer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'----------'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 随机角色</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">randomRole</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>number<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n  <span class=\"token keyword\">let</span> randomRole <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sub <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> data<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">)</span>\n    randomRole<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> randomRole\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 战斗</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">duel</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">roles</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 最强角色</span>\n  <span class=\"token keyword\">let</span> maxRole <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token comment\">// 最高攻击力</span>\n  <span class=\"token keyword\">let</span> maxHit <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  roles<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 如果攻击力大于最大攻击力</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>hit <span class=\"token operator\">></span> maxHit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 设置当前角色</span>\n      maxRole <span class=\"token operator\">=</span> item\n      <span class=\"token comment\">// 攻击力也替换</span>\n      maxHit <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>hit\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>hit <span class=\"token operator\">===</span> maxHit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 清空</span>\n      maxRole <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n      maxHit <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> maxRole\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> fn<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> winner <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>duel<span class=\"token punctuation\">,</span> randomRole<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>warrior<span class=\"token punctuation\">,</span> mage<span class=\"token punctuation\">,</span> archer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>winner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">胜利者是: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>winner<span class=\"token punctuation\">.</span>occupation<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 他的技能是: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>winner<span class=\"token punctuation\">.</span>skill<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 攻击力: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>winner<span class=\"token punctuation\">.</span>hit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">这是平局</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre><p><strong>输出</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\">工厂模式\n<span class=\"token literal-property property\">warrior</span><span class=\"token operator\">:</span> Warrior <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">occupation</span><span class=\"token operator\">:</span> <span class=\"token string\">'战士'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">skill</span><span class=\"token operator\">:</span> <span class=\"token string\">'单一狂砍'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">blood</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">hit</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token literal-property property\">mage</span><span class=\"token operator\">:</span> Mage <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">occupation</span><span class=\"token operator\">:</span> <span class=\"token string\">'法师'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">skill</span><span class=\"token operator\">:</span> <span class=\"token string\">'集体冰冻'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">blood</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">hit</span><span class=\"token operator\">:</span> <span class=\"token number\">39</span> <span class=\"token punctuation\">}</span>\n<span class=\"token literal-property property\">archer</span><span class=\"token operator\">:</span> Archer <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">occupation</span><span class=\"token operator\">:</span> <span class=\"token string\">'射手'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">skill</span><span class=\"token operator\">:</span> <span class=\"token string\">'全局轰炸'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">blood</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">hit</span><span class=\"token operator\">:</span> <span class=\"token number\">33</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\nWarrior <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">occupation</span><span class=\"token operator\">:</span> <span class=\"token string\">'战士'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">skill</span><span class=\"token operator\">:</span> <span class=\"token string\">'单一狂砍'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">blood</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">hit</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\nMage <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">occupation</span><span class=\"token operator\">:</span> <span class=\"token string\">'法师'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">skill</span><span class=\"token operator\">:</span> <span class=\"token string\">'集体冰冻'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">blood</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">hit</span><span class=\"token operator\">:</span> <span class=\"token number\">39</span> <span class=\"token punctuation\">}</span>\n<span class=\"token literal-property property\">胜利者是</span><span class=\"token operator\">:</span> 法师<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">他的技能是</span><span class=\"token operator\">:</span> 集体冰冻<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">攻击力</span><span class=\"token operator\">:</span> <span class=\"token number\">39</span></code></pre><p>因为<strong>第一次</strong>学习 还不太知道具体的<strong>优点和好处</strong> 也没办法<strong>口喷</strong> 所以暂时留个坑给自己 下次更加了解之后回来<strong>填坑</strong> 🍑</p>\n<h2 id=\"单例模式\">单例模式</h2>\n<p><a href=\"https://juejin.im/post/5c984610e51d45656702a785\">https://juejin.im/post/5c984610e51d45656702a785</a></p>\n<p><a href=\"https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html\">https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html</a></p>\n<blockquote>\n<p>定义：单例就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。 -- 复制的</p>\n</blockquote>\n<p>我的理解为一个类仅有一个实例, 并且全局访问都是相同的实例</p>\n<p>建议先看完上面文章的单例模块, 我觉得他们总结得比我要好</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 登录框</span>\n<span class=\"token comment\">/**\n* 我这里单击按钮🔘显示登录框, 并且自身设置关闭事件 只是隐藏\n* 在下一次显示登录框的时候不会创建 而是直接展示 因为单例模式\n* 登录框已经创建了 所以直接返回了对象 然后展示\n*/</span>\n<span class=\"token keyword\">const</span> loginBox <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> div\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>div<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n      div<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        div<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'none'</span>\n      <span class=\"token punctuation\">}</span>\n      div<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'登录 hhhh (单击我隐藏)'</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> div\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> loginbox <span class=\"token operator\">=</span> <span class=\"token function\">loginBox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  loginbox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span>\n<span class=\"token punctuation\">}</span></code></pre><p>这只是一个简单的示范... 🍑</p>\n<h2 id=\"装饰器模式\">装饰器模式</h2>\n<p><a href=\"https://juejin.im/post/5c984610e51d45656702a785\">https://juejin.im/post/5c984610e51d45656702a785</a></p>\n<blockquote>\n<p>在不改变对象自身的基础上，动态的给某个对象添加新的功能，同时又不改变其接口</p>\n</blockquote>\n<p><a href=\"https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.html\">https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.html</a></p>\n<blockquote>\n<p>定义：装饰者(decorator)模式能够在不改变对象自身的基础上，在程序运行期间给对象动态的添加职责。</p>\n<p>这样给对象动态的增加职责的方式就没有改变对象自身，一个对象放入另一个对象就形成了一条装饰链（一个聚合对象）， 而上面的shot和track也就是装饰者、装饰函数 ，当函数执行时，会把请求转给链中的下一个对象。</p>\n</blockquote>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Plane</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发射普通子弹'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Missile</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">plane</span><span class=\"token operator\">:</span> any\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">plane</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>plane <span class=\"token operator\">=</span> plane\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">fire</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>plane<span class=\"token punctuation\">.</span><span class=\"token function\">fire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发射导弹'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> plane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Plane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  plane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Missile</span><span class=\"token punctuation\">(</span>plane<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>plane<span class=\"token punctuation\">.</span><span class=\"token function\">fire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 利用AOP给函数动态添加功能，即Function的after或者before</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">before</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">_this</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">after</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">_this</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> ret\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  func <span class=\"token operator\">=</span> func<span class=\"token punctuation\">.</span><span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 利用装饰器</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Func</span> <span class=\"token punctuation\">{</span>\n    @func2\n    @func1\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> func <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  func<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 封装成函数</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">before</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> before</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">before</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">after</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> after</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">after</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> ret\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token number\">2</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n\n  <span class=\"token function\">before</span><span class=\"token punctuation\">(</span>func1<span class=\"token punctuation\">,</span> func2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">after</span><span class=\"token punctuation\">(</span>func1<span class=\"token punctuation\">,</span> func2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre><p>核心就在<code>after</code> <code>before</code> 了</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">handwashing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'洗手'</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">drink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'喝水'</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'吃饭'</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n\n\n <span class=\"token function\">before</span><span class=\"token punctuation\">(</span>eat<span class=\"token punctuation\">,</span> handwashing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token function\">after</span><span class=\"token punctuation\">(</span>eat<span class=\"token punctuation\">,</span> drink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// 吃饭前洗手</span>\n <span class=\"token comment\">// 吃饭后喝水</span>\n<span class=\"token punctuation\">}</span></code></pre><p>比较基础的演示了 :)</p>\n<h2 id=\"代理模式\">代理模式</h2>\n<blockquote>\n<p>为一个对象提供一个代用品或占位符，以便控制对它的访问。</p>\n</blockquote>\n<p><a href=\"https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html\">https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 缓存代理</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mult</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">*=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">plus</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">+=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createProxyFactory</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 保存计算结果</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args <span class=\"token keyword\">in</span> cache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> proxyMult <span class=\"token operator\">=</span> <span class=\"token function\">createProxyFactory</span><span class=\"token punctuation\">(</span>mult<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> proxyPlus <span class=\"token operator\">=</span> <span class=\"token function\">createProxyFactory</span><span class=\"token punctuation\">(</span>plus<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">proxyMult</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">proxyPlus</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre><blockquote>\n<p>这里每次进行同类的计算时（乘法和加法两类），先判断缓存对象cache中是否存在该参数连接成的字符串作为key的属性。\n如果有，则直接从cache中读取，否则就进行计算并保存其结果。</p>\n</blockquote>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 虚拟代理</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sleep</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">time</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> imgFunc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> imgNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>imgNode<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setSrc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      imgNode<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">const</span> proxyImage <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    imgFunc<span class=\"token punctuation\">.</span><span class=\"token function\">setSrc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setSrc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      imgFunc<span class=\"token punctuation\">.</span><span class=\"token function\">setSrc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=766379944,3048822499&amp;fm=26&amp;gp=0.jpg'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 模拟加载时间</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nproxyImage<span class=\"token punctuation\">.</span><span class=\"token function\">setSrc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://t8.baidu.com/it/u=1484500186,1503043093&amp;fm=79&amp;app=86&amp;f=JPEG?w=1280&amp;h=853'</span><span class=\"token punctuation\">)</span></code></pre><blockquote>\n<p>图片懒加载的方式：先通过一张loading图占位，然后通过异步的方式加载图片，等图片加载好了再把完成的图片加载到img标签里面。</p>\n</blockquote>\n<h2 id=\"策略模式\">策略模式</h2>\n<p><a href=\"https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html\">https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html</a></p>\n<blockquote>\n<p> 定义：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</p>\n</blockquote>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> strategy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">4</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>strategy<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">returnMoney</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> salary</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> strategy<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">returnMoney</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">returnMoney</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">returnMoney</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre><p>简单的使用</p>\n<p>ps: 策略模式指的是定义一系列的算法，把它们一个个封装起来，将不变的部分和变化的部分隔开，\n实际就是将算法的使用和实现分离出来；</p>\n<p><strong>表单验证</strong></p>\n<p>我在原有的code上加了一个方法(错误展示, 比较基础所以很多地方没有考虑到)</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"策略模式\" src=\"https://codepen.io/xiaotiandada/embed/xxZOBvG?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/xiaotiandada/pen/xxZOBvG'>策略模式</a> by xiaotiandada\n  (<a href='https://codepen.io/xiaotiandada'>@xiaotiandada</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n\n\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- ... --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.error-msg</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>registerForm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>用户名<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>密码<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>手机号码<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>phoneNumber<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>submit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- ... --></span></code></pre><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 这里我们实现一组策略类封装具体的验证规则</span>\n<span class=\"token keyword\">const</span> strategyForm <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 是否为空</span>\n    <span class=\"token function\">isNotEmpty</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> errorMsg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> errorMsg<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 最小长度</span>\n    <span class=\"token function\">minLength</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> errorMsg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> errorMsg<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 手机号码格式</span>\n    <span class=\"token function\">mobileFormat</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>errorMsg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(^1[3|5|8][0-9]{9}$)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> errorMsg<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>strategyForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Validator</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Validator</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dom<span class=\"token punctuation\">,</span> rules</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> slef <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token comment\">// 添加错误信息提示</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addErrorMsg</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">,</span> dom<span class=\"token punctuation\">,</span> errorMsg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果有错误信息</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 如果已经有了错误提示</span>\n            <span class=\"token keyword\">let</span> errorMsgDom <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.error-msg'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorMsgDom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                errorMsgDom<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> errorMsg\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 没有提示创建</span>\n                <span class=\"token keyword\">let</span> errorHtml <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span>\n                errorHtml<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'error-msg'</span>\n                errorHtml<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> errorMsg\n                dom<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>errorHtml<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 没有错误提示</span>\n            <span class=\"token comment\">// 如果有错误提示但是tag还存在则清除</span>\n            <span class=\"token keyword\">let</span> errorMsgDom <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.error-msg'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorMsgDom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                errorMsgDom<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rule<span class=\"token punctuation\">;</span> rule <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rule</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> strategyArr <span class=\"token operator\">=</span> rule<span class=\"token punctuation\">.</span>strategy<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">let</span> errorMsg <span class=\"token operator\">=</span> rule<span class=\"token punctuation\">.</span>errorMsg\n\n            slef<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> strategy <span class=\"token operator\">=</span> strategyArr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 取第一个 策略名</span>\n                strategyArr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n                strategyArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>errorMsg<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> strategyForm<span class=\"token punctuation\">[</span>strategy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> strategyArr<span class=\"token punctuation\">)</span>\n                <span class=\"token function\">addErrorMsg</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> dom<span class=\"token punctuation\">,</span> errorMsg<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> msg\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Validator</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">start</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> validatorFunc<span class=\"token punctuation\">;</span> validatorFunc <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token function\">validatorFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> msg\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> registerForm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerForm'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">validateFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> validator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Validator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    validator<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>registerForm<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">strategy</span><span class=\"token operator\">:</span> <span class=\"token string\">'isNotEmpty'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">errorMsg</span><span class=\"token operator\">:</span> <span class=\"token string\">'用户名不能为空'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">strategy</span><span class=\"token operator\">:</span> <span class=\"token string\">'minLength:6'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">errorMsg</span><span class=\"token operator\">:</span> <span class=\"token string\">'用户名长度不能小于6位'</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    validator<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>registerForm<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">strategy</span><span class=\"token operator\">:</span> <span class=\"token string\">'minLength:6'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">errorMsg</span><span class=\"token operator\">:</span><span class=\"token string\">'密码长度不能小于6位'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    validator<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>registerForm<span class=\"token punctuation\">.</span>phoneNumber<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">strategy</span><span class=\"token operator\">:</span> <span class=\"token string\">'mobileFormat'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">errorMsg</span><span class=\"token operator\">:</span><span class=\"token string\">'手机号格式不正确'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> errorMsg <span class=\"token operator\">=</span> validator<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> errorMsg\n<span class=\"token punctuation\">}</span>\n\nregisterForm<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsubmit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> errorMsg <span class=\"token operator\">=</span> <span class=\"token function\">validateFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorMsg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>errorMsg<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre><h2 id=\"中介者模式\">中介者模式</h2>\n<p><a href=\"https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html\">https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html</a></p>\n<p>定义：中介者模式的作用就是解除对象与对象之间的紧耦合关系</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// MVC 模式</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">M</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">V</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token constant\">M</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span>\n<span class=\"token constant\">V</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">M</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// alert(M.data)</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token constant\">C</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handleOnload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">V</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token constant\">M</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\nwindow<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">.</span>handleOnload</code></pre><iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"中介者模式\" src=\"https://codepen.io/xiaotiandada/embed/abdBOvp?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/xiaotiandada/pen/abdBOvp'>中介者模式</a> by xiaotiandada\n  (<a href='https://codepen.io/xiaotiandada'>@xiaotiandada</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectPhone<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>选择手机颜色<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>colorSelect<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>请选择<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>红色<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>蓝色<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>选择内存<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>memorySelect<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>请选择<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16G<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>16G<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>32G<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>32G<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>输入购买数量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>numberInput<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    您选择了颜色: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>colorInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span>\n    您选择了内存: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>memoryInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span>\n    您输入了数量: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>numberInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nextBtn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>请选择手机颜色和购买数量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> goods <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token string-property property\">\"red|32G\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"red|16G\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"blue|32G\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"blue|16G\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 获得所有节点的引用，以便对其进行操作（中介者必许获得对其他对象的引用）</span>\n<span class=\"token keyword\">let</span> colorSelect <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'colorSelect'</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> memorySelect <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'memorySelect'</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> numberInput <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'numberInput'</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> colorInfo <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'colorInfo'</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> memoryInfo <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'memoryInfo'</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> numberInfo <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'numberInfo'</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> nextBtn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'nextBtn'</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> mediator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">changed</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> color <span class=\"token operator\">=</span> colorSelect<span class=\"token punctuation\">.</span>value <span class=\"token comment\">// 颜色</span>\n            <span class=\"token keyword\">let</span> memory <span class=\"token operator\">=</span> memorySelect<span class=\"token punctuation\">.</span>value<span class=\"token comment\">// 内存</span>\n            <span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> numberInput<span class=\"token punctuation\">.</span>value <span class=\"token comment\">// 数量</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> colorSelect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                colorInfo<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> color\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> memorySelect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                memoryInfo<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> memory\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> numberInput<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                numberInfo<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> number\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nextBtn<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n                nextBtn<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'请选择手机颜色'</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>memory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nextBtn<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n                nextBtn<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'请选择内存大小'</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">-</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span> <span class=\"token operator\">!==</span> number <span class=\"token operator\">-</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nextBtn<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n                nextBtn<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'请输入正确的购买数量'</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span>\n\n            nextBtn<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            nextBtn<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'放入购物车'</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">// 与中介者联系起来，事件函数</span>\ncolorSelect<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    mediator<span class=\"token punctuation\">.</span><span class=\"token function\">changed</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmemorySelect<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    mediator<span class=\"token punctuation\">.</span><span class=\"token function\">changed</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nnumberInput<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    mediator<span class=\"token punctuation\">.</span><span class=\"token function\">changed</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><h2 id=\"发布订阅模式\">发布订阅模式</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.html</span>\n\n<span class=\"token comment\">// 对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。</span>\n\n<span class=\"token keyword\">const</span> Event <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 缓存列表</span>\n  <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 监听函数</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">listen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 触发监听</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">trigger</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> fns <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fns <span class=\"token operator\">||</span> fns<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">;</span> fn <span class=\"token operator\">=</span> fns<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 移除监听函数</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> fns <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fns<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      fns <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>fns<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> fns<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> _fn <span class=\"token operator\">=</span> fns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_fn <span class=\"token operator\">===</span> fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          fns<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    listen<span class=\"token punctuation\">,</span>\n    trigger<span class=\"token punctuation\">,</span>\n    remove\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">d1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d11111'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">d2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d22222'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">d3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d33333'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nEvent<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> d1<span class=\"token punctuation\">)</span>\nEvent<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span>\nEvent<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">)</span>\n\n\nEvent<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span><span class=\"token punctuation\">,</span> d1<span class=\"token punctuation\">)</span>\nEvent<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span><span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span>\nEvent<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span><span class=\"token punctuation\">,</span> d1<span class=\"token punctuation\">)</span>\nEvent<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span><span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">)</span>\n\nEvent<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'----'</span><span class=\"token punctuation\">)</span>\nEvent<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'----'</span><span class=\"token punctuation\">)</span>\nEvent<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">// d11111</span>\n<span class=\"token comment\">// d22222</span>\n<span class=\"token comment\">// d33333</span>\n<span class=\"token comment\">// ----</span>\n<span class=\"token comment\">// d22222</span>\n<span class=\"token comment\">// d33333</span>\n<span class=\"token comment\">// ----</span>\n<span class=\"token comment\">// d11111</span>\n<span class=\"token comment\">// d22222</span>\n<span class=\"token comment\">// d33333</span></code></pre><h2 id=\"迭代器模式\">迭代器模式</h2>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html</span>\n<span class=\"token comment\">// 定义：迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</span>\n\n<span class=\"token comment\">// 内部迭代器</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">each</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">+</span> <span class=\"token string\">' - '</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">+</span> <span class=\"token string\">' - '</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 外部迭代器</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Iterator</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">obj</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">next</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isDone</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> current <span class=\"token operator\">>=</span> obj<span class=\"token punctuation\">.</span>length\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCurrentItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    next<span class=\"token punctuation\">,</span>\n    isDone<span class=\"token punctuation\">,</span>\n    getCurrentItem\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">Iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">isDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">isDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token comment\">// 1 - 0</span>\n<span class=\"token comment\">// 2 - 1</span>\n<span class=\"token comment\">// 3 - 2</span>\n<span class=\"token comment\">// 4 - 3</span>\n<span class=\"token comment\">// 5 - 4</span>\n<span class=\"token comment\">// -----</span>\n<span class=\"token comment\">// 1 - 0</span>\n<span class=\"token comment\">// 2 - 1</span>\n<span class=\"token comment\">// 3 - 2</span>\n<span class=\"token comment\">// -----</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// false</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// 5</span>\n<span class=\"token comment\">// undefined</span>\n<span class=\"token comment\">// true</span></code></pre><h2 id=\"桥接模式\">桥接模式</h2>\n<p><a href=\"https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.html\">https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.html</a></p>\n<p>定义：桥接模式（Bridge）将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p>\n<h2 id=\"外观模式\">外观模式</h2>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>外观模式<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.html</span>\n<span class=\"token comment\">// https://natee.gitbooks.io/javascript-design-patterns/facade-pattern.html</span>\n<span class=\"token comment\">// 定义：外观模式（Facade）为子系统中的一组接口提供了一个一致的界面，此模块定义了一个高层接口，这个接口使得这一子系统更加容易使用。</span>\n\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addEvent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> ev<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>addEventListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    el<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>attachEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    el<span class=\"token punctuation\">.</span><span class=\"token function\">attachEvent</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">on</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ev<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    el<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">on</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ev<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fn\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 没测试</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">N</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token constant\">N</span><span class=\"token punctuation\">.</span>tools <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>stopPropagation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span>cancelBubble <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>preventDefault<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span>returnValue <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">stopEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setStyles</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elements<span class=\"token punctuation\">,</span> styles</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> property <span class=\"token keyword\">in</span> styles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> styles<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token string\">'150px'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'200px'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h2 id=\"访问者模式\">访问者模式</h2>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html</span>\n<span class=\"token comment\">// 没太理解...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Visitor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">visit</span>  <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ConceteElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ConceteElement<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ConceteElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">doSomething</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is a element'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">accept</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">visitor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> visitor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Visitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> conceteElement <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConceteElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconceteElement<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>visitor<span class=\"token punctuation\">)</span>\n</code></pre><h2 id=\"模版方法模式\">模版方法模式</h2>\n<p>定义：模板方法模式由二部分组成，第一部分是抽象父类，第二部分是具体实现的子类，一般的情况下是抽象父类封装了子类的算法框架，包括实现一些公共方法及封装子类中所有方法的执行顺序，子类可以继承这个父类，并且可以在子类中重写父类的方法，从而实现自己的业务逻辑。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html</span>\n\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ITInterview</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">ITInterview</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">writeTest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is a write test'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">ITInterview</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">technicalInterView</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is a technical interview'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">ITInterview</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">leader</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is a leader interview'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">ITInterview</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">waitNotice</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wait notice'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">ITInterview</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">init</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">technicalInterView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">leader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">waitNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> itInterview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ITInterview</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nitInterview<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">// baidu</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BaiDuITInterview</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">BaiDuITInterview</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ITInterview</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token class-name\">BaiDuITInterview</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">writeTest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is a baidu write test'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">BaiDuITInterview</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">technicalInterView</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is a baidu technical interview'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">const</span> baiduItInterview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BaiDuITInterview</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbaiduItInterview<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre><h2 id=\"组合模式\">组合模式</h2>\n<p>定义：组合模式（Composite）将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html</span>\n<span class=\"token comment\">// 定义：组合模式（Composite）将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。</span>\n\n\n<span class=\"token comment\">// 定义组合对象（文件夹）</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Folder</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Folder</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Folder</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">scan</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'开始文件扫描:'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> files <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">;</span> file <span class=\"token operator\">=</span> files<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        file<span class=\"token punctuation\">.</span><span class=\"token function\">scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token comment\">//定义叶子对象（文件）</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">File</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件下面不能再添加文件'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">scan</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'开始扫瞄：'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> folder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Folder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'前端学习'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> folder1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Folder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JS学习'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> folder2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Folder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JQ学习'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> file1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JS设计模式'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> file2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JQ实战'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> file3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">'前端性能'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfolder1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>file1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfolder2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>file2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfolder<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>folder1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfolder<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>folder2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfolder<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>file3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfolder<span class=\"token punctuation\">.</span><span class=\"token function\">scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 开始文件扫描:前端学习</span>\n<span class=\"token comment\">// 开始文件扫描:JS学习</span>\n<span class=\"token comment\">// 开始扫瞄：JS设计模式</span>\n<span class=\"token comment\">// 开始文件扫描:JQ学习</span>\n<span class=\"token comment\">// 开始扫瞄：JQ实战</span>\n<span class=\"token comment\">// 开始扫瞄：前端性能</span></code></pre><h2 id=\"备忘录模式\">备忘录模式</h2>\n<p>定义：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样就可以将该对象恢复到原先保存的状态</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.html</span>\n<span class=\"token comment\">// 定义：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样就可以将该对象恢复到原先保存的状态</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">page</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'page'</span><span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cache'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hi\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n\n      cache<span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre><h2 id=\"职责链模式\">职责链模式</h2>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.html</span>\n\n<span class=\"token comment\">// 定义：职责链模式（Chain of responsibility）是使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理他为止。职责链模式的名字非常形象，一系列可能会处理请求的对象被该连接成一条链，请求在这些对象之间依次传递，直到遇到一个可以处理它的对象，我们把这些对象成为链中的节点。</span>\n\n<span class=\"token comment\">// 500 元客户订单</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">order500</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">orderType<span class=\"token punctuation\">,</span> pay<span class=\"token punctuation\">,</span> stock</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>orderType <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> pay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'500 rmb deposit, get 100 coupon '</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'nextSuccessor'</span> <span class=\"token comment\">// unknow the next node but always pass to next.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 200 元客户订单</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">order200</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">orderType<span class=\"token punctuation\">,</span> pay<span class=\"token punctuation\">,</span> stock</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>orderType <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> pay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'200 rmb deposit , get 50 coupon'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'nextSuccessor'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 无预约客户订单</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">orderNormal</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">orderType<span class=\"token punctuation\">,</span> pay<span class=\"token punctuation\">,</span> stock</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stock <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'normal buy no coupon'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the stock lack'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Chain</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> fn\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>successor <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Chain</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setNextSuccessor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">successor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>successor <span class=\"token operator\">=</span> successor\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Chain</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">passRequest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> ret <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">===</span> <span class=\"token string\">'nextSuccessor'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>successor <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>successor<span class=\"token punctuation\">.</span><span class=\"token function\">passRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>successor<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> ret\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\">// 现在我们把3个订单函数分别包装成职责链的节点</span>\n<span class=\"token keyword\">var</span> chainOrder500 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chain</span><span class=\"token punctuation\">(</span>order500<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> chainOrder200 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chain</span><span class=\"token punctuation\">(</span>order200<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> chainOrderNormal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chain</span><span class=\"token punctuation\">(</span>orderNormal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 这里我们把上面封装的节点连成一条线，依次判断执行</span>\nchainOrder500<span class=\"token punctuation\">.</span><span class=\"token function\">setNextSuccessor</span><span class=\"token punctuation\">(</span>chainOrder200<span class=\"token punctuation\">)</span>\nchainOrder200<span class=\"token punctuation\">.</span><span class=\"token function\">setNextSuccessor</span><span class=\"token punctuation\">(</span>chainOrderNormal<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 测试代码</span>\nchainOrder500<span class=\"token punctuation\">.</span><span class=\"token function\">passRequest</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 500 rmb deposit, get 100 coupon</span>\nchainOrder500<span class=\"token punctuation\">.</span><span class=\"token function\">passRequest</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 200 rmb deposit , get 50 coupon</span>\n\nchainOrderNormal<span class=\"token punctuation\">.</span><span class=\"token function\">passRequest</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 200 rmb deposit , get 50 coupon</span>\n</code></pre><h2 id=\"状态模式\">状态模式</h2>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html</span>\n<span class=\"token comment\">// 定义：状态模式（State）定义一个对象，这个对象可以通过管理其状态从而使得应用程序作出相应的变化。</span>\n\n<span class=\"token keyword\">var</span> trafficLight <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> currentLight <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">change</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">light</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            currentLight <span class=\"token operator\">=</span> light<span class=\"token punctuation\">;</span>\n            currentLight<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 红灯</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">RedLight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">RedLight</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">go</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is red light\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 绿灯</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">GreenLight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">GreenLight</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">go</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is green light\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 黄灯</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">YellowLight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">YellowLight</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">go</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is yellow light\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ntrafficLight<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RedLight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this is red light</span>\ntrafficLight<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">YellowLight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this is yellow light</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Menu</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> menuStates <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"show\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the menu is showing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"hide\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the menu is hiding\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> menu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmenu<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span>menuStates<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmenu<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span>menuStates<span class=\"token punctuation\">.</span>hide<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h2 id=\"享元模式\">享元模式</h2>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// https://fanerge.github.io/2017/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html</span>\n\n<span class=\"token comment\">// 定义：享元模式是一种用于性能优化的模式，如果系统中因为创建了大量类似的对象而导致内存不足或占用过高这种模式就非常有用了。</span>\n\n<span class=\"token comment\">// 定义塑料模特的构造函数</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Model</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">sex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 为模特拍照</span>\n<span class=\"token class-name\">Model</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">takePhoto</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sex='</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">+</span> <span class=\"token string\">'underwear='</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>underwear <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 实例化一个男模特 和 一个女模特</span>\n<span class=\"token keyword\">var</span> maleModel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> female    <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'female'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span><span class=\"token number\">50</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 分别为模特换上 50 件内衣 以及 照相</span>\n    maleModel<span class=\"token punctuation\">.</span>underwear <span class=\"token operator\">=</span> <span class=\"token string\">'underwear'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n    maleModel<span class=\"token punctuation\">.</span><span class=\"token function\">takePhoto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span><span class=\"token number\">50</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 分别为模特换上 50 件内衣 以及 照相</span>\n    female<span class=\"token punctuation\">.</span>underwear <span class=\"token operator\">=</span> <span class=\"token string\">'underwear'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n    female<span class=\"token punctuation\">.</span><span class=\"token function\">takePhoto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n\n<span class=\"token keyword\">let</span> toolTipFactory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> tooplTipPool <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">create</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tooplTipPool<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n        document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> div\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> tooplTipPool<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">recover</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tooltipDOm</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      tooplTipPool<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tooltipDOm<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 2</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">;</span> str <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> toolTip <span class=\"token operator\">=</span> toolTipFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  toolTip<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> str\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>toolTip<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> toolTip<span class=\"token punctuation\">;</span> toolTip <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  toolTipFactory<span class=\"token punctuation\">.</span><span class=\"token function\">recover</span><span class=\"token punctuation\">(</span>toolTip<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 11</span>\n<span class=\"token comment\">// 22</span>\n<span class=\"token comment\">// 1111</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">;</span> str <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> toolTip <span class=\"token operator\">=</span> toolTipFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  toolTip<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> str\n<span class=\"token punctuation\">}</span></code></pre>","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}