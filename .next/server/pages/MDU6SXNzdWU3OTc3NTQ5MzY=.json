{"pageProps":{"post":{"id":"MDU6SXNzdWU3OTc3NTQ5MzY=","url":"https://github.com/xiaotiandada/blog/issues/68","title":"前端总结","updatedAt":"2021-06-02T18:28:40Z","createdAt":"2021-01-31T16:46:49Z","body":"1. [2018前端面试总结](https://juejin.cn/post/6844903673009553416#heading-59)\r\n2. [每天 30 秒系列之前端面试](https://ld246.com/article/1544793046274)\r\n3. [2万5千字大厂面经 | 掘金技术征文](https://juejin.cn/post/6844903682455109640)\r\n\r\n## HTML\r\n\r\n### 图片标签中的 alt 有什么作用？\r\n\r\n1. 当图片无法加载的时候， alt 的属性值会以文字的形式替代图片显示。alt 属性是用来描述图片内容的，当图片作为背景等装饰时，alt 属性应该为空。\r\n2. 装饰作用的图片 alt 属性应该为空\r\n3. 网站爬虫根据其属性值来理解图片的内容，因此 alt 属性对 SEO（搜索引擎优化） 来说非常重要\r\n4. alt 值应以句号结尾，以提高可访问性\r\n5. 网速过慢导致图片加载需较长一段时间时，在图片加载完成之前，会显示 alt 属性值来替代图片。\r\n\r\n### 简述 `<script>` 标签中的 defer 和 async 属性\r\n\r\n1. 如果两个属性都没有（默认行为），脚本的下载和执行将会按照文档的先后顺序同步进行。当脚本下载和执行的时候，文档解析就会被阻塞，在脚本下载和执行完成之后文档才能往下继续进行解析。\r\n\r\n2. `defer` 属性表示脚本按顺序被解析到时就开始下载，下载过程中文档继续进行解析，当文档全部解析完成之后便开始执行下载好的脚本，这相当于在 `DOMContentLoaded` 的监听事件内进行执行。虽然 `defer` 属性的脚本需要等到文档解析完才开始执行，但其执行是有顺序的。\r\n\r\n3. `async` 属性表示脚本按顺序被解析到时就开始下载，下载过程中文档继续进行解析，当下载完成后文档停止解析开始执行下载好的脚本，脚本执行完后继续解析文档。`async` 脚本由于网络等的影响将不会按照顺序执行。\r\n\r\n```javascript\r\n<script src=\"myscript.js\"></script>\r\n<script src=\"myscript.js\" defer></script>\r\n<script src=\"myscript.js\" async></script> \r\n```\r\n\r\n4. 把带 `defer` 属性的脚本放在 `<head>` 中比无属性的脚本放在 `</body>` 之前要更好，因为浏览器在页面解析时可对带 `defer` 属性的脚本进行下载。\r\n5. 如果脚本相互依赖，请使用 `defer`。\r\n6. 如果脚本是独立的，请使用 `async`。\r\n7. 如果 DOM 必须解析好才执行且执行函数没有放在 `DOMContentLoaded` 的监听器中，请使用 `defer`。\r\n\r\n### 什么是 DOM？\r\n\r\nDOM（文档对象模型）是可扩展标记语言的标准编程接口，用来处理如 HTML 或 XML 这样由节点组成的树形结构的标记语言。这些节点（例如元素和文本节点）都是能够被编程接口操作的对象，他们任何可见的改变都会在文档中实时反映出来。在浏览器中，这些接口可供 JavaScript 进行使用，使其操作 DOM 节点来改变他们的样式、内容、在文档中的位置或者通过事件监听器来进行交互。\r\n\r\n1. DOM 的设计与特定的编程语言相独立，以便使文档的结构化表述可以通过单一、一致的 API 获得。\r\n2. 随着页面的加载，DOM 在浏览器中是逐步构建的，因此脚本通常放在页面底部，或设置 `defer` 属性后置于 `<head>` 中，或放在 `DOMContentLoaded` 事件监听器内部。为了避免错误，脚本对 DOM 节点的操作应该放在 DOM 完成构建之后。\r\n3. `document.getElementById()` 和 `document.querySelector()` 是用来选择 DOM 节点的常用方法。\r\n4. `BOM` 主要处理浏览器窗口和框架，不过通常浏览器特定的 `JavaScript` 扩展都被看做 BOM 的一部分。`window` 对象的属性和方法通常被称为 `BOM`。`DOM` 描述了处理网页内容的方法和接口，`BOM` 描述了与浏览器进行交互的方法和接口。\r\n\r\n### XHTML 和 HTML 有什么不同?\r\n\r\n1. XHTML 是更严格更纯净的 HTML 代码，他必须包含 `<DOCTYPE>`\r\n2. XHTML 属性值必须使用双引号扩起来\r\n3. XHTML 属性值不能省略。如 `checked=\"checked\"` 不能简写为 `checked`\r\n4. XHTML 元素必须被正确地嵌套。\r\n5. XHTML 元素必须被关闭 如 `<br>` 必须写为 `<br />`\r\n6. XHTML 标签名必须使用小写字母\r\n7. XHTML 文档必须拥有根元素\r\n8. XHTML 中特殊字符必须转译\r\n9. 不同的浏览器对 HTML 标签嵌套错误的兼融性处理存在一定的区别。当嵌套错误时，可能会导致在某些浏览器上依旧能正常显示，而某些浏览器上则显示错乱甚至出现 JavaScript 报错。\r\n\r\n### rel=\"noopener\"  应在什么场景下使用，为什么？\r\n\r\n1. `rel=\"noopener\"` 是 `<a>` 超链接标签的一个属性。他可以禁止打开的新页面中使用 `window.opener` 属性，这样一来打开的新页面就不能通过 `window.opener` 去操作你的页面, 否则就会导致严重的安全漏洞。\r\n2. 如果使用 JavaScript 打开的页面，可以通过如下代码解决：\r\n\r\n```\r\nvar hacpaiWindow = window.open('https://hacpai.com');\r\nhacpaiWindow.opener = null;\r\n```\r\n\r\n### 什么是 HTML5 存储？解释一下 `localStorage` 和 `sessionStorage`\r\n\r\n1. 页面可以在用户的浏览器中存储本地数据 这些数据以 key/value 的格式进行存储。\r\n2. 通过 `localStorage` 存储的数据是持久化的 不会过期，除非清除缓存。\r\n3. `sessionStorage` 存储数据的生命周期和顶层窗口或浏览器标签页的一样。当标签页被永久关闭，通过 `sessionStorage` 存储的数据也将被删除。同一个页面被浏览器的两个标签页打开，这两个标签页中的 `sessionStorage` 数据是互相独立的。\r\n4. 还有Cookie也可以存储数据\r\n5. localStorage 比 cookie 要大（5MB左右）\r\n\r\n### MIME type\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\r\n\r\n> 没用过...\r\n\r\n\r\n\r\n### 新标签兼容低版本\r\n\r\nie9之前版本通过createElement创建html5新标签\r\n引入html5shiv.js https://github.com/aFarkas/html5shiv\r\n\r\n## CSS\r\n\r\n### CSS盒模型\r\n\r\n```css\r\n/* 标准模型 */\r\nbox-sizing:content-box;\r\n /*IE模型*/\r\nbox-sizing:border-box;\r\n```\r\n\r\n盒模型分为IE盒模型和W3C标准盒模型。\r\nIE盒模型和W3C标准盒模型的区别是什么？\r\n\r\n1. W3C 标准盒模型：\r\n属性width,height只包含内容content，不包含border和padding。\r\n\r\n2. IE 盒模型：\r\n属性width,height包含border和padding，指的是content+padding+border。\r\n\r\n在ie8+浏览器中使用哪个盒模型可以由box-sizing(CSS新增的属性)控制，默认值为content-box，即标准盒模型；如果将box-sizing设为border-box则用的是IE盒模型。如果在ie6,7,8中DOCTYPE缺失会触发IE模式。在当前W3C标准中盒模型是可以通过box-sizing自由的进行切换的。\r\ncontent-box（标准盒模型）\r\nwidth = 内容的宽度\r\nheight = 内容的高度\r\nborder-box（IE盒模型）\r\nwidth = border + padding + 内容的宽度\r\nheight = border + padding + 内容的高度\r\n\r\n### BEM\r\n\r\nBEM（Block, Element, Modifier）是一种基于组件的对 CSS 类名进行约定的 Web 开发方法。\r\n\r\nhttps://www.w3cplus.com/css/css-architecture-1.html\r\n\r\nhttps://css-tricks.com/bem-101/\r\n\r\n### CSS 预处理器有什么优势？\r\n\r\nCSS 预处理器添加了一些实用的原生 CSS 没有的的功能，并且他通过使用 DRY（Don't Repeat Yourself）原则使生成的 CSS 更加整洁和易于维护\r\n\r\n- CSS 预处理器虽然允许我们编写易于维护和可扩展的 CSS，但需要安装、配置、编译等（一般项目都配置好了\r\n- CSS 预处理器还包含文件切分、模块化、运算、函数等优势\r\n- 目前主流的 CSS 预处理器有： [Sass](https://link.ld246.com/forward?goto=https%3A%2F%2Fsass-lang.com%2F)、[Less](https://link.ld246.com/forward?goto=http%3A%2F%2Flesscss.org%2F)、[Stylus](https://link.ld246.com/forward?goto=http%3A%2F%2Fstylus-lang.com%2F)\r\n- CSS 除了预处理器外还有后置处理器（Postprocessor），如：[Autoprefixer](https://link.ld246.com/forward?goto=https%3A%2F%2Fgithub.com%2Fpostcss%2Fautoprefixer) 等\r\n- CSS 变量虽然已被大多数浏览器支持，但语法及可用性都不如 CSS 预处理器。\r\n\r\n### 使用 flexbox，Create 3 Col 布局  col-{n} / 12 \r\n\r\n```html\r\n<style>\r\n  .row {\r\n    display: flex;\r\n  }\r\n  .row_col {\r\n    background-color: aqua;\r\n    height: 300px;\r\n    margin: 10px;\r\n    box-sizing: border-box;\r\n  }\r\n  .row_col-2 {\r\n    flex-grow: 2;\r\n  }\r\n  .row_col-4 {\r\n    flex-grow: 4;\r\n  }\r\n  .row_col-7 {\r\n    flex-grow: 7;\r\n  }\r\n</style>\r\n<div class=\"row\">\r\n  <div class=\"row_col row_col-2\"></div>\r\n  <div class=\"row_col row_col-7\"></div>\r\n  <div class=\"row_col row_col-4\"></div>\r\n</div>\r\n```\r\n\r\n### `@media`\r\n\r\n`@media` 是可根据一个或多个基于媒体特征、媒体类型等条件来使用样式的规则。其包含以下四种媒体类型：\r\n\r\n- `all`：适用于所有设备，默认选项\r\n- `print`：仅适用于打印设备\r\n- `screen`：仅适用于台式机、平板电脑、手机等屏幕\r\n- `speech`：仅适用于屏幕阅读器\r\n- 其余的媒体类型：`tty`，`tv`，`projection`，`handheld`，`braille`，`embossed`，`aural` 在 Media Queries Level 3 中已被废弃\r\n- 可以使用逻辑操作符（`,`，`only`，`and`，`not`）组合媒体类型\r\n- iPhone X 系列存在安全距离，其 @media 识别如下：(自己没有用过 一般只判断了底部的安全距离 [网页适配 iPhoneX](https://aotu.io/notes/2017/11/27/iphonex/index.html))\r\n\r\n```\r\n// iPhone XR 1792x828px at 326ppi\r\n@media only screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) {\r\n    ...\r\n}\r\n// iPhone XS 2436x1125px at 458ppi\r\n@media only screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) {\r\n    ...\r\n}\r\n// iPhone XS Max 2688x1242px at 458ppi\r\n@media only screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) {\r\n    ...\r\n}\r\n```\r\n\r\n```html\r\n<meta name=\"viewport\" content=\"width=device-width, viewport-fit=cover\">\r\n```\r\n\r\n```css\r\nbody {\r\n  padding-bottom: constant(safe-area-inset-bottom);\r\n  padding-bottom: env(safe-area-inset-bottom);\r\n}\r\n```\r\n\r\n### 描述 CSS 盒子模型布局并简要描述\r\n\r\nCSS 盒子模型（Box Model）布局包含内容（content）、内边距（padding）、边框（border）、外边距（margin）四个部分。\r\n\r\n- content：盒子内部填充元素内容（例如文本、图像或视频播放器等）的区域。他的大小为 `content-box` 的宽和高。相关 CSS 属性为 `width`，`min-width`，`max-width`，`height`，`min-height`，`max-height`。\r\n- padding：内容周围的区域。他的大小为 `padding-box` 的宽和高。由 CSS 中的 `padding` 属性控制。\r\n- border：边框，在内边距的外围。他的大小为 `border-box` 的宽和高。由 CSS 中的 `border` 属性控制。\r\n- margin：最外围的透明区域，即边框外围区域。他可以将 DOM 中相邻的元素分开。他的大小为 `margin-box` 的宽和高。由 CSS 中的 `margin` 属性控制。\r\n\r\n![alt text](https://img.hacpai.com/e/cf8a06004b444fb895eb315d78f46324.gif)\r\n\r\n- 标准盒模型：属性 width / height 只包含 content，不包含 border 和 padding\r\n- IE 盒模型：属性 width / height 包含 content + padding + border\r\n- IE6/7/8 中 DOCTYPE 缺失会触发 IE 盒模型，标准中可使用 `box-sizing` 属性进行控制：content-box | border-box | inherit\r\n- JavaScript 如何设置和获取盒模型对应的宽和高\r\n- `element.style.width / height` 只能取到行内样式的宽和高，style 标签中和 link 外链的样式无法获取\r\n- `window.getComputedStyle(element).width / height` 获取元素的宽或高：content + padding + border + 'px'\r\n- `dom.getBoundingClientRect().width / height` 同上，但返回值为数字类型，不含 `px`\r\n- 页面中多个元素的流布局属于格式化上下文（formatting context），这个元素可能是块元素也可能是行内元素。块元素的为 BFC（Block formatting contexts），行内元素的为 IFC（Inline formatting contexts）。常见场景如：垂直块元素 `margin` 重叠；行内元素高度由 `line-height` 决定等。\r\n\r\n### `em`  `rem` 区别\r\n\r\n`em` 和 `rem` 都是基于 `font-size` 的 CSS 属性。唯一的区别是他们继承的对象不同。\r\n\r\n- `em` 继承父元素中的 `font-size`\r\n- `rem` 继承根元素（`html`）中的 `font-size`\r\n- 在大多数浏览器中，根元素的 `font-size` 默认值为 `16px`\r\n\r\n**其他单位**\r\n\r\n- vh` 和 `vw`：窗口高度或宽度的 1/100。可脱离父元素的继承规则，如：窗口高 900px，父元素高 1200px，1vh 为 9px。`\r\n- `vmin` 和 `vmax`：窗口高、宽取其最大或最小的 1/100。主要用于手机屏幕旋转，如：窗口高 900px，宽 600px，1vmin 为 6px，1vmax 为 9px\r\n- ex` 和 `ch`：分别为小写 x 的高度和数字 0 的宽度。主要用于精细排版中。` (没用过)\r\n- `mm` 毫米、`cm` 厘米、`in` 英寸、`pt` 点（1/72 英寸）、`pc` 十二点活字（12 pt）。这些绝对单位之间的关系为：1in = 2.54cm = 25.4mm = 72pt = 6pc （没用过\r\n- px \r\n- % 百分比\r\n\r\n![imagepng](https://img.hacpai.com/file/2018/12/image-52a5242f.png?imageView2/2/interlace/1/format/webp)\r\n\r\n- 其中 `rem`、`em` 、`vh`、`vx`、`vmin`、`vmax`、`%` 通常用于自适应方案中\r\n- 移动端可采用 `viewport` 进行响应式设计 https://www.runoob.com/css/css-rwd-viewport.html\r\n\r\n### CSS sprites\r\n\r\n1. CSS sprites 将多张图片合并为一张图片，从而减少浏览器对 HTTP 的请求数量，进而减少网页的加载时间。即使在 HTTP/2 协议下，这依旧可以减少网页的加载时间。\r\n2. 在 HTTP/1.1 中，每个 TCP 连接只允许一个请求。现代浏览器虽然可以打开多个（2-8）并行的 TCP 连接，但连接数量依旧有限。\r\n3. HTTP/2 允许浏览器和服务器之间的多个请求在一个 TCP 连接上进行复用。 这意味着 TCP 连接被更有效的使用了：同一个页面在打开和关闭 TCP 连接的次数被减少了，客户端和服务器之间的延迟也被减少了。这样一来，数十个图片就可以在同一个 TCP 连接中并行加载了。\r\n4. 在 CSS 中使用 sprites 需要用到 CSS 中的 `background-image`、`background-position` 及 `background-size` 等属性\r\n\r\n### CSS 优先级\r\n\r\n**权重记忆口诀**：*从0开始，一个行内样式+1000，一个id选择器+100，一个属性选择器、class或者伪类+10，一个元素选择器，或者伪元素+1，通配符+0。*\r\n\r\nhttps://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity\r\n\r\nhttps://zhuanlan.zhihu.com/p/41604775\r\n\r\n## Javascript\r\n\r\n### JS中数据类型\r\n\r\n**基本数据类型**： undefined、null、Boolean、Number、String和Symbol(ES6)\r\n**引用数据类型**： Object(Array, Date, RegExp, Function)\r\n\r\n### 基本数据类型和引⽤类型在存储上的差别\r\n\r\n前者存储在栈上，后者存储在堆上(没太理解...)\r\n\r\n### `var`、`let`、`const` 和没有关键字的声明有什么区别？\r\n\r\n#### 无关键字\r\n\r\n在变量赋值之前如果没有关键字的话，则会把变量分配给全局变量或覆盖已经声明的变量。在非严格模式下将会把变量做为全局对象（浏览器中的 `window`）的一个属性。在严格模式下，他将抛出异常以防止创建不需要的全局变量。\r\n\r\n#### var\r\n\r\n`var` 是 ES2015 以前声明变量的默认语句。他在函数作用域内创建的变量可以在该作用域中被重新赋值和重新声明。\r\n\r\n以下代码片断中，在执行 `setTimeout` 回调时，循环完已经完成且变量 `i` 变为了 10，因此十个回调都引用了函数作用域中的同一个变量。\r\n\r\n```\r\nfor (var i = 0; i < 10; i++) {\r\n  setTimeout(() => {\r\n    console.log(i) // 10\r\n  })\r\n}\r\n```\r\n\r\n可以通过创建一个新的函数作用域来解决此问题\r\n\r\n```\r\nfor (var i = 0; i < 10; i++) {\r\n  ;(i => {\r\n    setTimeout(() => {\r\n      console.log(i)\r\n    })\r\n  })(i)\r\n} \r\n```\r\n\r\n#### let\r\n\r\n`let` 是在 ES2015 中引入的，他是一种可在变量声明后可再赋值的常用声明方式。再次声明相同的变量将会抛出异常。他是有块作用域的，因此在循环中使用时将会保持在同一个作用域下迭代。\r\n\r\n```\r\nfor (let i = 0; i < 10; i++) {\r\n  setTimeout(() => {\r\n    console.log(i) // 0 1 2...9\r\n  })\r\n} \r\n```\r\n\r\n#### const\r\n\r\n`const` 是在 ES2015 中引入的，他是一种新的默认的常用的声明方式。他声明的所有变量将不可再被重新赋值，如果是对象的话，必须保持对象的引用不变。他是块作用域的，且不能被再次赋值。\r\n\r\n```\r\nconst myObject = {}\r\nmyObject.prop = \"hello!\" \r\nmyObject = \"hello\" // Uncaught TypeError: Assignment to constant variable.\r\n```\r\n\r\n- 所有声明在其范围内都会被提升。\r\n- `let` 和 `const` 中有一个称为时间死区（temporal dead zone TDZ）的概念。虽然声明会被提升，但在进入作用域之后、声明之前他将无法被访问。\r\n- 尽可能避免使用 `var` 使用 ``let`` 代替\r\n-  `const` 声明不变常量 ``let`` 声明可变变量\r\n\r\n### 变量提升\r\n\r\n当执行 JS 代码时，会生成执行环境，只要代码不是写在函数中的，就是在全局执行环境中，函数中的代码会产生函数执行环境，只此两种执行环境。\r\n\r\n`var`\r\n\r\n```react\r\nb() // call b\r\nconsole.log(a) // undefined\r\n\r\nvar a = 'Hello world'\r\n\r\nfunction b() {\r\n    console.log('call b')\r\n}\r\n```\r\n\r\n因为函数和变量提升的原因。通常提升的解释是说将声明的代码移动到了顶部，这其实没有什么错误，便于大家理解。但是更准确的解释应该是：在生成执行环境时，会有两个阶段。第一个阶段是创建的阶段，JS 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，函数的话会将整个函数存入内存中，变量只声明并且赋值为 undefined，所以在第二个阶段，也就是代码执行阶段，我们可以直接提前使用。\r\n\r\n在提升的过程中，相同的函数会覆盖上一个函数，并且函数优先于变量提升\r\n\r\n```react\r\nb() // call b second\r\n\r\nfunction b() {\r\n    console.log('call b fist')\r\n}\r\nfunction b() {\r\n    console.log('call b second')\r\n}\r\nvar b = 'Hello world'\r\n```\r\n\r\n`var` 会产生很多错误，所以在 ES6中引入了 `let`。`let` 不能在声明前使用，但是这并不是常说的 `let` 不会提升，`let` 提升了，在第一阶段内存也已经为他开辟好了空间，但是因为这个声明的特性导致了并不能在声明前使用。\r\n\r\n### bind、call、apply 区别\r\n\r\n首先说下前两者的区别。\r\n\r\n`call` 和 `apply` 都是为了解决改变 `this` 的指向。作用都是相同的，只是传参的方式不同。\r\n\r\n除了第一个参数外，`call` 可以接收一个参数列表，`apply` 只接受一个参数数组。\r\n\r\n```javascript\r\nlet a = {\r\n    value: 1\r\n}\r\nfunction getValue(name, age) {\r\n    console.log(name)\r\n    console.log(age)\r\n    console.log(this.value)\r\n}\r\ngetValue.call(a, 'yck', '24')\r\ngetValue.apply(a, ['yck', '24'])\r\n\r\nlet getValueBind = getValue.bind(a)\r\ngetValueBind('yck', '25')\r\n```\r\n\r\n`bind` 和其他两个方法作用也是一致的，只是该方法会返回一个函数 [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind)。并且我们可以通过 `bind` 实现柯里化。\r\n\r\n**利用 bind 实现柯里化**\r\n\r\n[source](https://juejin.cn/post/6844903909723488264)\r\n\r\n```javascript\r\nfunction list() {\r\n  return Array.prototype.slice.call(arguments);\r\n}\r\n\r\nvar list1 = list(1, 2, 3); // [1, 2, 3]\r\n\r\nvar leadingThirtysevenList = list.bind(null, 37);\r\n\r\nvar list2 = leadingThirtysevenList(); \r\n// [37]\r\n\r\nvar list3 = leadingThirtysevenList(1, 2, 3); \r\n// [37, 1, 2, 3]\r\n\r\nconsole.log(list2, list3)\r\n```\r\n\r\n### 实现一个 bind 函数\r\n\r\n利用apply修改this绑定 简易实现 可以参考 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#polyfill)\r\n\r\n```javascript\r\nlet obj = {\r\n\ta: 1\r\n}\r\n\r\nFunction.prototype.myBind = function(context) {\r\n  if (typeof this !== 'function') {\r\n  \tthrow new TypeError('Error')\r\n  }\r\n\r\n  let _this = this\r\n  let args = [...arguments].slice(1)\r\n  \r\n  return function() {\r\n  \tlet argsSlice = [...arguments].slice()\r\n    return _this.apply(context, args.concat(argsSlice))\r\n  }\r\n}\r\n\r\n\r\nfunction log(b, c) {\r\n\tconsole.log(this.a, b, c)\r\n}\r\n\r\nconsole.log('------1------')\r\nlog('b1', 'c1')\r\n\r\nlet logBind = log.bind(obj)\r\nconsole.log('------2------')\r\nlogBind('b2', 'c2')\r\n\r\nlet logMyBind = log.myBind(obj)\r\nconsole.log('------3------')\r\nlogMyBind('b3', 'c3')\r\n\r\n\"------1------\"\r\nundefined, \"b1\", \"c1\"\r\n\"------2------\"\r\n1, \"b2\", \"c2\"\r\n\"------3------\"\r\n1, \"b3\", \"c3\"\r\n```\r\n\r\n### 实现一个 call 函数\r\n\r\n```javascript\r\nlet obj = {\r\n\ta: 1\r\n}\r\n\r\nFunction.prototype.myCall = function(context = window) {\r\n\tcontext.fn = this\r\n  let args = [...arguments].slice(1)\r\n  let result = context.fn(...args)\r\n  delete context.fn\r\n  return result\r\n}\r\n\r\nfunction log(b, c) {\r\n\tconsole.log(this.a, b, c)\r\n}\r\n\r\nlog.myCall(obj, 'b', 'c')\r\n\r\n// 1, \"b\", \"c\"\r\n```\r\n\r\nthis是 log fn，args  是后面的参数\r\n\r\n### 实现一个 apply 函数\r\n\r\n```javascript\r\nlet obj = {\r\n\ta: 1\r\n}\r\n\r\nFunction.prototype.myApply = function (context = window) {\r\n  context.fn = this\r\n\r\n  let result\r\n  if (arguments[1]) {\r\n    result = context.fn(...arguments[1])\r\n  } else {\r\n    result = context.fn()\r\n  }\r\n\r\n  delete context.fn\r\n  return result\r\n}\r\n\r\nfunction log(b, c) {\r\n\tconsole.log(this.a, b, c)\r\n}\r\n\r\nlog.myApply(obj, ['b', 'c'])\r\n\r\n// 1, \"b\", \"c\"\r\n```\r\n\r\n### 简单说下原型链\r\n\r\nhttps://github.com/KieSun/Dream/issues/2\r\n\r\n### 怎么判断对象类型\r\n\r\nhttps://www.cnblogs.com/onepixel/p/5126046.html\r\n\r\n- typeof typeof {} // \"object\"\r\n- instanceof new Object() instanceof Object // true\r\n- constructor ''.constructor == String // true\r\n- toString 可以通过 `Object.prototype.toString.call(xx)`。这样我们就可以获得类似 `[object Type]` 的字符串。 Object.prototype.toString.call({}) \"[object Object]\"\r\n\r\n### typeof\r\n\r\n以下代码的执行结果是什么？\r\n\r\n```javascript\r\ntypeof typeof 0 // string\r\n```\r\n\r\n`typeof 0` 返回字符串 `number`， 因此 `typeof 'number'` 的结果为 `string`。\r\n\r\n- `typeof` 可能的返回值\r\n\r\n| 类型      | 结果        |\r\n| --------- | ----------- |\r\n| undefined | `undefined` |\r\n| null      | `object`    |\r\n| boolean   | `boolean`   |\r\n| number    | `number`    |\r\n| string    | `string`    |\r\n| Symbol()  | `symbol`    |\r\n| 函数      | `function`  |\r\n| 其他对象  | `object`    |\r\n\r\n- 使用 `new` 关键字\r\n\r\n```javascript\r\nvar str = new String('String');\r\ntypeof str; // \"object\"\r\nvar func = new Function();\r\ntypeof func; // \"function\"\r\n```\r\n\r\n- 使用括号\r\n\r\n```javascript\r\ntypeof 11 + ' Wisen'; // \"number Wisen\"\r\ntypeof (11 + ' Wisen'); // \"string\"\r\n```\r\n\r\n- 未定义变量异常\r\n\r\n```javascript\r\ntypeof undeclaredVariable === 'undefined'; // true\r\ntypeof newLetVariable; let newLetVariable; // VM90195:1 Uncaught ReferenceError: newLetVariable is not defined\r\ntypeof newConstVariable; const newConstVariable = 'hello'; // VM90283:1 Uncaught ReferenceError: Cannot access 'newConstVariable' before initialization\r\n```\r\n\r\n- 特例\r\n\r\n```javascript\r\ntypeof document.all === 'undefined'; // true\r\n\r\ntypeof document.all // \"undefined\"\r\n```\r\n\r\n### 箭头函数的特点\r\n\r\n**箭头函数表达式**的语法比[函数表达式](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/function)更简洁，并且没有自己的`this` [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions) \r\n\r\n### This\r\n\r\n在绝大多数情况下，函数的调用方式决定了 `this` 的值（运行时绑定）。`this` 不能在执行期间被赋值，并且在每次函数被调用时 `this` 的值也可能会不同。ES5 引入了 [bind](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) 方法来设置函数的 `this` 值，而不用考虑函数如何被调用的。ES2015 引入了[箭头函数](https://wiki.developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)，箭头函数不提供自身的 this 绑定（`this` 的值将保持为闭合词法上下文的值）。\r\n\r\n[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)\r\n\r\n```javascript\r\nfunction foo() {\r\n\tconsole.log(this.a)\r\n}\r\nvar a = 1\r\nfoo() // 1\r\n\r\nvar obj = {\r\n\ta: 2,\r\n\tfoo: foo\r\n}\r\nobj.foo() // 2\r\n\r\n// 以上两者情况 `this` 只依赖于调用函数前的对象，优先级是第二个情况大于第一个情况\r\n\r\n// 以下情况是优先级最高的，`this` 只会绑定在 `c` 上，不会被任何方式修改 `this` 指向\r\nvar c = new foo() // undefined\r\nc.a = 3\r\nconsole.log(c.a)\r\n\r\n// 还有种就是利用 call，apply，bind 改变 this，这个优先级仅次于 new\r\n```\r\n\r\n### async、await 优缺点\r\n\r\n`async 和 await` 相比直接使用 `Promise` 来说，优势在于处理 `then` 的调用链，能够更清晰准确的写出代码。解决回调地狱\r\n\r\n缺点在于滥用 `await` 可能会导致性能问题，因为 `await` 会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性。\r\n\r\n```javascript\r\nvar a = 0\r\nvar b = async () => {\r\n  a = a + await 10\r\n  console.log('2', a) // -> '2' 10\r\n  a = (await 10) + a\r\n  console.log('3', a) // -> '3' 20\r\n}\r\nb()\r\na++\r\nconsole.log('1', a) // -> '1' 1\r\n```\r\n\r\n- 首先函数 `b` 先执行，在执行到 `await 10` 之前变量 `a` 还是 0，因为在 `await` 内部实现了 `generators` ，`generators` 会保留堆栈中东西，所以这时候 `a = 0` 被保存了下来\r\n- 因为 `await` 是异步操作，遇到`await`就会立即返回一个`pending`状态的`Promise`对象，暂时返回执行代码的控制权，使得函数外的代码得以继续执行，所以会先执行 `console.log('1', a)`\r\n- 这时候同步代码执行完毕，开始执行异步代码，将保存下来的值拿出来使用，这时候 `a = 10`\r\n- 然后后面就是常规执行代码了\r\n\r\n### generator 原理\r\n\r\nGenerator 是 ES6 中新增的语法，和 Promise 一样，都可以用来异步编程\r\n\r\n```javascript\r\n// 使用 * 表示这是一个 Generator 函数\r\n// 内部可以通过 yield 暂停代码\r\n// 通过调用 next 恢复执行\r\nfunction* test() {\r\n  let a = 1 + 2;\r\n  yield 2;\r\n  yield 3;\r\n}\r\nlet b = test();\r\nconsole.log(b.next()); // >  { value: 2, done: false }\r\nconsole.log(b.next()); // >  { value: 3, done: false }\r\nconsole.log(b.next()); // >  { value: undefined, done: true }\r\n```\r\n\r\n从以上代码可以发现，加上 `*` 的函数执行后拥有了 `next` 函数，也就是说函数执行后返回了一个对象。每次调用 `next` 函数可以继续执行被暂停的代码。\r\n\r\n\r\n\r\n实现......\r\n\r\n\r\n\r\n### Promise\r\n\r\nPromise 是 ES6 新增的语法，解决了回调地狱的问题。\r\n\r\n可以把 Promise 看成一个状态机。初始是 `pending` 状态，可以通过函数 `resolve` 和 `reject` ，将状态转变为 `resolved` 或者 `rejected` 状态，状态一旦改变就不能再次变化。\r\n\r\n\r\n\r\n### 如何实现一个 Promise\r\n\r\n[Promise的源码实现](https://github.com/xiaotiandada/blog/issues/71)\r\n\r\n### sort函数\r\n\r\nV8 引擎 sort 函数只给出了两种排序 InsertionSort 和 QuickSort，数量小于10的数组使用 插入，比10大的数组则使用 快排。\r\n\r\n### 垃圾回收\r\n\r\nV8 实现了准确式 GC，GC 算法采用了分代式垃圾回收机制。因此，V8 将内存（堆）分为新生代和老生代两部分。\r\n\r\n#### 新生代算法\r\n\r\n新生代中的对象一般存活时间较短，使用 Scavenge GC 算法。\r\n\r\n在新生代空间中，内存空间分为两部分，分别为 From 空间和 To 空间。在这两个空间中，必定有一个空间是使用的，另一个空间是空闲的。新分配的对象会被放入 From 空间中，当 From 空间被占满时，新生代 GC 就会启动了。算法会检查 From 空间中存活的对象并复制到 To 空间中，如果有失活的对象就会销毁。当复制完成后将 From 空间和 To 空间互换，这样 GC 就结束了。\r\n\r\n#### 老生代算法\r\n\r\n老生代中的对象一般存活时间较长且数量也多，使用了两个算法，分别是标记清除算法和标记压缩算法。\r\n\r\n在讲算法前，先来说下什么情况下对象会出现在老生代空间中：\r\n\r\n- 新生代中的对象是否已经经历过一次 Scavenge 算法，如果经历过的话，会将对象从新生代空间移到老生代空间中。\r\n- To 空间的对象占比大小超过 25 %。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中。\r\n\r\n老生代中的空间很复杂，有如下几个空间\r\n\r\n```typescript\r\nenum AllocationSpace {\r\n  // TODO(v8:7464): Actually map this space's memory as read-only.\r\n  RO_SPACE,    // 不变的对象空间\r\n  NEW_SPACE,   // 新生代用于 GC 复制算法的空间\r\n  OLD_SPACE,   // 老生代常驻对象空间\r\n  CODE_SPACE,  // 老生代代码对象空间\r\n  MAP_SPACE,   // 老生代 map 对象\r\n  LO_SPACE,    // 老生代大空间对象\r\n  NEW_LO_SPACE,  // 新生代大空间对象\r\n\r\n  FIRST_SPACE = RO_SPACE,\r\n  LAST_SPACE = NEW_LO_SPACE,\r\n  FIRST_GROWABLE_PAGED_SPACE = OLD_SPACE,\r\n  LAST_GROWABLE_PAGED_SPACE = MAP_SPACE\r\n};\r\n\r\n```\r\n\r\n在老生代中，以下情况会先启动标记清除算法：\r\n\r\n- 某一个空间没有分块的时候\r\n- 空间中被对象超过一定限制\r\n- 空间不能保证新生代中的对象移动到老生代中\r\n\r\n在这个阶段中，会遍历堆中所有的对象，然后标记活的对象，在标记完成后，销毁所有没有被标记的对象。在标记大型对内存时，可能需要几百毫秒才能完成一次标记。这就会导致一些性能上的问题。为了解决这个问题，2011 年，V8 从 stop-the-world 标记切换到增量标志。在增量标记期间，GC 将标记工作分解为更小的模块，可以让 JS 应用逻辑在模块间隙执行一会，从而不至于让应用出现停顿情况。但在 2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。该技术可以让 GC 扫描和标记对象时，同时允许 JS 运行，你可以点击 [该博客](https://v8project.blogspot.com/2018/06/concurrent-marking.html) 详细阅读。\r\n\r\n清除对象后会造成堆内存出现碎片的情况，当碎片超过一定限制后会启动压缩算法。在压缩过程中，将活的对象像一端移动，直到所有对象都移动完成然后清理掉不需要的内存。\r\n\r\n### 浏览器 Eventloop 和 Node 中的有什么区别\r\n\r\n众所周知 JS 是门非阻塞单线程语言，因为在最初 JS 就是为了和浏览器交互而诞生的。如果 JS 是门多线程的语言话，我们在多个线程中处理 DOM 就可能会发生问题（一个线程中新加节点，另一个线程中删除节点），当然可以引入读写锁解决这个问题。\r\n\r\nJS 在执行的过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入到 Task（有多种 task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 JS 中的异步还是同步行为。\r\n\r\n```javascript\r\nconsole.log('script start');\r\n\r\nsetTimeout(function() {\r\n  console.log('setTimeout');\r\n}, 0);\r\n\r\nconsole.log('script end');\r\n```\r\n\r\n以上代码虽然 `setTimeout` 延时为 0，其实还是异步。这是因为 HTML5 标准规定这个函数第二个参数不得小于 4 毫秒，不足会自动增加。所以 `setTimeout` 还是会在 `script end` 之后打印。\r\n\r\n不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 微任务（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为 `jobs`，macrotask 称为 `task`。\r\n\r\n```javascript\r\nconsole.log('script start');\r\n\r\nsetTimeout(function() {\r\n  console.log('setTimeout');\r\n}, 0);\r\n\r\nnew Promise((resolve) => {\r\n    console.log('Promise')\r\n    resolve()\r\n}).then(function() {\r\n  console.log('promise1');\r\n}).then(function() {\r\n  console.log('promise2');\r\n});\r\n\r\nconsole.log('script end');\r\n// script start => Promise => script end => promise1 => promise2 => setTimeout\r\n```\r\n\r\n以上代码虽然 `setTimeout` 写在 `Promise` 之前，但是因为 `Promise` 属于微任务而 `setTimeout` 属于宏任务，所以会有以上的打印。\r\n\r\n微任务包括 `process.nextTick` ，`promise` ，`Object.observe` ，`MutationObserver`\r\n\r\n宏任务包括 `script` ， `setTimeout` ，`setInterval` ，`setImmediate` ，`I/O` ，`UI rendering`\r\n\r\n很多人有个误区，认为微任务快于宏任务，其实是错误的。因为宏任务中包括了 `script` ，浏览器会先执行一个宏任务，接下来有异步代码的话就先执行微任务。\r\n\r\n所以正确的一次 Event loop 顺序是这样的\r\n\r\n1. 执行同步代码，这属于宏任务\r\n2. 执行栈为空，查询是否有微任务需要执行\r\n3. 执行所有微任务\r\n4. 必要的话渲染 UI\r\n5. 然后开始下一轮 Event loop，执行宏任务中的异步代码\r\n\r\n通过上述的  Event loop 顺序可知，如果宏任务中的异步代码有大量的计算并且需要操作 DOM 的话，为了更快的 界面响应，我们可以把操作 DOM 放入微任务中。\r\n\r\n#### Node 中的 Event loop\r\n\r\n**TODO 记录一下 还没理解...**\r\n\r\nNode 中的 Event loop 和浏览器中的不相同。\r\n\r\nNode 的 Event loop 分为6个阶段，它们会按照顺序反复运行\r\n\r\n```\r\n┌───────────────────────┐\r\n┌─>│        timers         │\r\n│  └──────────┬────────────┘\r\n│  ┌──────────┴────────────┐\r\n│  │     I/O callbacks     │\r\n│  └──────────┬────────────┘\r\n│  ┌──────────┴────────────┐\r\n│  │     idle, prepare     │\r\n│  └──────────┬────────────┘      ┌───────────────┐\r\n│  ┌──────────┴────────────┐      │   incoming:   │\r\n│  │         poll          │<──connections───     │\r\n│  └──────────┬────────────┘      │   data, etc.  │\r\n│  ┌──────────┴────────────┐      └───────────────┘\r\n│  │        check          │\r\n│  └──────────┬────────────┘\r\n│  ┌──────────┴────────────┐\r\n└──┤    close callbacks    │\r\n   └───────────────────────┘\r\n```\r\n\r\n**timer**\r\n\r\ntimers 阶段会执行 `setTimeout` 和 `setInterval`\r\n\r\n一个 `timer` 指定的时间并不是准确时间，而是在达到这个时间后尽快执行回调，可能会因为系统正在执行别的事务而延迟。\r\n\r\n下限的时间有一个范围：`[1, 2147483647]` ，如果设定的时间不在这个范围，将被设置为1。\r\n\r\n**I/O **\r\n\r\nI/O 阶段会执行除了 close 事件，定时器和 `setImmediate` 的回调\r\n\r\n**idle, prepare**\r\n\r\nidle, prepare 阶段内部实现\r\n\r\n**poll** 轮询\r\n\r\npoll 阶段很重要，这一阶段中，系统会做两件事情\r\n\r\n1. 执行到点的定时器\r\n2. 执行 poll 队列中的事件\r\n\r\n并且当 poll 中没有定时器的情况下，会发现以下两件事情\r\n\r\n- 如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者系统限制\r\n- 如果 poll 队列为空，会有两件事发生\r\n  - 如果有 `setImmediate` 需要执行，poll 阶段会停止并且进入到 check 阶段执行 `setImmediate`\r\n  - 如果没有 `setImmediate` 需要执行，会等待回调被加入到队列中并立即执行回调\r\n\r\n如果有别的定时器需要被执行，会回到 timer 阶段执行回调。\r\n\r\n**check**\r\n\r\ncheck 阶段执行 `setImmediate`\r\n\r\n**close callbacks**\r\n\r\nclose callbacks 阶段执行 close 事件\r\n\r\n并且在 Node 中，有些情况下的定时器执行顺序是随机的\r\n\r\n```\r\nsetTimeout(() => {\r\n    console.log('setTimeout');\r\n}, 0);\r\nsetImmediate(() => {\r\n    console.log('setImmediate');\r\n})\r\n// 这里可能会输出 setTimeout，setImmediate\r\n// 可能也会相反的输出，这取决于性能\r\n// 因为可能进入 event loop 用了不到 1 毫秒，这时候会执行 setImmediate\r\n// 否则会执行 setTimeout\r\n```\r\n\r\n当然在这种情况下，执行顺序是相同的\r\n\r\n```\r\nvar fs = require('fs')\r\n\r\nfs.readFile(__filename, () => {\r\n    setTimeout(() => {\r\n        console.log('timeout');\r\n    }, 0);\r\n    setImmediate(() => {\r\n        console.log('immediate');\r\n    });\r\n});\r\n// 因为 readFile 的回调在 poll 中执行\r\n// 发现有 setImmediate ，所以会立即跳到 check 阶段执行回调\r\n// 再去 timer 阶段执行 setTimeout\r\n// 所以以上输出一定是 setImmediate，setTimeout\r\n```\r\n\r\n上面介绍的都是 macrotask 的执行情况，microtask 会在以上每个阶段完成后立即执行。\r\n\r\n```\r\nsetTimeout(()=>{\r\n    console.log('timer1')\r\n\r\n    Promise.resolve().then(function() {\r\n        console.log('promise1')\r\n    })\r\n}, 0)\r\n\r\nsetTimeout(()=>{\r\n    console.log('timer2')\r\n\r\n    Promise.resolve().then(function() {\r\n        console.log('promise2')\r\n    })\r\n}, 0)\r\n\r\n// 以上代码在浏览器和 node 中打印情况是不同的\r\n// 浏览器中一定打印 timer1, promise1, timer2, promise2\r\n// node 中可能打印 timer1, timer2, promise1, promise2\r\n// 也可能打印 timer1, promise1, timer2, promise2\r\n```\r\n\r\nNode 中的 `process.nextTick` 会先于其他 microtask 执行。\r\n\r\n```\r\nsetTimeout(() => {\r\n  console.log(\"timer1\");\r\n\r\n  Promise.resolve().then(function() {\r\n    console.log(\"promise1\");\r\n  });\r\n}, 0);\r\n\r\nprocess.nextTick(() => {\r\n  console.log(\"nextTick\");\r\n});\r\n// nextTick, timer1, promise1\r\n```\r\n\r\n### setTimeout 倒计时误差\r\n\r\nJS 是单线程的，所以 `setTimeout` 的误差其实是无法被完全解决的，原因有很多，可能是回调中的，有可能是浏览器中的各种事件导致。这也是为什么页面开久了，定时器会不准的原因\r\n\r\n可以通过一定的办法去减少这个误差。以下是一个相对准备的倒计时实现\r\n\r\n**TODO 没看懂**\r\n\r\n```javascript\r\nvar period = 60 * 1000 * 60 * 2\r\nvar startTime = new Date().getTime();\r\nvar count = 0\r\nvar end = new Date().getTime() + period\r\nvar interval = 1000\r\nvar currentInterval = interval\r\n\r\nfunction loop() {\r\n  count++\r\n  var offset = new Date().getTime() - (startTime + count * interval); // 代码执行所消耗的时间\r\n  var diff = end - new Date().getTime()\r\n  var h = Math.floor(diff / (60 * 1000 * 60))\r\n  var hdiff = diff % (60 * 1000 * 60)\r\n  var m = Math.floor(hdiff / (60 * 1000))\r\n  var mdiff = hdiff % (60 * 1000)\r\n  var s = mdiff / (1000)\r\n  var sCeil = Math.ceil(s)\r\n  var sFloor = Math.floor(s)\r\n  currentInterval = interval - offset // 得到下一次循环所消耗的时间\r\n  console.log('时：'+h, '分：'+m, '毫秒：'+s, '秒向上取整：'+sCeil, '代码执行时间：'+offset, '下次循环间隔'+currentInterval) // 打印 时 分 秒 代码执行时间 下次循环间隔\r\n\r\n  setTimeout(loop, currentInterval)\r\n}\r\n\r\nsetTimeout(loop, currentInterval)\r\n```\r\n\r\n\r\n\r\n### 深浅拷贝\r\n\r\n#### = 赋值\r\n\r\n```javascript\r\nx = y\r\n```\r\n\r\n原理：引用类型 赋值操作符只是把存放在栈内容中的指针赋值给另外一个变量\r\n\r\n#### JSON.parse(JSON.stringify(x))\r\n\r\n```javascript\r\nlet a = [1, 2, 3, 4]\r\nlet b = JSON.parse(JSON.stringify(a))\r\n\r\nb[0] = 11\r\n\r\nconsole.log('a', a)\r\nconsole.log('b', b)\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/24250627/106392444-ccaa8d00-642c-11eb-9188-6649378bbf05.png)\r\n\r\n原理：通过 stringify 转成 string，然后通过 parse 转成对象\r\n\r\n缺陷 有些属性被忽略了... [source](https://segmentfault.com/a/1190000017773877)\r\n\r\n```javascript\r\nlet obj = {\r\n    nul: null,\r\n    und: undefined,\r\n    sym: Symbol('sym'),\r\n    str: 'str',\r\n    bol: true,\r\n    num: 45,\r\n    arr: [1, 4],\r\n    reg: /[0-9]/,\r\n    dat: new Date(),\r\n    fun: function() {},  \r\n}\r\nconsole.log(JSON.parse(JSON.stringify(obj)))\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/24250627/106392596-8c97da00-642d-11eb-8f9f-28c33bcade33.png)\r\n\r\nundefined、symbol、function 忽略掉了，reg 缺内容(或许还有别的也会忽略 没测试全面)\r\n\r\n#### Object.assign()\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n\r\n![image](https://user-images.githubusercontent.com/24250627/106392923-fcf32b00-642e-11eb-88a4-3ad6b71b32c2.png)\r\n\r\n\r\n```javascript\r\nlet obj = {\r\n    a: {\r\n        a1: 'a1'\r\n    },\r\n    b: 'b'\r\n}\r\nlet ass = Object.assign({}, obj);\r\nass.a.a1 = 'aaa';\r\nass.b = 'bbb';\r\nconsole.log(obj, ass);\r\n```\r\n\r\n适用于只有一层数据的对象\r\n\r\n#### 展开运算符(...)\r\n\r\n![image](https://user-images.githubusercontent.com/24250627/106393041-a2a69a00-642f-11eb-8c05-86037f4da1bd.png)\r\n\r\n```javascript\r\nlet obj = {\r\n    a: {\r\n        a1: 'a1'\r\n    },\r\n    b: 'b'\r\n}\r\nlet ass = {...obj};\r\nass.a.a1 = 'aaa';\r\nass.b = 'bbb'\r\n\r\nconsole.log('obj', obj)\r\nconsole.log('ass', ass)\r\n```\r\n\r\n适用于只有一层数据的对象\r\n\r\n#### Slice\r\n\r\n![image](https://user-images.githubusercontent.com/24250627/106426558-c81fbc00-64a0-11eb-9d05-7c1fcb0ab8bb.png)\r\n\r\n```javascript\r\nvar arr = ['a', 'b', 'c'];\r\nvar arrCopy = arr.slice(0);\r\narrCopy[0] = 'test'\r\nconsole.log(arr); // [\"a\", \"b\", \"c\"]\r\nconsole.log(arrCopy); // [\"test\", \"b\", \"c\"]\r\n\r\nvar arr1 = [{\"name\":\"weifeng\"},{\"name\":\"boy\"}];//原数组\r\nvar arr2 = arr1.slice(0);//拷贝数组\r\narr1[1].name=\"girl\";\r\nconsole.log(arr1);// [{\"name\":\"weifeng\"},{\"name\":\"girl\"}]\r\nconsole.log(arr2);//[{\"name\":\"weifeng\"},{\"name\":\"girl\"}\r\n```\r\n\r\n适用于只有一层数据 [code](https://juejin.cn/post/6844903647856295949)\r\n\r\n#### Concat\r\n\r\n![image](https://user-images.githubusercontent.com/24250627/106426742-1cc33700-64a1-11eb-9318-ffee1e82143d.png)\r\n\r\n```javascript\r\nvar arr = ['a', 'b', 'c'];\r\nvar arrCopy = [].concat(arr);\r\narrCopy[0] = 'test'\r\nconsole.log(arr); // [\"a\", \"b\", \"c\"]\r\nconsole.log(arrCopy); // [\"test\", \"b\", \"c\"]\r\n\r\nvar arr1 = [{\"name\":\"Roubin\"},{\"name\":\"RouSe\"}];//原数组\r\nvar arr2 = [].concat(arr1);//拷贝数组\r\narr1[1].name=\"Tom\";\r\nconsole.log(arr1);//[{\"name\":\"Roubin\"},{\"name\":\"Tom\"}]\r\nconsole.log(arr2);//[{\"name\":\"Roubin\"},{\"name\":\"Tom\"}]\r\n```\r\n\r\n适用于只有一层数据 [code](https://juejin.cn/post/6844903647856295949)\r\n\r\n#### 浅拷贝的实现\r\n\r\n```javascript\r\nlet data = [1, 2, 3, 4]\r\nlet data1 = { a: 1, b: 2, c: 3, d: 4 }\r\nlet data2 = [ {a: 1}, { a: 2 }, { a: 3 }, { a: 4 }]\r\nlet data3 = { a: { z: 1 }, b: {z : 2}, c: { z: 3 }, d: { z: 4 } }\r\n\r\nlet shallowCopy = function(obj) {\r\n  if (typeof obj !== 'object') return\r\n\r\n  let newObj = obj instanceof Array ? [] : {}\r\n  for (const key in obj) {\r\n    if (Object.hasOwnProperty.call(obj, key)) {\r\n      newObj[key] = obj[key]\r\n    }\r\n  }\r\n\r\n  return newObj\r\n}\r\n\r\n\r\nlet dataShallowCopy = shallowCopy(data)\r\nlet data1ShallowCopy = shallowCopy(data1)\r\n\r\ndataShallowCopy[0] = 100\r\ndata1ShallowCopy.a = 100\r\n\r\nconsole.log('dataShallowCopy', data, dataShallowCopy)\r\nconsole.log('data1ShallowCopy', data1, data1ShallowCopy)\r\n\r\n// dataShallowCopy [ 1, 2, 3, 4 ] [ 100, 2, 3, 4 ]\r\n// data1ShallowCopy { a: 1, b: 2, c: 3, d: 4 } { a: 100, b: 2, c: 3, d: 4 }\r\n```\r\n\r\n[code](https://github.com/mqyqingfeng/Blog/issues/32)\r\n\r\n#### 深拷贝的实现\r\n\r\n```javascript\r\nlet deepCopy = function(obj) {\r\n  if (typeof obj !== 'object') return\r\n\r\n  let newObj = obj instanceof Array ? [] : {}\r\n  for (const key in obj) {\r\n    if (Object.hasOwnProperty.call(obj, key)) {\r\n      newObj[key] = typeof obj[key] === 'object' ? deepCopy(obj[key]) : obj[key]\r\n    }\r\n  }\r\n\r\n  return newObj\r\n}\r\n\r\n\r\nlet data2DeepCopy = deepCopy(data2)\r\nlet data3DeepCopy = deepCopy(data3)\r\n\r\ndata2DeepCopy[0].a = 100\r\ndata3DeepCopy.a.z = 100\r\n\r\nconsole.log('data2DeepCopy', data2, data2DeepCopy)\r\nconsole.log('data3DeepCopy', data3, data3DeepCopy)\r\n\r\n// data2DeepCopy [ { a: 1 }, { a: 2 }, { a: 3 }, { a: 4 } ] [ { a: 100 }, { a: 2 }, { a: 3 }, { a: 4 } ]\r\n// data3DeepCopy { a: { z: 1 }, b: { z: 2 }, c: { z: 3 }, d: { z: 4 } } { a: { z: 100 }, b: { z: 2 }, c: { z: 3 }, d: { z: 4 } }\r\n```\r\n\r\n[code](https://github.com/mqyqingfeng/Blog/issues/32)\r\n\r\n#### Lodash\r\n\r\n项目可以使用Lodash提供的方法\r\n\r\n```javascript\r\nvar objects = [{ 'a': 1 }, { 'b': 2 }]; \r\nvar shallow = _.clone(objects);\r\n\r\nconsole.log(shallow[0] === objects[0]);\r\n// => true\r\n\r\nvar objects = [{ 'a': 1 }, { 'b': 2 }];\r\nvar deep = _.cloneDeep(objects);\r\n\r\nconsole.log(deep[0] === objects[0]);\r\n// => false\r\n```\r\n\r\n> 用什么方法最终还是需要根据实际情况选择\r\n\r\n### 数组去重\r\n\r\n#### new Set\r\n\r\n```javascript\r\nlet arr= [1, 2, 3, 3, 5, 7, 2, 6, 2, 8];\r\nconsole.log([...new Set(arr\r\n                        \r\n// [1, 2, 3, 5, 7, 6, 8]\r\n```\r\n\r\n#### 一维数组\r\n\r\n```javascript\r\nfunction Deduplication(data) {\r\n\r\n  if (!Array.isArray(data) ) {\r\n    return data\r\n  }\r\n\r\n  let list = []\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    if (!list.includes(data[i])) {\r\n      list.push(data[i])\r\n    }\r\n  }\r\n\r\n  return list\r\n}\r\n\r\nlet arrDedup = Deduplication(arr)\r\nconsole.log('arrDedup', arrDedup)\r\n\r\n//arrDedup [ 1, 2, 3, 5, 7, 6, 8, 4 ]\r\n```\r\n\r\n判断和Loop可以用 filter sort find indexOf includes 等等，原理应该差不多\r\n\r\n#### 多维数组\r\n\r\n```javascript\r\nfunction Deduplications(data) {\r\n  if (!Array.isArray(data) ) {\r\n    return data\r\n  }\r\n\r\n  let list = []\r\n  const flat = (data) => {\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (Array.isArray(data[i])) {\r\n        flat(data[i])\r\n      } else {\r\n        list.push(data[i])\r\n      }\r\n    }\r\n    return list\r\n  }\r\n\r\n  flat(data)\r\n\r\n  return [ ...new Set(list) ]\r\n}\r\nlet arrDedups = Deduplications(arrs)\r\nconsole.log('arrDedups', arrDedups)\r\n\r\n//  [ 1, 2, 3, 4, 5, 6 ]\r\n```\r\n\r\n先平铺数组 然后去重(也还有其他解法)\r\n\r\n#### Lodash\r\n\r\n```javascript\r\nlet arr = [2, 1, 2, [ 1, [ 2, 3, [4, 5, 6, 7, 8, [ 0, 10 ] ] ] ] ]\r\nlet flatList = _.flattenDeep(arr);\r\nlet list = _.uniq(flatList)\r\nconsole.log('list', list)\r\n\r\n// [2, 1, 3, 4, 5, 6, 7, 8, 0, 10]\r\n```\r\n\r\n### 数组降维\r\n\r\n```javascript\r\nconst flattenDeep = arr => Array.isArray(arr) ?\r\n      arr.reduce((a, b) => [...a, ...flattenDeep(b)] , []) : [arr]\r\n\r\nconsole.log(flattenDeep([1, [[2], [3, [4]], 5]]))\r\n// [1, 2, 3, 4, 5]\r\n```\r\n\r\n\r\n\r\n### ['1', '7', '11'].map(parseInt) 输出结果\r\n\r\n[1, NaN, 3]\r\n\r\n- `parseInt(string, radix)` 将一个字符串转换为 `radix` 进制的整数。如果 `string` 无法被转化成数值类型将会返回 `NaN`。\r\n- `radix` 为介于 2-36 之间的整数，通常默认值为 `10` https://www.w3school.com.cn/jsref/jsref_parseInt.asp\r\n- `map` 在每次迭代时都会将 `value`，`index`，`array` 三个参数传递到 `parseInt()` 中，因此 `['1', '7', '11'].map(parseInt)` 可以扩展为：\r\n\r\n```js\r\nparseInt('1', 0) // 1\r\nparseInt('7', 1) // NaN\r\nparseInt('11', 2) // 3\r\n```\r\n\r\n- 改写为如下将会按预期执行：\r\n\r\n```js\r\n['1', '7', '11'].map(value => parseInt(value, 10));\r\n```\r\n\r\n###  `==` 和 `===` 区别\r\n\r\n[JavaScript 中的相等性判断 MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness)\r\n\r\n简而言之，在比较两件事情时，双等号将执行类型转换; 三等号将进行相同的比较，而不进行类型转换 (如果类型不同, 只是总会返回 false ); \r\n\r\n三个等号 `===` 表示严格相等，也就是说类型和值都必须相同。两个等号 `==` 会使其中一边的类型进行强制转换，使等号两边的类型都相等后再对数值进行比较。\r\n\r\n- 尽量使用全等操作符。因为其没有隐式转换，这样结果会比较容易预测、计算也会比较快\r\n- 除了等于操作符，还可以使用 `Object.is` 进行同值比较。 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is 与[`==`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality) 运算*不同。* `==` 运算符在判断相等前对两边的变量(如果它们不是同一类型) 进行强制转换 (这种行为的结果会将 `\"\" == false` 判断为 `true`), 而 `Object.is`不会强制转换两边的值。 具体可以看MDN\r\n\r\n| x                 | y                 | ==    | ===   | Object.is |\r\n| ----------------- | ----------------- | ----- | ----- | --------- |\r\n| undefined         | undefined         | true  | true  | true      |\r\n| null              | null              | true  | true  | true      |\r\n| true              | true              | true  | true  | true      |\r\n| false             | false             | true  | true  | true      |\r\n| \"foo\"             | \"foo\"             | true  | true  | true      |\r\n| { foo: \"bar\" }    | x                 | true  | true  | true      |\r\n| 0                 | 0                 | true  | true  | true      |\r\n| +0                | -0                | true  | true  | false     |\r\n| 0                 | false             | true  | false | false     |\r\n| \"\"                | false             | true  | false | false     |\r\n| \"\"                | 0                 | true  | false | false     |\r\n| \"0\"               | 0                 | true  | false | false     |\r\n| \"17\"              | 17                | true  | false | false     |\r\n| [1,2]             | \"1,2\"             | true  | false | false     |\r\n| new String(\"foo\") | \"foo\"             | true  | false | false     |\r\n| null              | undefined         | true  | false | false     |\r\n| null              | false             | false | false | false     |\r\n| undefined         | false             | false | false | false     |\r\n| { foo: \"bar\" }    | { foo: \"bar\" }    | false | false | false     |\r\n| new String(\"foo\") | new String(\"foo\") | false | false | false     |\r\n| 0                 | null              | false | false | false     |\r\n| 0                 | NaN               | false | false | false     |\r\n| \"foo\"             | NaN               | false | false | false     |\r\n| NaN               | NaN               | false | false | true      |\r\n\r\n### x++ ++x\r\n\r\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\r\n\r\n优先级 ++.. 17 ..++ 18 从右到左进行计算\r\n\r\n### `Promise` 状态\r\n\r\n`Promise` 对象用于表示一个异步操作的最终状态（完成或失败）及其返回值。他有以下几种状态：\r\n\r\n- pending：初始状态，完成或失败状态的前一个状态\r\n- fulfilled：操作成功完成\r\n- rejected：操作失败\r\n\r\npending 状态的 Promise 对象会触发 fulfilled/rejected 状态，在其状态处理方法中可以传入参数/失败信息。当操作成功完成时，Promise 对象的 `then` 方法就会被调用；否则就会触发 `catch`。\r\n\r\n### 什么是回调？\r\n\r\n- 回调函数作为实参传入另一个函数内，当某种事件被触发或某些任务被完成时会被调用，通常用于异步编程。\r\n- 可以使用 `Promise`、Async/Await 等解决多重回调（callback hell）带来的问题\r\n\r\n### 对比两个对象\r\n\r\n- 严格相等运算符 `===`\r\n- 宽松相等运算符 `==`\r\n- `Object.is()` 函数\r\n- Lodash isEqual\r\n\r\n### 跨域\r\n\r\n浏览器出于安全考虑，有同源策略。也就是说，如果协议、域名或者端口有一个不同就是跨域，Ajax 请求会失败。\r\n\r\n- JSONP\r\n- CORS\r\n- Document.domain\r\n  - https://blog.csdn.net/huzhenv5/article/details/104884760\r\n  - https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\r\n- postMessage\r\n- Nginx\r\n\r\nhttps://segmentfault.com/a/1190000022398875\r\n\r\nhttps://zhuanlan.zhihu.com/p/159060398\r\n\r\n平时开发CORS就已经解决问题并且够用了\r\n\r\n### Service worker\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\r\n\r\nhttps://developers.google.com/web/tools/workbox\r\n\r\n```javascript\r\nif ('serviceWorker' in navigator) {\r\n  navigator.serviceWorker.getRegistrations().then((registrations) => {\r\n    for (const registration of registrations) {\r\n      console.info('[pwa] [workbox] Unregistering service worker:', registration)\r\n      registration.unregister()\r\n    }\r\n  })\r\n}\r\n\r\nif ('caches' in window) {\r\n  caches.keys()\r\n    .then((keys) => {\r\n      if (keys.length) {\r\n        console.info('[pwa] [workbox] Cleaning cache for:', keys.join(', '))\r\n        for (const key of keys) {\r\n          caches.delete(key)\r\n        }\r\n      }\r\n    })\r\n}\r\n```\r\n\r\nworkbox\r\n\r\n### 前端缓存\r\n\r\nhttps://github.com/xiaotiandada/blog/issues/67 正在写...\r\n\r\n### CORS 是什么？\r\n\r\nCORS（Cross-Origin Resource Sharing）跨域资源共享使用额外的 HTTP 头来告诉浏览器，此站点已被授权可以访问来自服务器指定的不同域的资源。从 `http://mydomain.com` Web 应用程序中使用 Ajax 请求 `http://yourdomain.com` 资源就是一个跨域请求的例子。\r\n\r\n出于安全考虑，浏览器会阻止 JavaScript 发起的 HTTP 跨源请求。 `XMLHttpRequest` 和 `fetch` 遵循了同源策略，这意味着使用这些 API 的 Web 应用程序只能从访问同域中的 HTTP 资源。想要通过这些 API 跨域访问资源就需要让跨域的域名被正确的包含在 CORS 头中。\r\n\r\n- 跨域时需在请求头中加上 `Origin`。这样服务器接受到请求后会根据 `Origin` 检测结果在返回头中加入 `Access-Control-` 开头的字段。\r\n- 非简单请求的 CORS，会在正式请求之前，增加一次 HTTP 预检请求去询问服务器该域名是否在白名单之中，以及可以使用哪些 HTTP 动作和头信息字段。只有符合要求后，浏览器才会发出正式的 `XMLHttpRequest` 请求，否则就抛出异常。\r\n- CORS 行为并不是一个错误，他是保护用户安全的一种机制。\r\n- CORS 可以阻止用户不小心访问的恶意网站去请求一个合法网站的站点资源，这样用户在合法站点的个人数据不仅会被获取，而且还可能进行一些无中生有的操作。\r\n- JSONP 不仅支持跨域请求，而且还支持更多的浏览器。但他只支持 `GET` 请求。\r\n\r\n### `0.1 + 0.2 === 0.3` 的计算结果是什么？\r\n\r\n他的计算结果为 `false`，因为 JavaScript 中的 Math 遵循 IEEE 754 标准使用了 64 位的浮点数。简言之：计算机使用二进制来存储小数，而大部分小数转换成二进制后都是无限循环的值，因此需要进行取舍，这样一来在进行十进制计算时就会导致精度丢失。\r\n\r\n```\r\n0.1 + 0.2 // 0.30000000000000004 \r\n```\r\n\r\n可以 放大倍数或者使用工具库解决问题 比如 bignumber.js\r\n\r\n### osi模型\r\n\r\n七层结构：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层\r\n\r\ntcp ucp属于传输层；\r\n\r\nhttp 属于应用层\r\n\r\n### 数组方法 `map()` 和 `forEach()` 有什么区别？\r\n\r\n这两种方法都是对数组中的元素进行迭代。`map()` 通过每个元素的回调函数将其映射到新的元素上，最终返回一个新的数组。`forEach()` 虽然也为每一个元素准备了回调函数，但却不返回新的数组。\r\n\r\n- 需要迭代一个数组，使其本身发生变化且不需要返回一个新数组时，可以使用 `forEach()`\r\n- `map()` 保持原有数组不变的正确选择\r\n- `map()` 运行的较快，且返回的新数组可以让你继续使用 `map()`、`filter()`、`reduce()` 等方法\r\n\r\n### 变量提升\r\n\r\n```javascript\r\nvar foo = 1\r\nvar foobar = () => {\r\n  console.log(foo)\r\n  var foo = 2\r\n}\r\nfoobar()\r\n```\r\n\r\n由于变量提升（Hoisting），局部变量 `foo` 将会在调用 `console.log` 方法之前进行声明。也就是说，作为参数传递给 `console.log()` 的局部变量 `foo` 替代了在函数外部声明的全局变量。但是变量初始化（赋值）并不会被提升，因此输出为 `undefined`，而不是 `2`。\r\n\r\n- JavaScript 只会将声明提升，初始化并不会被提升\r\n- 提升指变量和函数声明在编译阶段被放入内存中，在代码中的位置并不会变动\r\n- ES6 中的 `let`、`const` 不存在提升\r\n\r\n```javascript\r\nconst foobar = () => {\r\n    console.log(foo)\r\n    let foo = 2\r\n}\r\nfoobar()  // Uncaught ReferenceError: foo is not defined\r\n```\r\n\r\n- 函数提升  函数提升要比变量提升的优先级要高一些，且不会被变量声明覆盖\r\n\r\n```javascript\r\nfunction hoistFunction() {\r\n    foo(); // output: I am hoisted\r\n\r\n    function foo() {\r\n        console.log('I am hoisted');\r\n    }\r\n}\r\n\r\nhoistFunction();\r\n\r\nfunction hoistFunction() {\r\n    function foo() {\r\n        console.log(1);\r\n    }\r\n\r\n    foo(); // output: 2\r\n\r\n    function foo() {\r\n        console.log(2);\r\n    }\r\n}\r\n\r\nhoistFunction();\r\n\r\nvar foo = 1\r\nvar foobar = () => {\r\n  console.log(foo)\r\n  \r\n  function foo() {\r\n    console.log(1)\r\n  }\r\n  \r\n  var foo = 2\r\n}\r\n\r\nfoobar()\r\n// function foo() {\r\n  // window.runnerWindow.proxyConsole.log(1)\r\n// }\r\n\r\n```\r\n\r\n### 立即执行匿名函数的原因是什么？\r\n\r\n围绕文件中的上下文创建一个闭包环境，为这个文件创建私有的命名空间。可以避免不同的 JavaScript 模块和库在命名上产生冲突。函数被立即调用，就可以将函数的返回值赋给命名空间（库名）。\r\n\r\n```javascript\r\nconst myLibrary = (function() {\r\n})()\r\nmyLibrary\r\n```\r\n\r\n- 立即执行的匿名函数除了提供私有命名空间外，还提供了数据隐藏、封装、多实例等面向对象编程的特性。如：\r\n\r\n```javascript\r\nvar makeCounter = function() {};\r\nvar Counter1 = makeCounter();\r\nvar Counter2 = makeCounter();\r\n```\r\n\r\n- 以前很多流行的库（如：jQuery）都使用过该技术，但随着 JavaScript 版本的更新，都逐渐被 `import`，`class` 取而代之了。\r\n\r\n### 词法作用域和动态作用域的区别？\r\n\r\n词法作用域指的是使用函数位置来确定变量值。于此相对的是动态作用域，他使用函数调用的位置来确定变量值。\r\n\r\n- 词法作用语也被成为静态作用域。\r\n- 在闭包中，JavaScript 依旧遵循词法作用域。\r\n- 大多数语言都使用词法范围，因为这样的源代码更加容易理解。\r\n- JavaScript 实际上没有动态作用域，但 `this` 机制却和动态作用域类似：关注点都在于函数是如何被调用的。\r\n- 下列代码中，使用词法作用域将输出 `2`，动态作用域将输出 `3`：\r\n\r\n```javascript\r\nfunction foo() {\r\n\tconsole.log( a ); // 2\r\n}\r\nfunction bar() {\r\n\tvar a = 3;\r\n\tfoo();\r\n}\r\nvar a = 2;\r\nbar();\r\n```\r\n\r\n### `null` 和 `undefined` 有什么区别？\r\n\r\n在 JavaScript 中有两个值表示无 `undefined` 和 `null`。根本的区别在于 `null` 是显式的，而 `undefined` 是隐式的。当一个属性不存在或一个变量没有被赋值时，他们的值为 `undefined`。把 `null` 赋给一个变量时，就显式的表明这个变量“无值”。实际上，当明确知道没有对象或不应该有值时就使用 `null`，否则就使用 `undefined`。\r\n\r\n- `typeof` 结果不同\r\n\r\n```javascript\r\ntypeof undefined // \"undefined\"\r\ntypeof null // \"object\"，尽管返回 `object`，但他依旧是一个原始值，这是 JavaScript 在实现上的一个 bug。\r\ntypeof NaN // \"number\"\r\n```\r\n\r\n- [等于操作符 `==` 和 `===` 有什么区别](https://link.ld246.com/forward?goto=https%3A%2F%2Fhacpai.com%2Farticle%2F1546570870626%3Fr%3DVanessa)\r\n\r\n```javascript\r\nundefined == null // true\r\nundefined === null // false\r\n```\r\n\r\nJavaScript 的设计者 Brendan Eich 认为表示“空值”的不应该是一个对象且 `null` 在计算时会自动转换为 0，很不容易发现错误。因此 `undefined` 就诞生了。\r\n\r\n`null` 常用于以下场景：\r\n\r\n- 作为函数的参数，表示该函数的参数不是对象。\r\n\r\n- 作为对象原型链的终点。\r\n\r\n\r\n`undefined` 常用于以下场景：\r\n\r\n- 变量被声明了，但没有赋值时，就等于 undefined。\r\n\r\n- 调用函数时，应该提供的参数没有提供，该参数等于 undefined。\r\n\r\n- 对象没有赋值的属性，该属性的值为 undefined。\r\n\r\n- 函数没有返回值时，默认返回 undefined。\r\n\r\n### arguments\r\n\r\n参数是函数定义时的变量名，而 arguments 的值是函数调用时赋予的。\r\n\r\n```javascript\r\nfunction myFunction(parameter1, parameter2) {\r\n  console.log(arguments[0]) // \"argument1\"\r\n}\r\nmyFunction(\"argument1\", \"argument2\") \r\n```\r\n\r\n- `arguments` 是一个类似数组的对象\r\n- `arguments` 对象是函数中都可用的局部变量。\r\n- 可以使用 `Array.from()` 或扩展运算符将参数转换为真实数组，如：\r\n\r\n```javascript\r\nvar args = Array.from(arguments);\r\nvar args = [...arguments];\r\n\r\nfunction foo(...args) {\r\n  console.log(args)\r\n}\r\n\r\nfoo(1, 2, 3)\r\n```\r\n\r\n### 列举几种创建对象的方法\r\n\r\n#### 对象字面量\r\n\r\n通常用于存储一次性数据。\r\n\r\n```\r\nconst person = {\r\n  name: \"John\",\r\n  age: 50,\r\n}\r\nconsole.log(person.age) \r\n```\r\n\r\n#### 构造函数\r\n\r\n通常用于为一个对象创建多个实例的场景，每个实例都不会受到该对象的其他实例的影响，他们有自己独立的数据。`new` 关键字必须位于构造函数之前，否则下例中的 `name` 和 `age` 将会挂载到 `window` 上。\r\n\r\n```javascript\r\nfunction Person(name, age) {\r\n  this.name = name\r\n  this.age = age\r\n}\r\nPerson.prototype.birthday = function() {\r\n  this.age++\r\n}\r\nconst person1 = new Person(\"John\", 50)\r\nconst person2 = new Person(\"Sally\", 20)\r\nperson1.birthday()\r\nconsole.log(person1.name, person1.age) // John 51\r\nperson2.birthday()\r\nconsole.log(person2.name, person2.age) // Sally 21\r\n```\r\n\r\n#### 工厂模式\r\n\r\n和构造函数类似，都可以创造一个新的实例，但是他可以通过闭包存储私有数据。在函数调用或 `this` 关键字之前不需要使用 `new` 操作。工厂模式不使用原型链模式，他将所有属性和方法都做为自己的属性。\r\n\r\n```javascript\r\nconst createPerson = (name, age) => {\r\n  const birthday = () => person.age++\r\n  const person = { name, age, birthday }\r\n  return person\r\n}\r\nconst person = createPerson(\"John\", 50)\r\nperson.birthday() \r\nconsole.log(person.age) // 51\r\n```\r\n\r\n#### `Object.create()`\r\n\r\n设置新创建的对象的原型。`Object.create()` 的第二个参数可以提供新对象自身定义的可枚举属性。\r\n\r\n```javascript\r\nconst personProto = {\r\n  birthday() {\r\n    this.age++\r\n  }\r\n}\r\nconst person = Object.create(personProto, {\r\n  age: {\r\n    value: 50,\r\n    writable: true,\r\n    enumerable: true\r\n  },\r\n name: {\r\n    value: 'John',\r\n    writable: true,\r\n    enumerable: true\r\n  }\r\n})\r\nperson.birthday() \r\nconsole.log(person.age, person.name) // 51 \"John\"\r\n```\r\n\r\n- 原型链相关的方法可以让一个对象从其他对象中继承属性和方法。\r\n\r\n### JavaScript 通过值还是引用传递？\r\n\r\nJavaScript 是通过值进行传递的。然而对于对象而言，值是对象的引用。\r\n\r\n- 在值传递中，传递给函数的参数是函数被调用时所传实参的拷贝。\r\n- 在引用传递中，传递给函数的是他的实际参数的隐式引用而不是实参的拷贝\r\n\r\n### 原型继承和经典继承有什么区别？\r\n\r\n在原型继承中，对象实例直接从其他对象继承。通常使用工厂模式或 `Object.create()` 来创建对象实例。\r\n\r\n在经典继承中，对象实例从类中继承他们的属性和函数。通常使用构造函数和 `new` 关键字来创建对象实例。\r\n\r\n- 代码中原型链过长时，应将其分解，以避免出现性能问题。\r\n- 原生原型**不应该**被扩展，除非为了与新的 JavaScript 特性兼容。\r\n- 在 ES6 中引入的 `class` 关键字只是语法糖，他仍然是基于原型的。\r\n- 在编写复杂的继承代码之前，必须深入理解原型继承的模型。\r\n\r\n### 原始值和引用值的比较\r\n\r\n以下代码将输入什么？\r\n\r\n```javascript\r\nconst a = [1, 2, 3]\r\nconst b = [1, 2, 3]\r\nconst c = \"1,2,3\"\r\n\r\nconsole.log(a == c) // true\r\nconsole.log(a == b) // false\r\n```\r\n\r\n第一个 `console.log` 输出为 `true`，因为 JavaScript 编译器在两个等号时会执行类型转换，a 将进行 `a.toString()` 转换为 \"1,2,3\"，所以 a 和 c 相等。\r\n\r\n第二个 `console.log` 输出为 `false`，因为 a 和 b 是数组对象，对象是通过引用来进行比较的。a 和 b 可以看做 `new Array(1, 2, 3)`，都是新开辟出来的地址，所以引用肯定是不同的。如下通过引用的代码片断，将会输出 `true`：\r\n\r\n```javascript\r\nlet d = [1, 2, 3]\r\nlet e = d\r\ne.push(4)\r\nconsole.log(d === e)\r\n```\r\n\r\n- JavaScript 在执行计算时会对类型进行自动转换\r\n- `undefined`，`null` ，`boolean` ，`string` 和 `number` 这五类原始类型是通过值进行比较\r\n\r\n### ASI (automatic semicolon insertion) - 自动插入分号\r\n\r\n执行以下函数将输入什么？\r\n\r\n```javascript\r\nfunction greet() {\r\n  return\r\n  {\r\n    message: \"hello\"\r\n  }\r\n}\r\n```\r\n\r\n执行 `greet()` 将输出 `undefined`。因为 JavaScript 的 ASI ( automatic semicolon insertion )，即自动插入分号会使编译器在语法分析时在 `return` 关键字后放一个分号，所以在不产生错误的情况下，他将输出 `undefined`。\r\n\r\n- 由于 ASI，通常都使用换行来省略分号 以 `var`、`let`、`const`、`import`、`export` 开头的声明语句、表达式语句、debugger`、`continue`、`break`、`return`、`throw` 等语句\r\n\r\n### JavaScript 是否需要分号？\r\n\r\n有时候是不需要的，有时候是需要的。 JavaScript 自动插入分号机制，解释器会在大多数语句后自动添加分号。大多数情况下是不需要分号 但是在某些情况下需要分号\r\n\r\n```javascript\r\nconst a = 3\r\n;[1, 2, 3].map(n => n * 2) \r\n```\r\n\r\n```javascript\r\nconst a = 3\r\n;(function() {\r\n  // ...\r\n})() \r\n```\r\n\r\nError 大部分编辑器会给出明显的报错提示\r\n\r\n```javascript\r\nVM89097:2 Uncaught ReferenceError: Cannot access 'a' before initialization at <anonymous>:2:8\r\nVM89160:2 Uncaught TypeError: 3 is not a function\r\n```\r\n\r\n- 根据团队的规范来 如果需要则可以加 不需要则可以不加 通常可以配置eslint来解决这个规范问题\r\n\r\n### 同步和异步代码有什么区别？\r\n\r\n同步意味着每一个操作必须等待前一个操作完成后才能执行。\r\n 异步意味着操作不需要等待其他操作完成后才开始执行。\r\n\r\n- JavaScript 中的同步任务是指在主线程上排队执行的任务，只有前一个任务执行完成后才能执行后一个任务；异步任务是指进入任务队列（task queue）而非主线程的任务，只有当任务队列通知主线程，某个异步任务可以执行了，该任务才会进入主线程中进行执行。\r\n- JavaScript 的并发模型是基于 “event loop”。\r\n- 像 `alert` 这样的方法回阻塞主线程，以致用户关闭他后才能继续进行后续的操作。\r\n- Web Worker 虽然允许 JavaScript 创建多个线程，但子线程完全受主线程控制，且不能操作 DOM。\r\n\r\n### JavaScript 中的短路计算是什么？\r\n\r\n由于逻辑表达式的运算顺序是从左到右，并且他可以提前结束。使用这一规则便可进行短路计算。\r\n\r\n```javascript\r\ntrue || false\r\n```\r\n\r\n在逻辑运算过程中如果有一个表达式执行抛出异常，程序也不会受到影响，如：\r\n\r\n```javascript\r\ntrue || nonexistentFunction()\r\nfalse && nonexistentFunction() \r\n```\r\n\r\n由于从左到右的执行顺序，我们可以进行多个操作，如：\r\n\r\n```javascript\r\ntrue || nonexistentFunction() || window.nothing.wouldThrowError\r\ntrue || window.nothing.wouldThrowError\r\ntrue \r\n```\r\n\r\n一个常用的场景是设置默认值。如果第一个对象是假值，将会使用第二个对象的值。如：\r\n\r\n```javascript\r\nconst options = {}\r\nconst setting = options.setting || \"default\"\r\nconsole.log(setting) // default\r\n```\r\n\r\n另一个常用的场景是当对象为真值时，去执行该对象的相关操作，如：\r\n\r\n```javascript\r\naddEventListener(\"click\", e => {\r\n  if (e.target.closest(\"button\")) {\r\n    handleButtonClick(e)\r\n  }\r\n})\r\n// 以上代码片断等同于以下使用短路计算的代码片断\r\naddEventListener(\r\n  \"click\",\r\n  e => e.target.closest(\"button\") && handleButtonClick(e)\r\n) \r\n```\r\n\r\n在上面的示例中，如果 e.target 不存在或他里面不包含和 “button” 相匹配的元素，后面的函数将不会被执行。这是因为第一个对象如果是假值，那么第二个对象就不会被运行。\r\n\r\n### 什么是闭包？\r\n\r\n一个函数和对其周围状态（**lexical environment，词法环境**）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是**闭包**（**closure**）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。https://link.ld246.com/forward?goto=https%3A%2F%2Fhacpai.com%2Farticle%2F1549635108016%23toc_h4_2) \r\n\r\n```javascript\r\nfunction init() {\r\n    var name = \"Mozilla\"; // name 是一个被 init 创建的局部变量\r\n    function displayName() { // displayName() 是内部函数，一个闭包\r\n        alert(name); // 使用了父函数中声明的变量\r\n    }\r\n    displayName();\r\n}\r\ninit();\r\n```\r\n\r\n[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)\r\n\r\n### 什么是函数式编程？\r\n\r\n函数式编程是一种编程范式，他使用**纯函数**来构建声明方式以避免状态的共享、数据的易变及一些副作用。函数式编程的核心是：同一个函数中只要输入相同，其返回值就必然相等，且不会产生任何副作用。\r\n\r\n- 与使用命令式或面向对象编程的代码相比，函数式编程的代码更加简洁、清晰、可预测及易于测试。\r\n- `String.prototype.toUpperCase`、`Array.prototype.map`、`Function.prototype.bind` 都是 JavaScript 中纯函数的例子，其非纯函数的例子有：`Date.now`、`Math.random` 等\r\n\r\n### 命令式编程和声明式编程有什么区别？\r\n\r\n这两种编程可以简单的概括为：\r\n\r\n- 命令式编程：**如何**命令计算机完成\r\n- 声明式编程： 我要完成**什么**\r\n\r\n#### 命令式编程\r\n\r\n```\r\nconst numbers = [1, 2, 3, 4, 5]\r\nconst numbersDoubled = []\r\nfor (let i = 0; i < numbers.length; i++) {\r\n  numbersDoubled[i] = numbers[i] * 2\r\n} \r\n```\r\n\r\n我们手动循环遍历数组中的元素，然后将每个元素乘以 2 后赋给另外一个数组。\r\n\r\n#### 声明式编程\r\n\r\n```\r\nconst numbers = [1, 2, 3, 4, 5]\r\nconst numbersDoubled = numbers.map(n => n * 2) \r\n```\r\n\r\n我们声明一个新的数组，让其中的每一个元素为原有数组中每一个元素的 2 倍。\r\n\r\n### Memoization 是什么？\r\n\r\nMemoization 是用来缓存函数调用的输出结果，以便减少后续再次调用时的运算，进而加快运算速度的一种优化技术。Memoization 在再次调用有相同输入的同一函数时将直接返回缓存的该函数的输出结果，但第一次的计算当然是必不可少的。\r\n\r\n```\r\nconst memoize = fn => {\r\n  const cache = new Map()\r\n  return value => {\r\n    const cachedResult = cache.get(value)\r\n    if (cachedResult !== undefined) return cachedResult\r\n    const result = fn(value)\r\n    cache.set(value, result)\r\n    return result\r\n  }\r\n} \r\n```\r\n\r\n#### Lodash\r\n\r\n```javascript\r\nvar object = { 'a': 1, 'b': 2 };\r\nvar other = { 'c': 3, 'd': 4 };\r\n \r\nvar values = _.memoize(_.values);\r\nvalues(object);\r\n// => [1, 2]\r\n \r\nvalues(other);\r\n// => [3, 4]\r\n \r\nobject.a = 2;\r\nvalues(object);\r\n// => [1, 2]\r\n \r\n// 修改结果缓存。\r\nvalues.cache.set(object, ['a', 'b']);\r\nvalues(object);\r\n// => ['a', 'b']\r\n \r\n// 替换 `_.memoize.Cache`。\r\n_.memoize.Cache = WeakMap;\r\n```\r\n\r\n### 对比 Mutable 和 Immutable 及 Mutating 和 Non-Mutating\r\n\r\n- Mutable：对象主题可以被修改\r\n- Immutable：对象一旦被创建就不能被修改\r\n- Mutating：修改对象主题的方法\r\n- Non-Mutating：不会使原始对象发生变化的修改方法\r\n\r\n在 JavaScript 中，对象是可被修改的，但原始值却是不能被修改的。这意味着可以通过执行某些操作来修改对象的原始引用，但对原始值执行任何操作都不能修改他的初始值。\r\n 所有的 `String.prototype` 方法都不能对初始值产生任何影响，他们都只会返回一个新的字符串。相比而言，`Array.prototype` 的某些方法也不会修改初始数组的引用，只会产生一个新的数组，但是某些方法却能产生变化。\r\n\r\n```\r\nconst myString = \"hello!\"\r\n// 返回一个新数组，并不会修改初始值\r\nmyString.replace(\"!\", \"\") // \"hello\"\r\n\r\nconst originalArray = [1, 2, 3]\r\n// 原始数组被修改\r\noriginalArray.push(4) // [1, 2, 3, 4]\r\n// 返回一个新数组，不会修改原始数组\r\noriginalArray.concat(4) // [1, 2, 3, 4, 4]\r\n```\r\n\r\n- 数组中 Mutating 的方法如：`copyWithin`、`fill`、`pop`、`push`、`reverse`、`shift`、`sort`、`splice`、`unshift`\r\n- 数组中 Non-Mutating 的方法如: `map`、`slice`、`concat`、`filter`\r\n- https://github.com/immutable-js/immutable-js\r\n\r\n### JavaScript 中唯一自己不等于自己的值是谁？\r\n\r\n`NaN` (Not-a-Number) 无论使用什么比较运算符进行比较时，他是唯一不等于自身的值。`NaN` 通常是没有意义的数学计算的结果，因此两个 `NaN` 值被认为相等是没有意义的。\r\n\r\n- 简单的实现 isNaN：\r\n\r\n```javascript\r\nconst isNotNumber = x => x !== x\r\n```\r\n\r\n- `isNaN()` 和 `Number.isNaN()` 的区别如下：\r\n\r\n```javascript\r\nisNaN(NaN); // true\r\nisNaN('A String'); // true\r\nisNaN(undefined); // true\r\nisNaN({}); // true\r\nNumber.isNaN(NaN); // true\r\nNumber.isNaN('A String'); // false\r\nNumber.isNaN(undefined); // false\r\nNumber.isNaN({}); // false\r\n```\r\n\r\n- 可以使用 `Object.is`判断\r\n\r\n```javascript\r\nObject.is(NaN, NaN) // true\r\n```\r\n\r\n### 复合函数\r\n\r\n在[数学](https://zh.wikipedia.org/wiki/数学)中，**复合函数**，又称作**合成函数**（英语：function composition）是指[逐点](https://zh.wikipedia.org/wiki/逐点)地把一个[函数](https://zh.wikipedia.org/wiki/函数)作用于另一个函数的结果，所得到的第三个函数。例如，函数 *f* : *X* → *Y* 和 *g* : *Y* → *Z* 可以复合，得到从 *X* 中的 *x* 映射到 *Z* 中 *g*(*f*(*x*)) 的函数。直观来说，如果 *z* 是 *y* 的函数，*y* 是 *x* 的函数，那么 *z* 是 *x* 的函数。得到的复合函数记作 *g* ∘ *f* : *X* → *Z*，定义为对 *X* 中的所有 *x*，(*g* ∘ *f* )(*x*) = *g*(*f*(*x*))。[[note 1\\]](https://zh.wikipedia.org/wiki/复合函数#cite_note-1) 直观地说，复合两个函数是把两个函数链接在一起的过程，内函数的输出就是外函数的输入。[wiki](https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0)\r\n\r\n```javascript\r\ncompose(...fn) {\r\n  if (fn.length === 0) {\r\n    return arg => arg\r\n  }\r\n\r\n  if (fn.length === 1) {\r\n    return fn[0]\r\n  }\r\n\r\n  return fn.reduce((a, b) => (...args) => a(b(...args)))\r\n},\r\n```\r\n\r\n### 什么是纯函数？\r\n\r\n- 给定相同的输入，返回输出结果必须相同\r\n- 在作用域之外不能改变其他数据或提供给函数的数据。\r\n\r\n纯函数在满足以上两个条件时，允许在自身内部对自己的变量进行改变。\r\n\r\n#### 纯函数\r\n\r\n```\r\nconst a = (x, y) => x + y\r\nconst b = (arr, value) => arr.concat(value)\r\nconst c = arr => [...arr].sort((a, b) => a - b) \r\n```\r\n\r\n#### 非纯函数\r\n\r\n```\r\nconst a = (x, y) => x + y + Math.random()\r\nconst b = (arr, value) => (arr.push(value), arr)\r\nconst c = arr => arr.sort((a, b) => a - b) \r\n```\r\n\r\n### 解释递归及其使用场景\r\n\r\n函数重复调用自身直到满足某个基本条件时。需要条件来打断循环，否则会不停的调用自身\r\n\r\nhttps://blog.csdn.net/Creabine/article/details/79027419\r\n\r\n```javascript\r\nfunction factorial(n) {\r\n  if(n === 1){\r\n    return n\r\n  }\r\n  return n * factorial(n-1)\r\n}\r\nconsole.log(factorial(5))\r\n```\r\n\r\n### 静态方法和实例方法的区别\r\n\r\n- 静态方法属于一个类，他不能在实例上使用。\r\n- 实例方法属于类的原型，他继承 自该类的所有实例并可以在实例上使用。\r\n\r\n```\r\nArray.isArray // 数组的静态方法\r\nArray.prototype.push // 数组的实例方法\r\n```\r\n\r\n如果 `Array.isArray` 方法做为数组的一个实例方法将没有任何意义，因为当他可以正常运行时，我们已经知道这个他是一个数组了。\r\n\r\n实例方法在技术上可以当作静态方法使用，只是实例方法提供了更简洁的语法：\r\n\r\n```\r\nconst arr = [1, 2, 3]\r\narr.push(4)\r\nArray.push(arr, 4) \r\n```\r\n\r\n- 使用 ES2015 的类语法创建一个静态方法和实例方法\r\n\r\n```\r\nclass Foo {\r\n    bar() {\r\n        console.log('instance method')\r\n    }\r\n\r\n    static baz() {\r\n        console.log('static method')\r\n    }\r\n}\r\nFoo.baz() // static method\r\nconst f = new Foo()\r\nf.bar() // instance method\r\n```\r\n\r\n### use strict 的作用\r\n\r\n开头包含 'use strict' 可以启用严格模式，该模式强制开启了更为严格的 JavaScript 代码解析和错误处理。他被认为是一种很好的实践，为开发者提供了以下便捷之处：\r\n\r\n- 通过抛出错误来消除了一些原有的静默错误，让调试更加容易。\r\n- 修复了一些导致 JavaScript 引擎难以执行优化的缺陷：有时候，相同的代码，严格模式可以比非严格模式下运行得更快。\r\n- 提高 JavaScript 的安全性，如私有变量的保护等。\r\n- 简化 `eval()` 和 `arguments`，如 `arguments` 不会随参数的变化而变化等。\r\n\r\n```\r\n\"use strict\"\r\nfunction f(a){\r\n  a = 42;\r\n  return [a, arguments[0]];\r\n}\r\nvar pair = f(17);\r\nconsole.log(pair) // [42, 17]，非严格模式下输出为 [42, 42]\r\n```\r\n\r\n- 防止意外的全局变量。\r\n\r\n```\r\n\"use strict\"\r\nmistypedVaraible = 17; // Uncaught ReferenceError: mistypedVaraible is not defined\r\n```\r\n\r\n- 禁止重新定义。\r\n\r\n```\r\n\"use strict\";\r\nundefined = 5; // Uncaught TypeError: Cannot assign to read only property 'undefined' of object '#<Window>'\r\n```\r\n\r\n- 使用 `delete` 时会抛出错误\r\n\r\n```\r\n\"use strict\";\r\ndelete mistypedVariable; // Uncaught SyntaxError: Delete of an unqualified identifier in strict mode.\r\n```\r\n\r\n- 强制消除 `this` 的引用，默认为 `undefined`。\r\n\r\n```\r\n\"use strict\";\r\nname = \"atatus\";\r\nfunction testFunction() {\r\n    console.log(this.name);\r\n}\r\n// 非严格模式下输出 atatus\r\ntestFunction(); // Uncaught TypeError: Cannot read property 'name' of undefined \r\n```\r\n\r\n- 禁用了在 ECMAScript 未来版本中可能会定义的一些语法。\r\n\r\n### 内存泄漏\r\n\r\n定义：程序中己动态分配的堆内存由于某种原因程序未释放或无法释放引发的各种问题 js中可能出现的内存泄漏情况 结果：变慢，崩溃，延迟大等 原因：\r\n\r\n1. 全局变量\r\n2. dom清空时，还存在引用\r\n3. ie中使用闭包\r\n4. 定时器未清理\r\n5. 子元素存在引起的内存泄露\r\n\r\n避免策略：\r\n\r\n1. 减少不必要的全局变量，或者生命周期较长的对象，及时对无用的数据进行垃圾回收；\r\n2. 注意程序逻辑，避免“死循环”之类的 ；\r\n3. 避免创建过多的对象  原则：不用了的东西要及时归还。\r\n4. 减少层级过多的引用\r\n\r\n\r\n\r\n\r\n\r\n### React, Vue, Angular、UI 库或框架的目的是什么？\r\n\r\n- 组件化 功能复用 减少冗余代码和提高维护性\r\n- 数据驱动视图 只需要关注数据变化即可\r\n- 虚拟Dom vue 和react 都使用的虚拟dom性能提升\r\n- 提供生命周期、插槽、条件语句、Hooks等一些列功能 提高开发效率\r\n\r\n### 虚拟 DOM 是什么，库或者框架中为什么要使用他？\r\n\r\n虚拟 DOM（VDOM）是使用 JavaScript 普通对象来描述真实 DOM 的展现方式\r\n\r\n```javascript\r\ndocument.createDocumentFragment()\r\n```\r\n\r\n[MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment)\r\n\r\n- 库或者框架中使用虚拟 DOM 主要为了提高性能。\r\n- 使用虚拟 DOM 可以减少对底层的 DOM 操作\r\n- 虚拟 DOM 可以将同一时间内多个状态的变化累计计算出最终状态，以便对 DOM 只执行一次更新。\r\n- Vue.js 中 Virtual DOM 是借鉴了一个开源库 [snabbdom](https://github.com/snabbdom/snabbdom) 的实现，然后加入了一些 Vue.js 特色的东西\r\n\r\n## React\r\n\r\n### 什么是内联条件表达式？\r\n\r\n使用 `if` 语句或三元表达式 还可以在 JSX 中嵌入表达式\r\n\r\n```\r\n(\r\n    <div>\r\n      <h1>Hello! {isLoggedIn ? 'Vanessa' : 'User'}</h1>\r\n      {unreadMessages.length > 0 &&\r\n        <h2>\r\n          You have {unreadMessages.length} unread messages.\r\n        </h2>\r\n      }\r\n    </div>\r\n )\r\n```\r\n\r\n### React 中什么是有状态的组件？\r\n\r\n有状态的组件是一种其行为取决于该状态的组件。这意味着在一个组件的两个实例中，即使给这两个实例赋予相同的属性，他们也不一定会有相同的渲染输出，这和纯函数组件不同。\r\n\r\n```\r\n// Stateful class component\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { count: 0 }\r\n  }\r\n  render() {\r\n    // ...\r\n  }\r\n}\r\n\r\n// Stateful function component\r\nfunction App() {\r\n  const [count, setCount] = useState(0)\r\n  return // ...\r\n} \r\n```\r\n\r\n- 有状态的组件包含了他们内部所依赖的状态。\r\n- 有状态的组件是类组件或者是使用了 useState hook 的函数组件。\r\n- 有状态的组件在构造器中或使用 `useState()` \r\n\r\n```\r\nimport {useState} from 'react';\r\n\r\nfunction Counter(){\r\n\r\n let [number,setCount ] = useState(0);\r\n\r\n   return (\r\n       <div>\r\n        <h1>{number}</h1>\r\n        <button onClick={()=>setCount(number+1)} >Increment</button>\r\n        <button onClick={()=>setCount(number-1)} >Deccrement</button>\r\n       </div>\r\n   )\r\n}\r\n```\r\n\r\n### 什么是无状态组件\r\n\r\n无状态组件是本身行为不需要依赖他自身状态的组件。无状态组件可以是函数组件或者类组件。无状态函数组件更易于维护和测试，因为他们可以保证在相同的属性下有相同的输出。当不需要使用生命周期钩子时，应该首先使用无状态函数组件。\r\n\r\n- 无状态组件不依赖他自身的状态。\r\n- 无状态组件可以是类组件或者函数组件。\r\n- 无状态函数组件可以完全避免使用 `this` 关键字。\r\n- 无状态组件有更高的性能。\r\n\r\n```\r\nconst Component (props)=>(\r\n    <div>\r\n        {props.text}\r\n        ...\r\n    </div>\r\n)\r\n```\r\n\r\n### key 是什么？列表中使用时有什么优点？\r\n\r\nKeys 是一种特殊的字符串属性，可以帮助 React 识别哪些项已经被修改过、添加过或删除过。当渲染数组元素时就需要使用 key 来给每一个元素进行固定的标识。每一个元素的 key 必须是唯一的（例如，数据中的 IDs 或最终排序后的索引）。\r\n\r\n```\r\nconst todoItems = todos.map(todo => <li key={todo.id}>{todo.text}</li>) \r\n```\r\n\r\n- Keys 为集合中的元素提供来固定的标识，从而帮助 React 来识别增删改。\r\n- 如果项目的顺序可能会发生变化，则不建议使用索引作为 keys，因为这可能会对性能产生负面影响，并且可能会导致组件的状态出现问题。\r\n- 如果将列表项单独提出来做为一个组件，在列表组件中 li 标签上的 key 需要提升到 ListItem 组件上\r\n\r\n```\r\nfunction ListItem(props) {\r\n  // Correct! There is no need to specify the key here:\r\n  return <li>{props.value}</li>;\r\n}\r\n\r\nfunction NumberList(props) {\r\n  const numbers = props.numbers;\r\n  const listItems = numbers.map((number) =>\r\n    // Correct! Key should be specified inside the array.\r\n    <ListItem key={number.toString()}\r\n              value={number} />\r\n\r\n  );\r\n  return (\r\n    <ul>\r\n      {listItems}\r\n    </ul>\r\n  );\r\n}\r\n\r\nconst numbers = [1, 2, 3, 4, 5];\r\nReactDOM.render(\r\n  <NumberList numbers={numbers} />,\r\n  document.getElementById('root')\r\n);\r\n```\r\n\r\n### React 生命周期的方法有哪些？\r\n\r\nhttps://zh-hans.reactjs.org/docs/react-component.html#the-component-lifecycle\r\n\r\nhttps://medium.com/coding-hot-pot/react-lifecycle-%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F-a48683ae3922\r\n\r\n#### 组件的生命周期\r\n\r\n##### 挂载\r\n\r\n当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：\r\n\r\n- [**`constructor()`**](https://zh-hans.reactjs.org/docs/react-component.html#constructor)\r\n- [`static getDerivedStateFromProps()`](https://zh-hans.reactjs.org/docs/react-component.html#static-getderivedstatefromprops)\r\n- [**`render()`**](https://zh-hans.reactjs.org/docs/react-component.html#render)\r\n- [**`componentDidMount()`**](https://zh-hans.reactjs.org/docs/react-component.html#componentdidmount)\r\n\r\n> 注意:\r\n>\r\n> 下述生命周期方法即将过时，在新代码中应该[避免使用它们](https://zh-hans.reactjs.org/blog/2018/03/27/update-on-async-rendering.html)：\r\n>\r\n> - [`UNSAFE_componentWillMount()`](https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillmount)\r\n\r\n\r\n\r\n##### 更新\r\n\r\n当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：\r\n\r\n- [`static getDerivedStateFromProps()`](https://zh-hans.reactjs.org/docs/react-component.html#static-getderivedstatefromprops)\r\n- [`shouldComponentUpdate()`](https://zh-hans.reactjs.org/docs/react-component.html#shouldcomponentupdate)\r\n- [**`render()`**](https://zh-hans.reactjs.org/docs/react-component.html#render)\r\n- [`getSnapshotBeforeUpdate()`](https://zh-hans.reactjs.org/docs/react-component.html#getsnapshotbeforeupdate)\r\n- [**`componentDidUpdate()`**](https://zh-hans.reactjs.org/docs/react-component.html#componentdidupdate)\r\n\r\n> 注意:\r\n>\r\n> 下述方法即将过时，在新代码中应该[避免使用它们](https://zh-hans.reactjs.org/blog/2018/03/27/update-on-async-rendering.html)：\r\n>\r\n> - [`UNSAFE_componentWillUpdate()`](https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillupdate)\r\n> - [`UNSAFE_componentWillReceiveProps()`](https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops)\r\n\r\n##### 卸载\r\n\r\n当组件从 DOM 中移除时会调用如下方法：\r\n\r\n- [**`componentWillUnmount()`**](https://zh-hans.reactjs.org/docs/react-component.html#componentwillunmount)\r\n\r\n##### 错误处理\r\n\r\n当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：\r\n\r\n- [`static getDerivedStateFromError()`](https://zh-hans.reactjs.org/docs/react-component.html#static-getderivedstatefromerror)\r\n- [`componentDidCatch()`](https://zh-hans.reactjs.org/docs/react-component.html#componentdidcatch)\r\n\r\n### Ref\r\n\r\nhttps://zh-hant.reactjs.org/docs/refs-and-the-dom.html\r\n\r\nhttps://juejin.cn/post/6844903749211652104\r\n\r\n**React.createRef**\r\n\r\n```react\r\nclass MyComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.myRef = React.createRef();\r\n  }\r\n  render() {\r\n    return <div ref={this.myRef} />;\r\n  }\r\n}\r\n```\r\n\r\n**Callback ref**\r\n\r\n```react\r\nclass Test extends React.Component {\r\n  componentDidMount(){\r\n    console.log(this.second);\r\n  // <input value=\"second\">\r\n  }\r\n  render() {\r\n    return <input value=\"second\" ref={(input) => {this.second = input }} />\r\n  }\r\n}\r\n```\r\n\r\n### children\r\n\r\n`children` 是传递给组件属性对象的一部分，他提供了组合组件的能力\r\n\r\n```react\r\nfunction GenericBox({ children }: any) {\r\n  console.log('children', children)\r\n  return <div className=\"container\">{children}</div>\r\n}\r\n\r\n<GenericBox>\r\n  <span>Hello</span> <span>World</span>\r\n</GenericBox>\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/24250627/108600318-844e1180-73d1-11eb-90fa-61affe7941a9.png)\r\n\r\n ### Context\r\n\r\nhttps://reactjs.org/docs/context.html\r\n\r\n- Context 提供了一种通过 React 组件树传递数据的方法，他不需要手动传递属性。\r\n\r\n- 使用 Context，可以跨越组件进行数据的传递\r\n\r\n### React 错误边界\r\n\r\n错误边界是 React 捕获子组件树中所有 JavaScript 错误的组件，他可以记录这些错误，并将错误显示在 UI 上来替代组件树的崩溃。\r\n\r\n定义 `componentDidCatch` 那么他将成为错误边界\r\n\r\nhttps://reactjs.org/docs/error-boundaries.html\r\n\r\n```react\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    // Display fallback UI\r\n    this.setState({ hasError: true })\r\n    // You can also log the error to an error reporting service\r\n    logErrorToMyService(error, info)\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return <h1>Something went wrong.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n```\r\n\r\n- `componentDidCatch`：用于错误边界。他允许组件去捕获其子组件树中任意位置的 JavaScript 错误，打印错误，并使用 UI 展现错误信息。\r\n- 当任何一个子组件在渲染过程中、在一个生命周期的方法中或在构造函数中发生错误时 `static getDerivedStateFromError()`，`componentDidCatch()` 将会被调用。\r\n\r\n```react\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // You can also log the error to an error reporting service\r\n    logErrorToMyService(error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return <h1>Something went wrong.</h1>;\r\n    }\r\n\r\n    return this.props.children; \r\n  }\r\n}\r\n```\r\n\r\n### Fragments\r\n\r\nhttps://reactjs.org/docs/fragments.html\r\n\r\n```react\r\nrender() {\r\n  return (\r\n    <React.Fragment>\r\n      <ChildA />\r\n      <ChildB />\r\n      <ChildC />\r\n    </React.Fragment>\r\n  );\r\n}\r\n```\r\n\r\n- 可以使用 `<></>` 代替 `<React.Fragment/>`。`<></>` 只是一个语法糖。\r\n- `<></>` 语法不能接受键值或属性，以下情况只能使用 `<React.Fragment/>` (没有实际测试过)\r\n\r\n```\r\nfunction Glossary(props) {\r\n  return (\r\n    <dl>\r\n      {props.items.map(item => (\r\n        // 没有`key`，将会触发一个key警告\r\n        <React.Fragment key={item.id}>\r\n          <dt>{item.term}</dt>\r\n          <dd>{item.description}</dd>\r\n        </React.Fragment>\r\n      ))}\r\n    </dl>\r\n  );\r\n}\r\n```\r\n\r\n- `key` 是唯一可以传递给 `Fragment` 的属性 （没有实际测试过）\r\n\r\n### 高阶组件\r\n\r\nhttps://zh-hans.reactjs.org/docs/higher-order-components.html\r\n\r\n>高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。\r\n>\r\n>具体而言，**高阶组件是参数为组件，返回值为新组件的函数。**\r\n>\r\n>```\r\n>const EnhancedComponent = higherOrderComponent(WrappedComponent);\r\n>```\r\n>\r\n>组件是将 props 转换为 UI，而高阶组件是将组件转换为另一个组件。\r\n\r\n### Portals\r\n\r\nhttps://reactjs.org/docs/portals.html\r\n\r\n```react\r\nrender() {\r\n  // React does *not* create a new div. It renders the children into `domNode`.\r\n  // `domNode` is any valid DOM node, regardless of its location in the DOM.\r\n  return ReactDOM.createPortal(\r\n    this.props.children,\r\n    domNode\r\n  );\r\n}\r\n```\r\n\r\n### React 中如何使用 prop\r\n\r\n `isRequired`。\r\n\r\n为组件定义的 `propTypes`：\r\n\r\n```react\r\nimport PropTypes from \"prop-types\"\r\n\r\nclass User extends React.Component {\r\n  static propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    age: PropTypes.number.isRequired\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <h1>Welcome, {this.props.name}</h1>\r\n      <h2>Age, {this.props.age}\r\n    )\r\n  }\r\n} \r\n```\r\n\r\n- 使用 `propTypes` 并不是必需的，但这是一个非常棒的减少错误的实践\r\n- 使用 `PropTypes.element` 可以指定只传递一个子代\r\n- `defaultProps` 用来确保 `this.props` 在父组件没有指定的情况下有一个初始值\r\n- 类型检查发生在 `defaultProps` 赋值之后，所以类型检查也会应用在 `defaultProps` 上。\r\n\r\n### VUE\r\n\r\n#### Vue 组件间通信六种方式\r\n\r\nhttps://juejin.cn/post/6844903897258000398#heading-2\r\n\r\n#### Virtual Dom\r\n\r\nhttps://juejin.cn/post/6844903615652610055 TODO: 还没看...\r\n\r\n## Node\r\n\r\n### NodeJS 回调的错误处理方式及其优点\r\n\r\nNodeJS 通常使用回调模式，如果在执行期间发生错误，会把错误作为回调的第一个参数传递到回调函数中：\r\n\r\n```\r\nfs.readFile(filePath, function(err, data) {\r\n  if (err) {\r\n    // 错误处理，return 可以让执行停止，这非常重要\r\n    return console.log(err)\r\n  }\r\n  // 使用数据对象\r\n  console.log(data)\r\n}) \r\n```\r\n\r\n优点包括如下：\r\n\r\n- 如果不需要引用数据，则无需对数据进行处理\r\n- API 保持高度的一致性可以带来更多的便捷\r\n- 能够轻松适配回调模式，从而实现更易于维护的代码\r\n\r\n从下面的示例中可以看出，如果没有错误，回调函数中的第一个参数将为 null。但是如果出现错误的话，将会创建一个 Error 对象作为回调函数中的唯一参数。回调函数让用户更加容易的知道是否有错误发生。\r\n\r\n这种实践也称为 Node.js 的错误约定，这种回调函数的实现称为错误优先回调。\r\n\r\n```\r\nvar isTrue = function(value, callback) {\r\n  if (value === true) {\r\n    callback(null, \"Value was true.\")\r\n  } else {\r\n    callback(new Error(\"Value is not true!\"))\r\n  }\r\n}\r\n\r\nvar callback = function(error, data) {\r\n  if (error) {\r\n    console.log(error)\r\n    return\r\n  }\r\n  console.log(data)\r\n}\r\n\r\nisTrue(false, callback) // Error: Value is not true!\r\nisTrue(true, callback) // Value was true.\r\n```\r\n\r\n### REST\r\n\r\nREST（REpresentational State Transfer）是一种用于网络架构的软件设计模式。RESTful Web 应用程序使用和资源相关的信息方式对数据进行公开。\r\n\r\n通常，这个概念用于管理 Web 应用程序中的状态。对于大多数应用程序来说，他们对数据都有读取，创建，更新和销毁这四个共同的操作。数据模块化后形成单独的表，如 `posts`,`users`,`comments`，RESTful API 通过以下方式对数据进行访问：\r\n\r\n- 资源标识符。使用端点或 URL 来表示资源。\r\n- 服务器对资源的操作应该使用 HTTP 方法或动词。常见的 HTTP 方法有 GET，POST，PUT 和 DELETE。\r\n\r\n以下示例为包含 `posts` 资源的 HTTP 方法及 URL：\r\n\r\n- 读取：`/posts/`=> GET\r\n- 创建：`/posts/new`=> POST\r\n- 更新：`/posts/:id`=> PUT\r\n- 删除：`/posts/:id`=> DELETE\r\n- 除 RESTful 以外，GraphQL 也很受欢迎。\r\n\r\n### 如何避免地狱回调？\r\n\r\n如何避免以下这种地狱回调的情况？\r\n\r\n```\r\ngetData(function(a) {\r\n  getMoreData(a, function(b) {\r\n    getMoreData(b, function(c) {\r\n      getMoreData(c, function(d) {\r\n        getMoreData(d, function(e) {\r\n          // ...\r\n        })\r\n      })\r\n    })\r\n  })\r\n})\r\n```\r\n\r\n使用最佳的 `async/await` 进行替换\r\n\r\n```\r\nasync function asyncAwaitVersion() {\r\n  const a = await getData()\r\n  const b = await getMoreData(a)\r\n  const c = await getMoreData(b)\r\n  const d = await getMoreData(c)\r\n  const e = await getMoreData(d)\r\n  // ...\r\n} \r\n```\r\n\r\n### Node.js 中的事件循环？\r\n\r\nhttps://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/\r\n\r\nhttps://juejin.cn/post/6844903999506923528\r\n\r\n事件循环允许 Node.js 执行非阻塞的 I/O 操作，尽管 JavaScript 是单线程的。\r\n\r\n事件循环处理所有的异步回调。回调在一个循环中进行排队，当代码运行时，队列中的每一个回调在接收到响应时将逐个进行运行。当 Node.js 启动时会初始化事件循环，每一个事件循环都有如下顺序的六个循环阶段：\r\n\r\n```\r\n┌───────────────────────────┐\r\n┌─>│           timers          │\r\n│  └─────────────┬─────────────┘\r\n│  ┌─────────────┴─────────────┐\r\n│  │     pending callbacks     │\r\n│  └─────────────┬─────────────┘\r\n│  ┌─────────────┴─────────────┐\r\n│  │       idle, prepare       │\r\n│  └─────────────┬─────────────┘      ┌───────────────┐\r\n│  ┌─────────────┴─────────────┐      │   incoming:   │\r\n│  │           poll            │<─────┤  connections, │\r\n│  └─────────────┬─────────────┘      │   data, etc.  │\r\n│  ┌─────────────┴─────────────┐      └───────────────┘\r\n│  │           check           │\r\n│  └─────────────┬─────────────┘\r\n│  ┌─────────────┴─────────────┐\r\n└──┤      close callbacks      │\r\n   └───────────────────────────┘\r\n```\r\n\r\n## 前端模块化：CommonJS,AMD,CMD,ES6\r\n\r\nhttps://juejin.cn/post/6844903576309858318\r\n\r\n### ES6 模块与 CommonJS 模块的差异\r\n\r\n### 1. CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。\r\n\r\n- CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。\r\n- ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令`import`，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的`import`有点像 Unix 系统的“符号连接”，原始值变了，`import`加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。\r\n\r\n### 2. CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。\r\n\r\n- 运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。\r\n- 编译时加载: ES6 模块不是对象，而是通过 `export` 命令显式指定输出的代码，`import`时采用静态命令的形式。即在`import`时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。\r\n\r\nCommonJS 加载的是一个对象（即`module.exports`属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。\r\n\r\n## 从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理\r\n\r\nhttps://juejin.cn/post/6844903553795014663\r\n\r\n\r\n\r\n## 浏览器相关\r\n\r\n### cookie、localSrorage、session、indexDB\r\n\r\n| 特性         | cookie                                         | localStorage | sessionStorage | indexDB | Web SQL |\r\n| ------------ | ---------------------------------------------- | ------------ | -------------- | ------- | ------- |\r\n| 周期         | 可以服务器生成，可以前端设置。可以设置过期时间 | 长期         | 会话周期       | 长期    | 长期    |\r\n| 数据存储大小 | 4K                                             | 5M           | 5M             |         |         |\r\n| 与服务端通信 | 服务端设置的Cookie会携带在 header              |              |                |         |         |\r\n\r\n对于 `cookie`，我们还需要注意安全性。\r\n\r\n| 属性      | 作用                                                         |\r\n| --------- | ------------------------------------------------------------ |\r\n| value     | 如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识 |\r\n| http-only | 不能通过 JS 访问 Cookie，减少 XSS 攻击                       |\r\n| secure    | 只能在协议为 HTTPS 的请求中携带                              |\r\n| same-site | 规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击        |\r\n\r\n### 怎么判断页面是否加载完成？\r\n\r\n**`DOMContentLoaded`**当初始HTML文档已完全加载并解析，而无需等待样式表，图像和子帧完成加载时，将触发此事件。\r\n\r\n```javascript\r\nwindow.addEventListener('DOMContentLoaded', (event) => {\r\n    console.log('DOM fully loaded and parsed');\r\n});\r\n```\r\n\r\n**`load`**加载整个页面（包括所有相关资源，例如样式表和图像）时，将触发该事件。这与相反[`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event)，后者在页面DOM被加载后立即触发，而无需等待资源完成加载。\r\n\r\n```javascript\r\nwindow.addEventListener('load', (event) => {\r\n  console.log('page is fully loaded');\r\n});\r\n```\r\n\r\n### 重绘（Repaint）和回流（Reflow）\r\n\r\n重绘：不改变布局\r\n\r\n回流：需要改变布局\r\n\r\n回流一定发生重绘 重绘不一定发生回流\r\n\r\n- https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/24\r\n\r\n- https://juejin.cn/post/6844903682455109640#heading-45（很多人不知道的是，重绘和回流其实和 Event loop 有关。 \r\n\r\nTODO: 这里没理解...）\r\n\r\n- https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model\r\n\r\n#### 减少重绘和回流\r\n\r\n- 使用 `translate` 替代 `top`\r\n\r\n- 使用 `visibility` 替换 `display: none` ，因为前者只会引起重绘，后者会引发回流（改变了布局）\r\n\r\n- 合并多次对DOM和样式的修改，然后一次处理\r\n\r\n- 对于复杂动画效果,使用绝对定位让其脱离文档流\r\n\r\n- css3硬件加速（GPU加速）\r\n\r\n- 避免触发同步布局事件： 访问元素的一些属性的时候，会导致浏览器强制清空队列，进行强制同步布局。\r\n\r\n  ```javascript\r\n  function initP() {\r\n      for (let i = 0; i < paragraphs.length; i++) {\r\n          paragraphs[i].style.width = box.offsetWidth + 'px';\r\n      }\r\n  }\r\n  const width = box.offsetWidth;\r\n  function initP() {\r\n      for (let i = 0; i < paragraphs.length; i++) {\r\n          paragraphs[i].style.width = width + 'px';\r\n      }\r\n  }\r\n  ```\r\n\r\nhttps://segmentfault.com/a/1190000017329980\r\n\r\n### 图片优化\r\n\r\n##### 计算图片大小\r\n\r\n对于一张 100 * 100 像素的图片来说，图像上有 10000 个像素点，如果每个像素的值是 RGBA 存储的话，那么也就是说每个像素有 4 个通道，每个通道 1 个字节（8 位 = 1个字节），所以该图片大小大概为 39KB（10000 * 1 * 4 / 1024）。\r\n\r\n但是在实际项目中，一张图片可能并不需要使用那么多颜色去显示，我们可以通过减少每个像素的调色板来相应缩小图片的大小。\r\n\r\n了解了如何计算图片大小的知识，那么对于如何优化图片，想必大家已经有 2 个思路了：\r\n\r\n- 减少像素点\r\n- 减少每个像素点能够显示的颜色\r\n\r\n##### 图片加载优化\r\n\r\n1. 不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用 CSS 去代替。\r\n\r\n2. 对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。还可以返回webp等图片\r\n\r\n3. 小图使用 base64 格式\r\n\r\n4. 将多个图标文件整合到一张图片中（雪碧图）\r\n\r\n5. 选择正确的图片格式：\r\n\r\n   - 对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好。安卓、PC支持都还不错，IOS移动端需要注意\r\n\r\n     ```javascript\r\n     // 判断兼容性\r\n     const isSupportWebp = process.browser ? !![].map && document.createElement('canvas').toDataURL('image/webp').indexOf('data:image/webp') === 0 : false\r\n     ```\r\n\r\n   - 小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替\r\n\r\n   - 照片使用 JPEG\r\n\r\n### 其他文件优化\r\n\r\nCSS 文件放在 `head` 中\r\n\r\n服务端开启文件压缩功能 GZIP\r\n\r\n将 `script` 标签放在 `body` 底部，因为 JS 文件执行会阻塞渲染。当然也可以把 `script` 标签放在任意位置然后加上 `defer` ，表示该文件会并行下载，但是会放到 HTML 解析完成后顺序执行。对于没有任何依赖的 JS 文件可以加上 `async` ，表示加载和渲染后续文档元素的过程将和  JS 文件的加载与执行并行无序进行。\r\n\r\n执行 JS 代码过长会卡住渲染，对于需要很多时间计算的代码可以考虑使用 `Webworker`。`Webworker` 可以让我们另开一个线程执行脚本而不影响渲染。\r\n\r\n#### CDN\r\n\r\n静态资源尽量使用 CDN 加载，由于浏览器对于单个域名有并发请求上限，可以考虑使用多个 CDN 域名。对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，否则每次请求都会带上主站的 Cookie。\r\n\r\n#### 使用 Webpack 优化项目\r\n\r\n- 对于 Webpack4，打包项目使用 production 模式，这样会自动开启代码压缩\r\n- 使用 ES6 模块来开启 tree shaking，这个技术可以移除没有使用的代码\r\n- 优化图片，对于小图可以使用 base64 的方式写入文件中\r\n- 按照路由拆分代码，实现按需加载\r\n- 给打包出来的文件名添加哈希，实现浏览器缓存文件\r\n\r\n### Webpack\r\n\r\n...\r\n\r\n## 网络\r\n\r\n### TCP 3次握手\r\n\r\n在 TCP 协议中，主动发起请求的一端为客户端，被动连接的一端称为服务端。不管是客户端还是服务端，TCP 连接建立完后都能发送和接收数据，所以 TCP 也是一个全双工的协议。\r\n\r\n起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建完 TCB 后遍进入 LISTEN 状态，此时开始等待客户端发送数据。\r\n\r\n**第一次握手**\r\n\r\n客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入  SYN-SENT 状态，`x` 表示客户端的数据通信初始序号。\r\n\r\n**第二次握手**\r\n\r\n服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。\r\n\r\n**第三次握手**\r\n\r\n当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。\r\n\r\nPS：第三次握手可以包含数据，通过 TCP 快速打开（TFO）技术。其实只要涉及到握手的协议，都可以使用类似 TFO 的方式，客户端和服务端存储相同 cookie，下次握手时发出 cookie 达到减少 RTT 的目的。\r\n\r\n**你是否有疑惑明明两次握手就可以建立起连接，为什么还需要第三次应答？**\r\n\r\n因为这是为了防止失效的连接请求报文段被服务端接收，从而产生错误。\r\n\r\n可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求。如果连接请求 A 在两端关闭后终于抵达了服务端，那么这时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并进入 ESTABLISHED 状态。此时客户端其实是 CLOSED 状态，那么就会导致服务端一直等待，造成资源的浪费。\r\n\r\nPS：在建立连接中，任意一端掉线，TCP 都会重发 SYN 包，一般会重试五次，在建立连接中可能会遇到 SYN FLOOD 攻击。遇到这种情况你可以选择调低重试次数或者干脆在不能处理的情况下拒绝请求。\r\n\r\n### TCP 拥塞控制\r\n\r\n拥塞处理和流量控制不同，后者是作用于接收方，保证接收方来得及接受数据。而前者是作用于网络，防止过多的数据拥塞网络，避免出现网络负载过大的情况。\r\n\r\n拥塞处理包括了四个算法，分别为：慢开始，拥塞避免，快速重传，快速恢复。\r\n\r\n### 慢开始算法\r\n\r\n慢开始算法，顾名思义，就是在传输开始时将发送窗口慢慢指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。\r\n\r\n慢开始算法步骤具体如下\r\n\r\n1. 连接初始设置拥塞窗口（Congestion Window） 为 1 MSS（一个分段的最大数据量）\r\n2. 每过一个 RTT 就将窗口大小乘二\r\n3. 指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值时就会启动拥塞避免算法。\r\n\r\n### 拥塞避免算法\r\n\r\n拥塞避免算法相比简单点，每过一个 RTT 窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢将大小调整到最佳值。\r\n\r\n在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行以下步骤：\r\n\r\n- 将阈值设为当前拥塞窗口的一半\r\n- 将拥塞窗口设为 1 MSS\r\n- 启动拥塞避免算法\r\n\r\n### 快速重传\r\n\r\n快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号（没有 Sack 的情况下）。如果收到三个重复的 ACK，无需等待定时器超时再重发而是启动快速重传。具体算法分为两种：\r\n\r\n**TCP Taho 实现如下**\r\n\r\n- 将阈值设为当前拥塞窗口的一半\r\n- 将拥塞窗口设为 1 MSS\r\n- 重新开始慢开始算法\r\n\r\n**TCP Reno 实现如下**\r\n\r\n- 拥塞窗口减半\r\n- 将阈值设为当前拥塞窗口\r\n- 进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该阶段）\r\n- 使用拥塞避免算法\r\n\r\n### TCP New Ren 改进后的快恢复\r\n\r\n**TCP New Reno** 算法改进了之前 **TCP Reno** 算法的缺陷。在之前，快恢复中只要收到一个新的 ACK 包，就会退出快恢复。\r\n\r\n在 **TCP New Reno** 中，TCP 发送方先记下三个重复 ACK 的分段的最大序号。\r\n\r\n假如我有一个分段数据是 1 ~ 10 这十个序号的报文，其中丢失了序号为 3 和 7 的报文，那么该分段的最大序号就是 10。发送端只会收到 ACK 序号为 3 的应答。这时候重发序号为 3 的报文，接收方顺利接收并会发送 ACK 序号为 7 的应答。这时候 TCP 知道对端是有多个包未收到，会继续发送序号为 7 的报文，接收方顺利接收并会发送 ACK 序号为 11 的应答，这时发送端认为这个分段接收端已经顺利接收，接下来会退出快恢复阶段。\r\n\r\n### HTTPS 握手\r\n\r\nHTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密。\r\n\r\n### TLS\r\n\r\nTLS 协议位于传输层之上，应用层之下。首次进行 TLS 协议传输需要两个 RTT ，接下来可以通过 Session Resumption 减少到一个 RTT。\r\n\r\n在 TLS 中使用了两种加密技术，分别为：对称加密和非对称加密。\r\n\r\n**对称加密**：\r\n\r\n对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。\r\n\r\n**非对称加密**：\r\n\r\n有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。\r\n\r\n#### 从输入 URL 到页面加载全过程\r\n\r\n1. 首先做 DNS 查询，如果这一步做了智能 DNS 解析的话，会提供访问速度最快的 IP 地址回来\r\n2. 接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了\r\n3. TCP 握手结束后会进行 TLS 握手，然后就开始正式的传输数据\r\n4. 数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件\r\n5. 首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错\r\n6. 浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件\r\n7. 文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 `script` 标签的话，会判断是否存在 `async` 或者 `defer` ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP 2.0 协议的话会极大的提高多图的下载效率。\r\n8. 初始的 HTML 被完全加载和解析后会触发 `DOMContentLoaded` 事件\r\n9. CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西\r\n10. 在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了\r\n\r\n#### HTTP 常用返回码\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Status\r\n\r\nHTTP响应状态代码指示特定的[HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP)请求是否已成功完成。响应分为五类：\r\n\r\n1. [信息反馈](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#information_responses)（`100`– `199`）\r\n2. [成功的回应](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#successful_responses)（`200`– `299`）\r\n3. [重定向](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#redirection_messages)（`300`– `399`）\r\n4. [客户端错误](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses)（`400`– `499`）\r\n5. [服务器错误](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#server_error_responses)（`500`– `599`）\r\n\r\n**2XX 成功**\r\n\r\n- 200 OK，表示从客户端发来的请求在服务器端被正确处理\r\n- 204 No content，表示请求成功，但响应报文不含实体的主体部分\r\n- 205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容\r\n- 206 Partial Content，进行范围请求\r\n\r\n**3XX 重定向**\r\n\r\n- 301 moved permanently，永久性重定向，表示资源已被分配了新的 URL\r\n- 302 found，临时性重定向，表示资源临时被分配了新的 URL\r\n- 303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源\r\n- 304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况\r\n- 307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求\r\n\r\n**4XX 客户端错误**\r\n\r\n- 400 bad request，请求报文存在语法错误\r\n- 401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息\r\n- 403 forbidden，表示对请求资源的访问被服务器拒绝\r\n- 404 not found，表示在服务器上没有找到请求的资源\r\n- 429 Too Many Requests 用户在给定的时间内发送了太多请求（“速率限制”）\r\n\r\n**5XX 服务器错误**\r\n\r\n- 500 internal sever error，表示服务器端在执行请求时发生了错误\r\n- 501 Not Implemented，表示服务器不支持当前请求所需要的某个功能\r\n- 502 Bad Gateway 此错误响应意味着服务器在充当网关以获取处理请求所需的响应的同时，获得了无效的响应。\r\n- 503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求\r\n\r\n### 数据结构算法\r\n\r\nhttps://github.com/xiaotiandada/blog/issues/48\r\n\r\n## Security\r\n\r\n### 什么是跨站点脚本攻击（XSS）\r\n\r\nXSS 是指客户端代码注入，攻击者将带有恶意脚本的代码注入到合法的网站或 web 应用程序中。这通常发生在应用程序对用户的输入不进行验证时，这样恶意代码就会轻松的注入到动态的 HTML 内容中。\r\n\r\n- 可以使用工具库过滤xss https://www.npmjs.com/package/xss\r\n\r\n- 恶意的脚本有权限访问到通常用于存储会话令牌的 cookie。\r\n- 当页面中注入的恶意脚本执行时，就可以对该页面中的 DOM 进行任意操作。这样一来，攻击者不仅可以插入与网站相似的内容或操作，也可以窜改网站上原有的实际内容。该脚本还可以使用 AJAX 发送带有任意内容的 HTTP 请求到任意一台服务器上。\r\n- 在客户端，可以使用 `textContent` 来代替 `innerHTML` 以阻止浏览器运行通过 HTML 解析器执行内部脚本得到的字符串。\r\n- 在服务器端，转义 HTML 标签可以阻止浏览器将用户的输入解析为真实的 HTML，这样也不会执行脚本。但如果你想真实的展现用户的输入，那就只能对会被注入的标签、标签属性进行过滤。\r\n\r\n\r\n\r\n## 其他\r\n\r\n### 什么是大 O 符号？\r\n\r\n大 O 符号在计算机科学中 用来描述算法的时间复杂度。执行速度快且复杂性低的算法视为优秀的算法。\r\n 算法的运行次数并不是每次都相同，大部分取决于所提供的数据。在某些情况下，他们执行的很快，但某些情况下，他们却执行的很慢（哪怕他们的数据是一样多）。\r\n\r\n以下示例中，我们假设基准时间为：1element = 1ms\r\n\r\n#### O(1)\r\n\r\n```\r\narr[arr.length - 1] // 1000 elements = 1ms\r\n```\r\n\r\n时间复杂度恒定。无论数组有多少元素，理论（不考虑机器性能、当前环境等因素）上他执行的时间总量是相同的。\r\n\r\n#### O(N)\r\n\r\n```\r\narr.filter(fn) // 1000 elements = 1000ms\r\n```\r\n\r\n线性时间复杂度。执行时间将随数组元素个数呈线性增加。如果数组拥有 1000 个元素且函数运行需要花费 1ms，那么 7000 个元素需要执行 7ms。这是因为函数在返回结果之前必须迭代数组中的所有元素。\r\n\r\n#### O([1, N])\r\n\r\n```\r\narr.some(fn) // 1000 elements = 1ms <= x <= 1000ms\r\n```\r\n\r\n执行时间的长短取决于提供给函数的数据，他需要的时间可能很短，也可能很长。最好的情况是 O(1)，最坏的情况是 O(N)。\r\n\r\n#### O(NlogN)\r\n\r\n```\r\narr.sort(fn) // 1000 elements ~= 10000ms\r\n```\r\n\r\n浏览器通常为 `sort()` 方法使用快速排序算法进行实现，快速排序的平均时间复杂度为 O(NlogN)。这对于数据很多的集合非常有效。\r\n\r\n#### O(N^2)\r\n\r\n```\r\nfor (let i = 0; i < arr.length; i++) {\r\n  for (let j = 0; j < arr.length; j++) {\r\n    // 1000 elements = 1000000ms\r\n  }\r\n} \r\n```\r\n\r\n执行时间随元素数量呈二次方增长。这通常是由于使用了嵌套循环。\r\n\r\n#### O(N!)\r\n\r\n```\r\n// 1000 elements = Infinity ms\r\nconst permutations = arr => {\r\n  if (arr.length <= 2) return arr.length === 2 ? [arr, [arr[1], arr[0]]] : arr\r\n  return arr.reduce(\r\n    (acc, item, i) =>\r\n      acc.concat(\r\n        permutations([...arr.slice(0, i), ...arr.slice(i + 1)]).map(val => [\r\n          item,\r\n          ...val\r\n        ])\r\n      ),\r\n    []\r\n  )\r\n} \r\n```\r\n\r\n数组中即使只增加一个元素，也会使执行时间增加的非常长。\r\n\r\n- 嵌套循环的执行时间会随着元素的增长呈指数增长，因此遇到嵌套循环需考虑到性能问题。\r\n\r\n\r\n\r\n...\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<ol>\n<li><a href=\"https://juejin.cn/post/6844903673009553416#heading-59\">2018前端面试总结</a></li>\n<li><a href=\"https://ld246.com/article/1544793046274\">每天 30 秒系列之前端面试</a></li>\n<li><a href=\"https://juejin.cn/post/6844903682455109640\">2万5千字大厂面经 | 掘金技术征文</a></li>\n</ol>\n<h2 id=\"html\">HTML</h2>\n<h3 id=\"图片标签中的-alt-有什么作用？\">图片标签中的 alt 有什么作用？</h3>\n<ol>\n<li>当图片无法加载的时候， alt 的属性值会以文字的形式替代图片显示。alt 属性是用来描述图片内容的，当图片作为背景等装饰时，alt 属性应该为空。</li>\n<li>装饰作用的图片 alt 属性应该为空</li>\n<li>网站爬虫根据其属性值来理解图片的内容，因此 alt 属性对 SEO（搜索引擎优化） 来说非常重要</li>\n<li>alt 值应以句号结尾，以提高可访问性</li>\n<li>网速过慢导致图片加载需较长一段时间时，在图片加载完成之前，会显示 alt 属性值来替代图片。</li>\n</ol>\n<h3 id=\"简述-script-标签中的-defer-和-async-属性\">简述 <code>&lt;script&gt;</code> 标签中的 defer 和 async 属性</h3>\n<ol>\n<li><p>如果两个属性都没有（默认行为），脚本的下载和执行将会按照文档的先后顺序同步进行。当脚本下载和执行的时候，文档解析就会被阻塞，在脚本下载和执行完成之后文档才能往下继续进行解析。</p>\n</li>\n<li><p><code>defer</code> 属性表示脚本按顺序被解析到时就开始下载，下载过程中文档继续进行解析，当文档全部解析完成之后便开始执行下载好的脚本，这相当于在 <code>DOMContentLoaded</code> 的监听事件内进行执行。虽然 <code>defer</code> 属性的脚本需要等到文档解析完才开始执行，但其执行是有顺序的。</p>\n</li>\n<li><p><code>async</code> 属性表示脚本按顺序被解析到时就开始下载，下载过程中文档继续进行解析，当下载完成后文档停止解析开始执行下载好的脚本，脚本执行完后继续解析文档。<code>async</code> 脚本由于网络等的影响将不会按照顺序执行。</p>\n</li>\n</ol>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"myscript.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"myscript.js\"</span> defer<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"myscript.js\"</span> async<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span> </code></pre><ol start=\"4\">\n<li>把带 <code>defer</code> 属性的脚本放在 <code>&lt;head&gt;</code> 中比无属性的脚本放在 <code>&lt;/body&gt;</code> 之前要更好，因为浏览器在页面解析时可对带 <code>defer</code> 属性的脚本进行下载。</li>\n<li>如果脚本相互依赖，请使用 <code>defer</code>。</li>\n<li>如果脚本是独立的，请使用 <code>async</code>。</li>\n<li>如果 DOM 必须解析好才执行且执行函数没有放在 <code>DOMContentLoaded</code> 的监听器中，请使用 <code>defer</code>。</li>\n</ol>\n<h3 id=\"什么是-dom？\">什么是 DOM？</h3>\n<p>DOM（文档对象模型）是可扩展标记语言的标准编程接口，用来处理如 HTML 或 XML 这样由节点组成的树形结构的标记语言。这些节点（例如元素和文本节点）都是能够被编程接口操作的对象，他们任何可见的改变都会在文档中实时反映出来。在浏览器中，这些接口可供 JavaScript 进行使用，使其操作 DOM 节点来改变他们的样式、内容、在文档中的位置或者通过事件监听器来进行交互。</p>\n<ol>\n<li>DOM 的设计与特定的编程语言相独立，以便使文档的结构化表述可以通过单一、一致的 API 获得。</li>\n<li>随着页面的加载，DOM 在浏览器中是逐步构建的，因此脚本通常放在页面底部，或设置 <code>defer</code> 属性后置于 <code>&lt;head&gt;</code> 中，或放在 <code>DOMContentLoaded</code> 事件监听器内部。为了避免错误，脚本对 DOM 节点的操作应该放在 DOM 完成构建之后。</li>\n<li><code>document.getElementById()</code> 和 <code>document.querySelector()</code> 是用来选择 DOM 节点的常用方法。</li>\n<li><code>BOM</code> 主要处理浏览器窗口和框架，不过通常浏览器特定的 <code>JavaScript</code> 扩展都被看做 BOM 的一部分。<code>window</code> 对象的属性和方法通常被称为 <code>BOM</code>。<code>DOM</code> 描述了处理网页内容的方法和接口，<code>BOM</code> 描述了与浏览器进行交互的方法和接口。</li>\n</ol>\n<h3 id=\"xhtml-和-html-有什么不同\">XHTML 和 HTML 有什么不同?</h3>\n<ol>\n<li>XHTML 是更严格更纯净的 HTML 代码，他必须包含 <code>&lt;DOCTYPE&gt;</code></li>\n<li>XHTML 属性值必须使用双引号扩起来</li>\n<li>XHTML 属性值不能省略。如 <code>checked=&quot;checked&quot;</code> 不能简写为 <code>checked</code></li>\n<li>XHTML 元素必须被正确地嵌套。</li>\n<li>XHTML 元素必须被关闭 如 <code>&lt;br&gt;</code> 必须写为 <code>&lt;br /&gt;</code></li>\n<li>XHTML 标签名必须使用小写字母</li>\n<li>XHTML 文档必须拥有根元素</li>\n<li>XHTML 中特殊字符必须转译</li>\n<li>不同的浏览器对 HTML 标签嵌套错误的兼融性处理存在一定的区别。当嵌套错误时，可能会导致在某些浏览器上依旧能正常显示，而某些浏览器上则显示错乱甚至出现 JavaScript 报错。</li>\n</ol>\n<h3 id=\"relnoopener--应在什么场景下使用，为什么？\">rel=&quot;noopener&quot;  应在什么场景下使用，为什么？</h3>\n<ol>\n<li><code>rel=&quot;noopener&quot;</code> 是 <code>&lt;a&gt;</code> 超链接标签的一个属性。他可以禁止打开的新页面中使用 <code>window.opener</code> 属性，这样一来打开的新页面就不能通过 <code>window.opener</code> 去操作你的页面, 否则就会导致严重的安全漏洞。</li>\n<li>如果使用 JavaScript 打开的页面，可以通过如下代码解决：</li>\n</ol>\n<pre><code>var hacpaiWindow = window.open('https://hacpai.com');\nhacpaiWindow.opener = null;</code></pre><h3 id=\"什么是-html5-存储？解释一下-localstorage-和-sessionstorage\">什么是 HTML5 存储？解释一下 <code>localStorage</code> 和 <code>sessionStorage</code></h3>\n<ol>\n<li>页面可以在用户的浏览器中存储本地数据 这些数据以 key/value 的格式进行存储。</li>\n<li>通过 <code>localStorage</code> 存储的数据是持久化的 不会过期，除非清除缓存。</li>\n<li><code>sessionStorage</code> 存储数据的生命周期和顶层窗口或浏览器标签页的一样。当标签页被永久关闭，通过 <code>sessionStorage</code> 存储的数据也将被删除。同一个页面被浏览器的两个标签页打开，这两个标签页中的 <code>sessionStorage</code> 数据是互相独立的。</li>\n<li>还有Cookie也可以存储数据</li>\n<li>localStorage 比 cookie 要大（5MB左右）</li>\n</ol>\n<h3 id=\"mime-type\">MIME type</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types</a></p>\n<blockquote>\n<p>没用过...</p>\n</blockquote>\n<h3 id=\"新标签兼容低版本\">新标签兼容低版本</h3>\n<p>ie9之前版本通过createElement创建html5新标签\n引入html5shiv.js <a href=\"https://github.com/aFarkas/html5shiv\">https://github.com/aFarkas/html5shiv</a></p>\n<h2 id=\"css\">CSS</h2>\n<h3 id=\"css盒模型\">CSS盒模型</h3>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* 标准模型 */</span>\n<span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span>content-box<span class=\"token punctuation\">;</span>\n <span class=\"token comment\">/*IE模型*/</span>\n<span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span>border-box<span class=\"token punctuation\">;</span></code></pre><p>盒模型分为IE盒模型和W3C标准盒模型。\nIE盒模型和W3C标准盒模型的区别是什么？</p>\n<ol>\n<li><p>W3C 标准盒模型：\n属性width,height只包含内容content，不包含border和padding。</p>\n</li>\n<li><p>IE 盒模型：\n属性width,height包含border和padding，指的是content+padding+border。</p>\n</li>\n</ol>\n<p>在ie8+浏览器中使用哪个盒模型可以由box-sizing(CSS新增的属性)控制，默认值为content-box，即标准盒模型；如果将box-sizing设为border-box则用的是IE盒模型。如果在ie6,7,8中DOCTYPE缺失会触发IE模式。在当前W3C标准中盒模型是可以通过box-sizing自由的进行切换的。\ncontent-box（标准盒模型）\nwidth = 内容的宽度\nheight = 内容的高度\nborder-box（IE盒模型）\nwidth = border + padding + 内容的宽度\nheight = border + padding + 内容的高度</p>\n<h3 id=\"bem\">BEM</h3>\n<p>BEM（Block, Element, Modifier）是一种基于组件的对 CSS 类名进行约定的 Web 开发方法。</p>\n<p><a href=\"https://www.w3cplus.com/css/css-architecture-1.html\">https://www.w3cplus.com/css/css-architecture-1.html</a></p>\n<p><a href=\"https://css-tricks.com/bem-101/\">https://css-tricks.com/bem-101/</a></p>\n<h3 id=\"css-预处理器有什么优势？\">CSS 预处理器有什么优势？</h3>\n<p>CSS 预处理器添加了一些实用的原生 CSS 没有的的功能，并且他通过使用 DRY（Don&#39;t Repeat Yourself）原则使生成的 CSS 更加整洁和易于维护</p>\n<ul>\n<li>CSS 预处理器虽然允许我们编写易于维护和可扩展的 CSS，但需要安装、配置、编译等（一般项目都配置好了</li>\n<li>CSS 预处理器还包含文件切分、模块化、运算、函数等优势</li>\n<li>目前主流的 CSS 预处理器有： <a href=\"https://link.ld246.com/forward?goto=https%3A%2F%2Fsass-lang.com%2F\">Sass</a>、<a href=\"https://link.ld246.com/forward?goto=http%3A%2F%2Flesscss.org%2F\">Less</a>、<a href=\"https://link.ld246.com/forward?goto=http%3A%2F%2Fstylus-lang.com%2F\">Stylus</a></li>\n<li>CSS 除了预处理器外还有后置处理器（Postprocessor），如：<a href=\"https://link.ld246.com/forward?goto=https%3A%2F%2Fgithub.com%2Fpostcss%2Fautoprefixer\">Autoprefixer</a> 等</li>\n<li>CSS 变量虽然已被大多数浏览器支持，但语法及可用性都不如 CSS 预处理器。</li>\n</ul>\n<h3 id=\"使用-flexbox，create-3-col-布局--col-n--12\">使用 flexbox，Create 3 Col 布局  col-{n} / 12</h3>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.row</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.row_col</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> aqua<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.row_col-2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.row_col-4</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> 4<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.row_col-7</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> 7<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>row<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>row_col row_col-2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>row_col row_col-7<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>row_col row_col-4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre><h3 id=\"media\"><code>@media</code></h3>\n<p><code>@media</code> 是可根据一个或多个基于媒体特征、媒体类型等条件来使用样式的规则。其包含以下四种媒体类型：</p>\n<ul>\n<li><code>all</code>：适用于所有设备，默认选项</li>\n<li><code>print</code>：仅适用于打印设备</li>\n<li><code>screen</code>：仅适用于台式机、平板电脑、手机等屏幕</li>\n<li><code>speech</code>：仅适用于屏幕阅读器</li>\n<li>其余的媒体类型：<code>tty</code>，<code>tv</code>，<code>projection</code>，<code>handheld</code>，<code>braille</code>，<code>embossed</code>，<code>aural</code> 在 Media Queries Level 3 中已被废弃</li>\n<li>可以使用逻辑操作符（<code>,</code>，<code>only</code>，<code>and</code>，<code>not</code>）组合媒体类型</li>\n<li>iPhone X 系列存在安全距离，其 @media 识别如下：(自己没有用过 一般只判断了底部的安全距离 <a href=\"https://aotu.io/notes/2017/11/27/iphonex/index.html\">网页适配 iPhoneX</a>)</li>\n</ul>\n<pre><code>// iPhone XR 1792x828px at 326ppi\n@media only screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) {\n    ...\n}\n// iPhone XS 2436x1125px at 458ppi\n@media only screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) {\n    ...\n}\n// iPhone XS Max 2688x1242px at 458ppi\n@media only screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) {\n    ...\n}</code></pre><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, viewport-fit=cover<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> <span class=\"token function\">constant</span><span class=\"token punctuation\">(</span>safe-area-inset-bottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span>safe-area-inset-bottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre><h3 id=\"描述-css-盒子模型布局并简要描述\">描述 CSS 盒子模型布局并简要描述</h3>\n<p>CSS 盒子模型（Box Model）布局包含内容（content）、内边距（padding）、边框（border）、外边距（margin）四个部分。</p>\n<ul>\n<li>content：盒子内部填充元素内容（例如文本、图像或视频播放器等）的区域。他的大小为 <code>content-box</code> 的宽和高。相关 CSS 属性为 <code>width</code>，<code>min-width</code>，<code>max-width</code>，<code>height</code>，<code>min-height</code>，<code>max-height</code>。</li>\n<li>padding：内容周围的区域。他的大小为 <code>padding-box</code> 的宽和高。由 CSS 中的 <code>padding</code> 属性控制。</li>\n<li>border：边框，在内边距的外围。他的大小为 <code>border-box</code> 的宽和高。由 CSS 中的 <code>border</code> 属性控制。</li>\n<li>margin：最外围的透明区域，即边框外围区域。他可以将 DOM 中相邻的元素分开。他的大小为 <code>margin-box</code> 的宽和高。由 CSS 中的 <code>margin</code> 属性控制。</li>\n</ul>\n<p><img src=\"https://img.hacpai.com/e/cf8a06004b444fb895eb315d78f46324.gif\" alt=\"alt text\"></p>\n<ul>\n<li>标准盒模型：属性 width / height 只包含 content，不包含 border 和 padding</li>\n<li>IE 盒模型：属性 width / height 包含 content + padding + border</li>\n<li>IE6/7/8 中 DOCTYPE 缺失会触发 IE 盒模型，标准中可使用 <code>box-sizing</code> 属性进行控制：content-box | border-box | inherit</li>\n<li>JavaScript 如何设置和获取盒模型对应的宽和高</li>\n<li><code>element.style.width / height</code> 只能取到行内样式的宽和高，style 标签中和 link 外链的样式无法获取</li>\n<li><code>window.getComputedStyle(element).width / height</code> 获取元素的宽或高：content + padding + border + &#39;px&#39;</li>\n<li><code>dom.getBoundingClientRect().width / height</code> 同上，但返回值为数字类型，不含 <code>px</code></li>\n<li>页面中多个元素的流布局属于格式化上下文（formatting context），这个元素可能是块元素也可能是行内元素。块元素的为 BFC（Block formatting contexts），行内元素的为 IFC（Inline formatting contexts）。常见场景如：垂直块元素 <code>margin</code> 重叠；行内元素高度由 <code>line-height</code> 决定等。</li>\n</ul>\n<h3 id=\"em--rem-区别\"><code>em</code>  <code>rem</code> 区别</h3>\n<p><code>em</code> 和 <code>rem</code> 都是基于 <code>font-size</code> 的 CSS 属性。唯一的区别是他们继承的对象不同。</p>\n<ul>\n<li><code>em</code> 继承父元素中的 <code>font-size</code></li>\n<li><code>rem</code> 继承根元素（<code>html</code>）中的 <code>font-size</code></li>\n<li>在大多数浏览器中，根元素的 <code>font-size</code> 默认值为 <code>16px</code></li>\n</ul>\n<p><strong>其他单位</strong></p>\n<ul>\n<li>vh<code>和</code>vw<code>：窗口高度或宽度的 1/100。可脱离父元素的继承规则，如：窗口高 900px，父元素高 1200px，1vh 为 9px。</code></li>\n<li><code>vmin</code> 和 <code>vmax</code>：窗口高、宽取其最大或最小的 1/100。主要用于手机屏幕旋转，如：窗口高 900px，宽 600px，1vmin 为 6px，1vmax 为 9px</li>\n<li>ex<code>和</code>ch<code>：分别为小写 x 的高度和数字 0 的宽度。主要用于精细排版中。</code> (没用过)</li>\n<li><code>mm</code> 毫米、<code>cm</code> 厘米、<code>in</code> 英寸、<code>pt</code> 点（1/72 英寸）、<code>pc</code> 十二点活字（12 pt）。这些绝对单位之间的关系为：1in = 2.54cm = 25.4mm = 72pt = 6pc （没用过</li>\n<li>px </li>\n<li>% 百分比</li>\n</ul>\n<p><img src=\"https://img.hacpai.com/file/2018/12/image-52a5242f.png?imageView2/2/interlace/1/format/webp\" alt=\"imagepng\"></p>\n<ul>\n<li>其中 <code>rem</code>、<code>em</code> 、<code>vh</code>、<code>vx</code>、<code>vmin</code>、<code>vmax</code>、<code>%</code> 通常用于自适应方案中</li>\n<li>移动端可采用 <code>viewport</code> 进行响应式设计 <a href=\"https://www.runoob.com/css/css-rwd-viewport.html\">https://www.runoob.com/css/css-rwd-viewport.html</a></li>\n</ul>\n<h3 id=\"css-sprites\">CSS sprites</h3>\n<ol>\n<li>CSS sprites 将多张图片合并为一张图片，从而减少浏览器对 HTTP 的请求数量，进而减少网页的加载时间。即使在 HTTP/2 协议下，这依旧可以减少网页的加载时间。</li>\n<li>在 HTTP/1.1 中，每个 TCP 连接只允许一个请求。现代浏览器虽然可以打开多个（2-8）并行的 TCP 连接，但连接数量依旧有限。</li>\n<li>HTTP/2 允许浏览器和服务器之间的多个请求在一个 TCP 连接上进行复用。 这意味着 TCP 连接被更有效的使用了：同一个页面在打开和关闭 TCP 连接的次数被减少了，客户端和服务器之间的延迟也被减少了。这样一来，数十个图片就可以在同一个 TCP 连接中并行加载了。</li>\n<li>在 CSS 中使用 sprites 需要用到 CSS 中的 <code>background-image</code>、<code>background-position</code> 及 <code>background-size</code> 等属性</li>\n</ol>\n<h3 id=\"css-优先级\">CSS 优先级</h3>\n<p><strong>权重记忆口诀</strong>：<em>从0开始，一个行内样式+1000，一个id选择器+100，一个属性选择器、class或者伪类+10，一个元素选择器，或者伪元素+1，通配符+0。</em></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/41604775\">https://zhuanlan.zhihu.com/p/41604775</a></p>\n<h2 id=\"javascript\">Javascript</h2>\n<h3 id=\"js中数据类型\">JS中数据类型</h3>\n<p><strong>基本数据类型</strong>： undefined、null、Boolean、Number、String和Symbol(ES6)\n<strong>引用数据类型</strong>： Object(Array, Date, RegExp, Function)</p>\n<h3 id=\"基本数据类型和引⽤类型在存储上的差别\">基本数据类型和引⽤类型在存储上的差别</h3>\n<p>前者存储在栈上，后者存储在堆上(没太理解...)</p>\n<h3 id=\"var、let、const-和没有关键字的声明有什么区别？\"><code>var</code>、<code>let</code>、<code>const</code> 和没有关键字的声明有什么区别？</h3>\n<h4 id=\"无关键字\">无关键字</h4>\n<p>在变量赋值之前如果没有关键字的话，则会把变量分配给全局变量或覆盖已经声明的变量。在非严格模式下将会把变量做为全局对象（浏览器中的 <code>window</code>）的一个属性。在严格模式下，他将抛出异常以防止创建不需要的全局变量。</p>\n<h4 id=\"var\">var</h4>\n<p><code>var</code> 是 ES2015 以前声明变量的默认语句。他在函数作用域内创建的变量可以在该作用域中被重新赋值和重新声明。</p>\n<p>以下代码片断中，在执行 <code>setTimeout</code> 回调时，循环完已经完成且变量 <code>i</code> 变为了 10，因此十个回调都引用了函数作用域中的同一个变量。</p>\n<pre><code>for (var i = 0; i < 10; i++) {\n  setTimeout(() => {\n    console.log(i) // 10\n  })\n}</code></pre><p>可以通过创建一个新的函数作用域来解决此问题</p>\n<pre><code>for (var i = 0; i < 10; i++) {\n  ;(i => {\n    setTimeout(() => {\n      console.log(i)\n    })\n  })(i)\n} </code></pre><h4 id=\"let\">let</h4>\n<p><code>let</code> 是在 ES2015 中引入的，他是一种可在变量声明后可再赋值的常用声明方式。再次声明相同的变量将会抛出异常。他是有块作用域的，因此在循环中使用时将会保持在同一个作用域下迭代。</p>\n<pre><code>for (let i = 0; i < 10; i++) {\n  setTimeout(() => {\n    console.log(i) // 0 1 2...9\n  })\n} </code></pre><h4 id=\"const\">const</h4>\n<p><code>const</code> 是在 ES2015 中引入的，他是一种新的默认的常用的声明方式。他声明的所有变量将不可再被重新赋值，如果是对象的话，必须保持对象的引用不变。他是块作用域的，且不能被再次赋值。</p>\n<pre><code>const myObject = {}\nmyObject.prop = \"hello!\" \nmyObject = \"hello\" // Uncaught TypeError: Assignment to constant variable.</code></pre><ul>\n<li>所有声明在其范围内都会被提升。</li>\n<li><code>let</code> 和 <code>const</code> 中有一个称为时间死区（temporal dead zone TDZ）的概念。虽然声明会被提升，但在进入作用域之后、声明之前他将无法被访问。</li>\n<li>尽可能避免使用 <code>var</code> 使用 <code>let</code> 代替</li>\n<li><code>const</code> 声明不变常量 <code>let</code> 声明可变变量</li>\n</ul>\n<h3 id=\"变量提升\">变量提升</h3>\n<p>当执行 JS 代码时，会生成执行环境，只要代码不是写在函数中的，就是在全局执行环境中，函数中的代码会产生函数执行环境，只此两种执行环境。</p>\n<p><code>var</code></p>\n<pre class=\"language-react\"><code class=\"language-react\">b() // call b\nconsole.log(a) // undefined\n\nvar a = 'Hello world'\n\nfunction b() {\n    console.log('call b')\n}</code></pre><p>因为函数和变量提升的原因。通常提升的解释是说将声明的代码移动到了顶部，这其实没有什么错误，便于大家理解。但是更准确的解释应该是：在生成执行环境时，会有两个阶段。第一个阶段是创建的阶段，JS 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，函数的话会将整个函数存入内存中，变量只声明并且赋值为 undefined，所以在第二个阶段，也就是代码执行阶段，我们可以直接提前使用。</p>\n<p>在提升的过程中，相同的函数会覆盖上一个函数，并且函数优先于变量提升</p>\n<pre class=\"language-react\"><code class=\"language-react\">b() // call b second\n\nfunction b() {\n    console.log('call b fist')\n}\nfunction b() {\n    console.log('call b second')\n}\nvar b = 'Hello world'</code></pre><p><code>var</code> 会产生很多错误，所以在 ES6中引入了 <code>let</code>。<code>let</code> 不能在声明前使用，但是这并不是常说的 <code>let</code> 不会提升，<code>let</code> 提升了，在第一阶段内存也已经为他开辟好了空间，但是因为这个声明的特性导致了并不能在声明前使用。</p>\n<h3 id=\"bind、call、apply-区别\">bind、call、apply 区别</h3>\n<p>首先说下前两者的区别。</p>\n<p><code>call</code> 和 <code>apply</code> 都是为了解决改变 <code>this</code> 的指向。作用都是相同的，只是传参的方式不同。</p>\n<p>除了第一个参数外，<code>call</code> 可以接收一个参数列表，<code>apply</code> 只接受一个参数数组。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">getValue</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">'yck'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'24'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">getValue</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'yck'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'24'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> getValueBind <span class=\"token operator\">=</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token function\">getValueBind</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yck'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'25'</span><span class=\"token punctuation\">)</span></code></pre><p><code>bind</code> 和其他两个方法作用也是一致的，只是该方法会返回一个函数 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\">MDN</a>。并且我们可以通过 <code>bind</code> 实现柯里化。</p>\n<p><strong>利用 bind 实现柯里化</strong></p>\n<p><a href=\"https://juejin.cn/post/6844903909723488264\">source</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> list1 <span class=\"token operator\">=</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3]</span>\n\n<span class=\"token keyword\">var</span> leadingThirtysevenList <span class=\"token operator\">=</span> <span class=\"token function\">list</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> list2 <span class=\"token operator\">=</span> <span class=\"token function\">leadingThirtysevenList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// [37]</span>\n\n<span class=\"token keyword\">var</span> list3 <span class=\"token operator\">=</span> <span class=\"token function\">leadingThirtysevenList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// [37, 1, 2, 3]</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">,</span> list3<span class=\"token punctuation\">)</span></code></pre><h3 id=\"实现一个-bind-函数\">实现一个 bind 函数</h3>\n<p>利用apply修改this绑定 简易实现 可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#polyfill\">MDN</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> argsSlice <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_this</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>argsSlice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'------1------'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c1'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> logBind <span class=\"token operator\">=</span> <span class=\"token function\">log</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'------2------'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">logBind</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c2'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> logMyBind <span class=\"token operator\">=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">myBind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'------3------'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">logMyBind</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c3'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token string\">\"------1------\"</span>\n<span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c1\"</span>\n<span class=\"token string\">\"------2------\"</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c2\"</span>\n<span class=\"token string\">\"------3------\"</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c3\"</span></code></pre><h3 id=\"实现一个-call-函数\">实现一个 call 函数</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context <span class=\"token operator\">=</span> window</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">myCall</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 1, \"b\", \"c\"</span></code></pre><p>this是 log fn，args  是后面的参数</p>\n<h3 id=\"实现一个-apply-函数\">实现一个 apply 函数</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myApply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context <span class=\"token operator\">=</span> window</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n\n  <span class=\"token keyword\">let</span> result\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">myApply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 1, \"b\", \"c\"</span></code></pre><h3 id=\"简单说下原型链\">简单说下原型链</h3>\n<p><a href=\"https://github.com/KieSun/Dream/issues/2\">https://github.com/KieSun/Dream/issues/2</a></p>\n<h3 id=\"怎么判断对象类型\">怎么判断对象类型</h3>\n<p><a href=\"https://www.cnblogs.com/onepixel/p/5126046.html\">https://www.cnblogs.com/onepixel/p/5126046.html</a></p>\n<ul>\n<li>typeof typeof {} // &quot;object&quot;</li>\n<li>instanceof new Object() instanceof Object // true</li>\n<li>constructor &#39;&#39;.constructor == String // true</li>\n<li>toString 可以通过 <code>Object.prototype.toString.call(xx)</code>。这样我们就可以获得类似 <code>[object Type]</code> 的字符串。 Object.prototype.toString.call({}) &quot;[object Object]&quot;</li>\n</ul>\n<h3 id=\"typeof\">typeof</h3>\n<p>以下代码的执行结果是什么？</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">typeof</span> <span class=\"token number\">0</span> <span class=\"token comment\">// string</span></code></pre><p><code>typeof 0</code> 返回字符串 <code>number</code>， 因此 <code>typeof &#39;number&#39;</code> 的结果为 <code>string</code>。</p>\n<ul>\n<li><code>typeof</code> 可能的返回值</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>undefined</td>\n<td><code>undefined</code></td>\n</tr>\n<tr>\n<td>null</td>\n<td><code>object</code></td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><code>boolean</code></td>\n</tr>\n<tr>\n<td>number</td>\n<td><code>number</code></td>\n</tr>\n<tr>\n<td>string</td>\n<td><code>string</code></td>\n</tr>\n<tr>\n<td>Symbol()</td>\n<td><code>symbol</code></td>\n</tr>\n<tr>\n<td>函数</td>\n<td><code>function</code></td>\n</tr>\n<tr>\n<td>其他对象</td>\n<td><code>object</code></td>\n</tr>\n</tbody></table>\n<ul>\n<li>使用 <code>new</code> 关键字</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'String'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> str<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"</span>\n<span class=\"token keyword\">var</span> func <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> func<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"function\"</span></code></pre><ul>\n<li>使用括号</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> <span class=\"token number\">11</span> <span class=\"token operator\">+</span> <span class=\"token string\">' Wisen'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number Wisen\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span><span class=\"token number\">11</span> <span class=\"token operator\">+</span> <span class=\"token string\">' Wisen'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span></code></pre><ul>\n<li>未定义变量异常</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> undeclaredVariable <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">typeof</span> newLetVariable<span class=\"token punctuation\">;</span> <span class=\"token keyword\">let</span> newLetVariable<span class=\"token punctuation\">;</span> <span class=\"token comment\">// VM90195:1 Uncaught ReferenceError: newLetVariable is not defined</span>\n<span class=\"token keyword\">typeof</span> newConstVariable<span class=\"token punctuation\">;</span> <span class=\"token keyword\">const</span> newConstVariable <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// VM90283:1 Uncaught ReferenceError: Cannot access 'newConstVariable' before initialization</span></code></pre><ul>\n<li>特例</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> document<span class=\"token punctuation\">.</span>all <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">typeof</span> document<span class=\"token punctuation\">.</span>all <span class=\"token comment\">// \"undefined\"</span></code></pre><h3 id=\"箭头函数的特点\">箭头函数的特点</h3>\n<p><strong>箭头函数表达式</strong>的语法比<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/function\">函数表达式</a>更简洁，并且没有自己的<code>this</code> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">MDN</a> </p>\n<h3 id=\"this\">This</h3>\n<p>在绝大多数情况下，函数的调用方式决定了 <code>this</code> 的值（运行时绑定）。<code>this</code> 不能在执行期间被赋值，并且在每次函数被调用时 <code>this</code> 的值也可能会不同。ES5 引入了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">bind</a> 方法来设置函数的 <code>this</code> 值，而不用考虑函数如何被调用的。ES2015 引入了<a href=\"https://wiki.developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">箭头函数</a>，箭头函数不提供自身的 this 绑定（<code>this</code> 的值将保持为闭合词法上下文的值）。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\">MDN</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> foo\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// 以上两者情况 `this` 只依赖于调用函数前的对象，优先级是第二个情况大于第一个情况</span>\n\n<span class=\"token comment\">// 以下情况是优先级最高的，`this` 只会绑定在 `c` 上，不会被任何方式修改 `this` 指向</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\nc<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 还有种就是利用 call，apply，bind 改变 this，这个优先级仅次于 new</span></code></pre><h3 id=\"async、await-优缺点\">async、await 优缺点</h3>\n<p><code>async 和 await</code> 相比直接使用 <code>Promise</code> 来说，优势在于处理 <code>then</code> 的调用链，能够更清晰准确的写出代码。解决回调地狱</p>\n<p>缺点在于滥用 <code>await</code> 可能会导致性能问题，因为 <code>await</code> 会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token keyword\">await</span> <span class=\"token number\">10</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> '2' 10</span>\n  a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> a\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> '3' 20</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\na<span class=\"token operator\">++</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> '1' 1</span></code></pre><ul>\n<li>首先函数 <code>b</code> 先执行，在执行到 <code>await 10</code> 之前变量 <code>a</code> 还是 0，因为在 <code>await</code> 内部实现了 <code>generators</code> ，<code>generators</code> 会保留堆栈中东西，所以这时候 <code>a = 0</code> 被保存了下来</li>\n<li>因为 <code>await</code> 是异步操作，遇到<code>await</code>就会立即返回一个<code>pending</code>状态的<code>Promise</code>对象，暂时返回执行代码的控制权，使得函数外的代码得以继续执行，所以会先执行 <code>console.log(&#39;1&#39;, a)</code></li>\n<li>这时候同步代码执行完毕，开始执行异步代码，将保存下来的值拿出来使用，这时候 <code>a = 10</code></li>\n<li>然后后面就是常规执行代码了</li>\n</ul>\n<h3 id=\"generator-原理\">generator 原理</h3>\n<p>Generator 是 ES6 中新增的语法，和 Promise 一样，都可以用来异步编程</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用 * 表示这是一个 Generator 函数</span>\n<span class=\"token comment\">// 内部可以通过 yield 暂停代码</span>\n<span class=\"token comment\">// 通过调用 next 恢复执行</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// >  { value: 2, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// >  { value: 3, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// >  { value: undefined, done: true }</span></code></pre><p>从以上代码可以发现，加上 <code>*</code> 的函数执行后拥有了 <code>next</code> 函数，也就是说函数执行后返回了一个对象。每次调用 <code>next</code> 函数可以继续执行被暂停的代码。</p>\n<p>实现......</p>\n<h3 id=\"promise\">Promise</h3>\n<p>Promise 是 ES6 新增的语法，解决了回调地狱的问题。</p>\n<p>可以把 Promise 看成一个状态机。初始是 <code>pending</code> 状态，可以通过函数 <code>resolve</code> 和 <code>reject</code> ，将状态转变为 <code>resolved</code> 或者 <code>rejected</code> 状态，状态一旦改变就不能再次变化。</p>\n<h3 id=\"如何实现一个-promise\">如何实现一个 Promise</h3>\n<p><a href=\"https://github.com/xiaotiandada/blog/issues/71\">Promise的源码实现</a></p>\n<h3 id=\"sort函数\">sort函数</h3>\n<p>V8 引擎 sort 函数只给出了两种排序 InsertionSort 和 QuickSort，数量小于10的数组使用 插入，比10大的数组则使用 快排。</p>\n<h3 id=\"垃圾回收\">垃圾回收</h3>\n<p>V8 实现了准确式 GC，GC 算法采用了分代式垃圾回收机制。因此，V8 将内存（堆）分为新生代和老生代两部分。</p>\n<h4 id=\"新生代算法\">新生代算法</h4>\n<p>新生代中的对象一般存活时间较短，使用 Scavenge GC 算法。</p>\n<p>在新生代空间中，内存空间分为两部分，分别为 From 空间和 To 空间。在这两个空间中，必定有一个空间是使用的，另一个空间是空闲的。新分配的对象会被放入 From 空间中，当 From 空间被占满时，新生代 GC 就会启动了。算法会检查 From 空间中存活的对象并复制到 To 空间中，如果有失活的对象就会销毁。当复制完成后将 From 空间和 To 空间互换，这样 GC 就结束了。</p>\n<h4 id=\"老生代算法\">老生代算法</h4>\n<p>老生代中的对象一般存活时间较长且数量也多，使用了两个算法，分别是标记清除算法和标记压缩算法。</p>\n<p>在讲算法前，先来说下什么情况下对象会出现在老生代空间中：</p>\n<ul>\n<li>新生代中的对象是否已经经历过一次 Scavenge 算法，如果经历过的话，会将对象从新生代空间移到老生代空间中。</li>\n<li>To 空间的对象占比大小超过 25 %。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中。</li>\n</ul>\n<p>老生代中的空间很复杂，有如下几个空间</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">enum AllocationSpace {\n  // TODO(v8:7464): Actually map this space's memory as read-only.\n  RO_SPACE,    // 不变的对象空间\n  NEW_SPACE,   // 新生代用于 GC 复制算法的空间\n  OLD_SPACE,   // 老生代常驻对象空间\n  CODE_SPACE,  // 老生代代码对象空间\n  MAP_SPACE,   // 老生代 map 对象\n  LO_SPACE,    // 老生代大空间对象\n  NEW_LO_SPACE,  // 新生代大空间对象\n\n  FIRST_SPACE = RO_SPACE,\n  LAST_SPACE = NEW_LO_SPACE,\n  FIRST_GROWABLE_PAGED_SPACE = OLD_SPACE,\n  LAST_GROWABLE_PAGED_SPACE = MAP_SPACE\n};\n</code></pre><p>在老生代中，以下情况会先启动标记清除算法：</p>\n<ul>\n<li>某一个空间没有分块的时候</li>\n<li>空间中被对象超过一定限制</li>\n<li>空间不能保证新生代中的对象移动到老生代中</li>\n</ul>\n<p>在这个阶段中，会遍历堆中所有的对象，然后标记活的对象，在标记完成后，销毁所有没有被标记的对象。在标记大型对内存时，可能需要几百毫秒才能完成一次标记。这就会导致一些性能上的问题。为了解决这个问题，2011 年，V8 从 stop-the-world 标记切换到增量标志。在增量标记期间，GC 将标记工作分解为更小的模块，可以让 JS 应用逻辑在模块间隙执行一会，从而不至于让应用出现停顿情况。但在 2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。该技术可以让 GC 扫描和标记对象时，同时允许 JS 运行，你可以点击 <a href=\"https://v8project.blogspot.com/2018/06/concurrent-marking.html\">该博客</a> 详细阅读。</p>\n<p>清除对象后会造成堆内存出现碎片的情况，当碎片超过一定限制后会启动压缩算法。在压缩过程中，将活的对象像一端移动，直到所有对象都移动完成然后清理掉不需要的内存。</p>\n<h3 id=\"浏览器-eventloop-和-node-中的有什么区别\">浏览器 Eventloop 和 Node 中的有什么区别</h3>\n<p>众所周知 JS 是门非阻塞单线程语言，因为在最初 JS 就是为了和浏览器交互而诞生的。如果 JS 是门多线程的语言话，我们在多个线程中处理 DOM 就可能会发生问题（一个线程中新加节点，另一个线程中删除节点），当然可以引入读写锁解决这个问题。</p>\n<p>JS 在执行的过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入到 Task（有多种 task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 JS 中的异步还是同步行为。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setTimeout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>以上代码虽然 <code>setTimeout</code> 延时为 0，其实还是异步。这是因为 HTML5 标准规定这个函数第二个参数不得小于 4 毫秒，不足会自动增加。所以 <code>setTimeout</code> 还是会在 <code>script end</code> 之后打印。</p>\n<p>不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 微任务（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为 <code>jobs</code>，macrotask 称为 <code>task</code>。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setTimeout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Promise'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// script start => Promise => script end => promise1 => promise2 => setTimeout</span></code></pre><p>以上代码虽然 <code>setTimeout</code> 写在 <code>Promise</code> 之前，但是因为 <code>Promise</code> 属于微任务而 <code>setTimeout</code> 属于宏任务，所以会有以上的打印。</p>\n<p>微任务包括 <code>process.nextTick</code> ，<code>promise</code> ，<code>Object.observe</code> ，<code>MutationObserver</code></p>\n<p>宏任务包括 <code>script</code> ， <code>setTimeout</code> ，<code>setInterval</code> ，<code>setImmediate</code> ，<code>I/O</code> ，<code>UI rendering</code></p>\n<p>很多人有个误区，认为微任务快于宏任务，其实是错误的。因为宏任务中包括了 <code>script</code> ，浏览器会先执行一个宏任务，接下来有异步代码的话就先执行微任务。</p>\n<p>所以正确的一次 Event loop 顺序是这样的</p>\n<ol>\n<li>执行同步代码，这属于宏任务</li>\n<li>执行栈为空，查询是否有微任务需要执行</li>\n<li>执行所有微任务</li>\n<li>必要的话渲染 UI</li>\n<li>然后开始下一轮 Event loop，执行宏任务中的异步代码</li>\n</ol>\n<p>通过上述的  Event loop 顺序可知，如果宏任务中的异步代码有大量的计算并且需要操作 DOM 的话，为了更快的 界面响应，我们可以把操作 DOM 放入微任务中。</p>\n<h4 id=\"node-中的-event-loop\">Node 中的 Event loop</h4>\n<p><strong>TODO 记录一下 还没理解...</strong></p>\n<p>Node 中的 Event loop 和浏览器中的不相同。</p>\n<p>Node 的 Event loop 分为6个阶段，它们会按照顺序反复运行</p>\n<pre><code>┌───────────────────────┐\n┌─>│        timers         │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n│  │     I/O callbacks     │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n│  │     idle, prepare     │\n│  └──────────┬────────────┘      ┌───────────────┐\n│  ┌──────────┴────────────┐      │   incoming:   │\n│  │         poll          │<──connections───     │\n│  └──────────┬────────────┘      │   data, etc.  │\n│  ┌──────────┴────────────┐      └───────────────┘\n│  │        check          │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n└──┤    close callbacks    │\n   └───────────────────────┘</code></pre><p><strong>timer</strong></p>\n<p>timers 阶段会执行 <code>setTimeout</code> 和 <code>setInterval</code></p>\n<p>一个 <code>timer</code> 指定的时间并不是准确时间，而是在达到这个时间后尽快执行回调，可能会因为系统正在执行别的事务而延迟。</p>\n<p>下限的时间有一个范围：<code>[1, 2147483647]</code> ，如果设定的时间不在这个范围，将被设置为1。</p>\n<p>**I/O **</p>\n<p>I/O 阶段会执行除了 close 事件，定时器和 <code>setImmediate</code> 的回调</p>\n<p><strong>idle, prepare</strong></p>\n<p>idle, prepare 阶段内部实现</p>\n<p><strong>poll</strong> 轮询</p>\n<p>poll 阶段很重要，这一阶段中，系统会做两件事情</p>\n<ol>\n<li>执行到点的定时器</li>\n<li>执行 poll 队列中的事件</li>\n</ol>\n<p>并且当 poll 中没有定时器的情况下，会发现以下两件事情</p>\n<ul>\n<li>如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者系统限制</li>\n<li>如果 poll 队列为空，会有两件事发生<ul>\n<li>如果有 <code>setImmediate</code> 需要执行，poll 阶段会停止并且进入到 check 阶段执行 <code>setImmediate</code></li>\n<li>如果没有 <code>setImmediate</code> 需要执行，会等待回调被加入到队列中并立即执行回调</li>\n</ul>\n</li>\n</ul>\n<p>如果有别的定时器需要被执行，会回到 timer 阶段执行回调。</p>\n<p><strong>check</strong></p>\n<p>check 阶段执行 <code>setImmediate</code></p>\n<p><strong>close callbacks</strong></p>\n<p>close callbacks 阶段执行 close 事件</p>\n<p>并且在 Node 中，有些情况下的定时器执行顺序是随机的</p>\n<pre><code>setTimeout(() => {\n    console.log('setTimeout');\n}, 0);\nsetImmediate(() => {\n    console.log('setImmediate');\n})\n// 这里可能会输出 setTimeout，setImmediate\n// 可能也会相反的输出，这取决于性能\n// 因为可能进入 event loop 用了不到 1 毫秒，这时候会执行 setImmediate\n// 否则会执行 setTimeout</code></pre><p>当然在这种情况下，执行顺序是相同的</p>\n<pre><code>var fs = require('fs')\n\nfs.readFile(__filename, () => {\n    setTimeout(() => {\n        console.log('timeout');\n    }, 0);\n    setImmediate(() => {\n        console.log('immediate');\n    });\n});\n// 因为 readFile 的回调在 poll 中执行\n// 发现有 setImmediate ，所以会立即跳到 check 阶段执行回调\n// 再去 timer 阶段执行 setTimeout\n// 所以以上输出一定是 setImmediate，setTimeout</code></pre><p>上面介绍的都是 macrotask 的执行情况，microtask 会在以上每个阶段完成后立即执行。</p>\n<pre><code>setTimeout(()=>{\n    console.log('timer1')\n\n    Promise.resolve().then(function() {\n        console.log('promise1')\n    })\n}, 0)\n\nsetTimeout(()=>{\n    console.log('timer2')\n\n    Promise.resolve().then(function() {\n        console.log('promise2')\n    })\n}, 0)\n\n// 以上代码在浏览器和 node 中打印情况是不同的\n// 浏览器中一定打印 timer1, promise1, timer2, promise2\n// node 中可能打印 timer1, timer2, promise1, promise2\n// 也可能打印 timer1, promise1, timer2, promise2</code></pre><p>Node 中的 <code>process.nextTick</code> 会先于其他 microtask 执行。</p>\n<pre><code>setTimeout(() => {\n  console.log(\"timer1\");\n\n  Promise.resolve().then(function() {\n    console.log(\"promise1\");\n  });\n}, 0);\n\nprocess.nextTick(() => {\n  console.log(\"nextTick\");\n});\n// nextTick, timer1, promise1</code></pre><h3 id=\"settimeout-倒计时误差\">setTimeout 倒计时误差</h3>\n<p>JS 是单线程的，所以 <code>setTimeout</code> 的误差其实是无法被完全解决的，原因有很多，可能是回调中的，有可能是浏览器中的各种事件导致。这也是为什么页面开久了，定时器会不准的原因</p>\n<p>可以通过一定的办法去减少这个误差。以下是一个相对准备的倒计时实现</p>\n<p><strong>TODO 没看懂</strong></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> period <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">var</span> startTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">var</span> end <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> period\n<span class=\"token keyword\">var</span> interval <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>\n<span class=\"token keyword\">var</span> currentInterval <span class=\"token operator\">=</span> interval\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">++</span>\n  <span class=\"token keyword\">var</span> offset <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>startTime <span class=\"token operator\">+</span> count <span class=\"token operator\">*</span> interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代码执行所消耗的时间</span>\n  <span class=\"token keyword\">var</span> diff <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> h <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> hdiff <span class=\"token operator\">=</span> diff <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>hdiff <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> mdiff <span class=\"token operator\">=</span> hdiff <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> mdiff <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> sCeil <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> sFloor <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n  currentInterval <span class=\"token operator\">=</span> interval <span class=\"token operator\">-</span> offset <span class=\"token comment\">// 得到下一次循环所消耗的时间</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'时：'</span><span class=\"token operator\">+</span>h<span class=\"token punctuation\">,</span> <span class=\"token string\">'分：'</span><span class=\"token operator\">+</span>m<span class=\"token punctuation\">,</span> <span class=\"token string\">'毫秒：'</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">'秒向上取整：'</span><span class=\"token operator\">+</span>sCeil<span class=\"token punctuation\">,</span> <span class=\"token string\">'代码执行时间：'</span><span class=\"token operator\">+</span>offset<span class=\"token punctuation\">,</span> <span class=\"token string\">'下次循环间隔'</span><span class=\"token operator\">+</span>currentInterval<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 打印 时 分 秒 代码执行时间 下次循环间隔</span>\n\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">,</span> currentInterval<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">,</span> currentInterval<span class=\"token punctuation\">)</span></code></pre><h3 id=\"深浅拷贝\">深浅拷贝</h3>\n<h4 id=\"-赋值\">= 赋值</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">x <span class=\"token operator\">=</span> y</code></pre><p>原理：引用类型 赋值操作符只是把存放在栈内容中的指针赋值给另外一个变量</p>\n<h4 id=\"jsonparsejsonstringifyx\">JSON.parse(JSON.stringify(x))</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nb<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></code></pre><p><img src=\"https://user-images.githubusercontent.com/24250627/106392444-ccaa8d00-642c-11eb-9188-6649378bbf05.png\" alt=\"image\"></p>\n<p>原理：通过 stringify 转成 string，然后通过 parse 转成对象</p>\n<p>缺陷 有些属性被忽略了... <a href=\"https://segmentfault.com/a/1190000017773877\">source</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">nul</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">und</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">sym</span><span class=\"token operator\">:</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sym'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">str</span><span class=\"token operator\">:</span> <span class=\"token string\">'str'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">bol</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">reg</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[0-9]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">dat</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">fun</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre><p><img src=\"https://user-images.githubusercontent.com/24250627/106392596-8c97da00-642d-11eb-8f9f-28c33bcade33.png\" alt=\"image\"></p>\n<p>undefined、symbol、function 忽略掉了，reg 缺内容(或许还有别的也会忽略 没测试全面)</p>\n<h4 id=\"objectassign\">Object.assign()</h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign</a></p>\n<p><img src=\"https://user-images.githubusercontent.com/24250627/106392923-fcf32b00-642e-11eb-88a4-3ad6b71b32c2.png\" alt=\"image\"></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">a1</span><span class=\"token operator\">:</span> <span class=\"token string\">'a1'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">'b'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> ass <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nass<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>a1 <span class=\"token operator\">=</span> <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">;</span>\nass<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token string\">'bbb'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> ass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>适用于只有一层数据的对象</p>\n<h4 id=\"展开运算符\">展开运算符(...)</h4>\n<p><img src=\"https://user-images.githubusercontent.com/24250627/106393041-a2a69a00-642f-11eb-8c05-86037f4da1bd.png\" alt=\"image\"></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">a1</span><span class=\"token operator\">:</span> <span class=\"token string\">'a1'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">'b'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> ass <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>obj<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nass<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>a1 <span class=\"token operator\">=</span> <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">;</span>\nass<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token string\">'bbb'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'obj'</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ass'</span><span class=\"token punctuation\">,</span> ass<span class=\"token punctuation\">)</span></code></pre><p>适用于只有一层数据的对象</p>\n<h4 id=\"slice\">Slice</h4>\n<p><img src=\"https://user-images.githubusercontent.com/24250627/106426558-c81fbc00-64a0-11eb-9d05-7c1fcb0ab8bb.png\" alt=\"image\"></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arrCopy <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narrCopy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'test'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrCopy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"test\", \"b\", \"c\"]</span>\n\n<span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"weifeng\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"boy\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//原数组</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//拷贝数组</span>\narr1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"girl\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [{\"name\":\"weifeng\"},{\"name\":\"girl\"}]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[{\"name\":\"weifeng\"},{\"name\":\"girl\"}</span></code></pre><p>适用于只有一层数据 <a href=\"https://juejin.cn/post/6844903647856295949\">code</a></p>\n<h4 id=\"concat\">Concat</h4>\n<p><img src=\"https://user-images.githubusercontent.com/24250627/106426742-1cc33700-64a1-11eb-9318-ffee1e82143d.png\" alt=\"image\"></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arrCopy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narrCopy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'test'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrCopy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"test\", \"b\", \"c\"]</span>\n\n<span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Roubin\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"RouSe\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//原数组</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//拷贝数组</span>\narr1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[{\"name\":\"Roubin\"},{\"name\":\"Tom\"}]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[{\"name\":\"Roubin\"},{\"name\":\"Tom\"}]</span></code></pre><p>适用于只有一层数据 <a href=\"https://juejin.cn/post/6844903647856295949\">code</a></p>\n<h4 id=\"浅拷贝的实现\">浅拷贝的实现</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> data1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> data2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> data3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">z</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">shallowCopy</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n  <span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      newObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> newObj\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> dataShallowCopy <span class=\"token operator\">=</span> <span class=\"token function\">shallowCopy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> data1ShallowCopy <span class=\"token operator\">=</span> <span class=\"token function\">shallowCopy</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">)</span>\n\ndataShallowCopy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\ndata1ShallowCopy<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dataShallowCopy'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> dataShallowCopy<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data1ShallowCopy'</span><span class=\"token punctuation\">,</span> data1<span class=\"token punctuation\">,</span> data1ShallowCopy<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// dataShallowCopy [ 1, 2, 3, 4 ] [ 100, 2, 3, 4 ]</span>\n<span class=\"token comment\">// data1ShallowCopy { a: 1, b: 2, c: 3, d: 4 } { a: 100, b: 2, c: 3, d: 4 }</span></code></pre><p><a href=\"https://github.com/mqyqingfeng/Blog/issues/32\">code</a></p>\n<h4 id=\"深拷贝的实现\">深拷贝的实现</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">deepCopy</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n  <span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      newObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">?</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> newObj\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> data2DeepCopy <span class=\"token operator\">=</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>data2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> data3DeepCopy <span class=\"token operator\">=</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>data3<span class=\"token punctuation\">)</span>\n\ndata2DeepCopy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\ndata3DeepCopy<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data2DeepCopy'</span><span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">,</span> data2DeepCopy<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data3DeepCopy'</span><span class=\"token punctuation\">,</span> data3<span class=\"token punctuation\">,</span> data3DeepCopy<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// data2DeepCopy [ { a: 1 }, { a: 2 }, { a: 3 }, { a: 4 } ] [ { a: 100 }, { a: 2 }, { a: 3 }, { a: 4 } ]</span>\n<span class=\"token comment\">// data3DeepCopy { a: { z: 1 }, b: { z: 2 }, c: { z: 3 }, d: { z: 4 } } { a: { z: 100 }, b: { z: 2 }, c: { z: 3 }, d: { z: 4 } }</span></code></pre><p><a href=\"https://github.com/mqyqingfeng/Blog/issues/32\">code</a></p>\n<h4 id=\"lodash\">Lodash</h4>\n<p>项目可以使用Lodash提供的方法</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> objects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'b'</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">var</span> shallow <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>shallow<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> objects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => true</span>\n\n<span class=\"token keyword\">var</span> objects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'b'</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> deep <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>deep<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> objects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => false</span></code></pre><blockquote>\n<p>用什么方法最终还是需要根据实际情况选择</p>\n</blockquote>\n<h3 id=\"数组去重\">数组去重</h3>\n<h4 id=\"new-set\">new Set</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr\n                        \n<span class=\"token comment\">// [1, 2, 3, 5, 7, 6, 8]</span></code></pre><h4 id=\"一维数组\">一维数组</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Deduplication</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> data\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> list\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> arrDedup <span class=\"token operator\">=</span> <span class=\"token function\">Deduplication</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arrDedup'</span><span class=\"token punctuation\">,</span> arrDedup<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//arrDedup [ 1, 2, 3, 5, 7, 6, 8, 4 ]</span></code></pre><p>判断和Loop可以用 filter sort find indexOf includes 等等，原理应该差不多</p>\n<h4 id=\"多维数组\">多维数组</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Deduplications</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> data\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">flat</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">flat</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> list\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">flat</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> arrDedups <span class=\"token operator\">=</span> <span class=\"token function\">Deduplications</span><span class=\"token punctuation\">(</span>arrs<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arrDedups'</span><span class=\"token punctuation\">,</span> arrDedups<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//  [ 1, 2, 3, 4, 5, 6 ]</span></code></pre><p>先平铺数组 然后去重(也还有其他解法)</p>\n<h4 id=\"lodash-1\">Lodash</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> flatList <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">flattenDeep</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">uniq</span><span class=\"token punctuation\">(</span>flatList<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// [2, 1, 3, 4, 5, 6, 7, 8, 0, 10]</span></code></pre><h3 id=\"数组降维\">数组降维</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">flattenDeep</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n      arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">flattenDeep</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">]</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">flattenDeep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [1, 2, 3, 4, 5]</span></code></pre><h3 id=\"1-7-11mapparseint-输出结果\">[&#39;1&#39;, &#39;7&#39;, &#39;11&#39;].map(parseInt) 输出结果</h3>\n<p>[1, NaN, 3]</p>\n<ul>\n<li><code>parseInt(string, radix)</code> 将一个字符串转换为 <code>radix</code> 进制的整数。如果 <code>string</code> 无法被转化成数值类型将会返回 <code>NaN</code>。</li>\n<li><code>radix</code> 为介于 2-36 之间的整数，通常默认值为 <code>10</code> <a href=\"https://www.w3school.com.cn/jsref/jsref_parseInt.asp\">https://www.w3school.com.cn/jsref/jsref_parseInt.asp</a></li>\n<li><code>map</code> 在每次迭代时都会将 <code>value</code>，<code>index</code>，<code>array</code> 三个参数传递到 <code>parseInt()</code> 中，因此 <code>[&#39;1&#39;, &#39;7&#39;, &#39;11&#39;].map(parseInt)</code> 可以扩展为：</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'11'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></code></pre><ul>\n<li>改写为如下将会按预期执行：</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'11'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"-和--区别\"><code>==</code> 和 <code>===</code> 区别</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness\">JavaScript 中的相等性判断 MDN</a></p>\n<p>简而言之，在比较两件事情时，双等号将执行类型转换; 三等号将进行相同的比较，而不进行类型转换 (如果类型不同, 只是总会返回 false ); </p>\n<p>三个等号 <code>===</code> 表示严格相等，也就是说类型和值都必须相同。两个等号 <code>==</code> 会使其中一边的类型进行强制转换，使等号两边的类型都相等后再对数值进行比较。</p>\n<ul>\n<li>尽量使用全等操作符。因为其没有隐式转换，这样结果会比较容易预测、计算也会比较快</li>\n<li>除了等于操作符，还可以使用 <code>Object.is</code> 进行同值比较。 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is</a> 与<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality\"><code>==</code></a> 运算<em>不同。</em> <code>==</code> 运算符在判断相等前对两边的变量(如果它们不是同一类型) 进行强制转换 (这种行为的结果会将 <code>&quot;&quot; == false</code> 判断为 <code>true</code>), 而 <code>Object.is</code>不会强制转换两边的值。 具体可以看MDN</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>==</th>\n<th>===</th>\n<th>Object.is</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>undefined</td>\n<td>undefined</td>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>null</td>\n<td>null</td>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>false</td>\n<td>false</td>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>&quot;foo&quot;</td>\n<td>&quot;foo&quot;</td>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>{ foo: &quot;bar&quot; }</td>\n<td>x</td>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>+0</td>\n<td>-0</td>\n<td>true</td>\n<td>true</td>\n<td>false</td>\n</tr>\n<tr>\n<td>0</td>\n<td>false</td>\n<td>true</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>&quot;&quot;</td>\n<td>false</td>\n<td>true</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>&quot;&quot;</td>\n<td>0</td>\n<td>true</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>&quot;0&quot;</td>\n<td>0</td>\n<td>true</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>&quot;17&quot;</td>\n<td>17</td>\n<td>true</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>[1,2]</td>\n<td>&quot;1,2&quot;</td>\n<td>true</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>new String(&quot;foo&quot;)</td>\n<td>&quot;foo&quot;</td>\n<td>true</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>null</td>\n<td>undefined</td>\n<td>true</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>null</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>{ foo: &quot;bar&quot; }</td>\n<td>{ foo: &quot;bar&quot; }</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>new String(&quot;foo&quot;)</td>\n<td>new String(&quot;foo&quot;)</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>0</td>\n<td>null</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>0</td>\n<td>NaN</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>&quot;foo&quot;</td>\n<td>NaN</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>NaN</td>\n<td>NaN</td>\n<td>false</td>\n<td>false</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<h3 id=\"x-x\">x++ ++x</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</a></p>\n<p>优先级 ++.. 17 ..++ 18 从右到左进行计算</p>\n<h3 id=\"promise-状态\"><code>Promise</code> 状态</h3>\n<p><code>Promise</code> 对象用于表示一个异步操作的最终状态（完成或失败）及其返回值。他有以下几种状态：</p>\n<ul>\n<li>pending：初始状态，完成或失败状态的前一个状态</li>\n<li>fulfilled：操作成功完成</li>\n<li>rejected：操作失败</li>\n</ul>\n<p>pending 状态的 Promise 对象会触发 fulfilled/rejected 状态，在其状态处理方法中可以传入参数/失败信息。当操作成功完成时，Promise 对象的 <code>then</code> 方法就会被调用；否则就会触发 <code>catch</code>。</p>\n<h3 id=\"什么是回调？\">什么是回调？</h3>\n<ul>\n<li>回调函数作为实参传入另一个函数内，当某种事件被触发或某些任务被完成时会被调用，通常用于异步编程。</li>\n<li>可以使用 <code>Promise</code>、Async/Await 等解决多重回调（callback hell）带来的问题</li>\n</ul>\n<h3 id=\"对比两个对象\">对比两个对象</h3>\n<ul>\n<li>严格相等运算符 <code>===</code></li>\n<li>宽松相等运算符 <code>==</code></li>\n<li><code>Object.is()</code> 函数</li>\n<li>Lodash isEqual</li>\n</ul>\n<h3 id=\"跨域\">跨域</h3>\n<p>浏览器出于安全考虑，有同源策略。也就是说，如果协议、域名或者端口有一个不同就是跨域，Ajax 请求会失败。</p>\n<ul>\n<li>JSONP</li>\n<li>CORS</li>\n<li>Document.domain<ul>\n<li><a href=\"https://blog.csdn.net/huzhenv5/article/details/104884760\">https://blog.csdn.net/huzhenv5/article/details/104884760</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\">https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a></li>\n</ul>\n</li>\n<li>postMessage</li>\n<li>Nginx</li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000022398875\">https://segmentfault.com/a/1190000022398875</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/159060398\">https://zhuanlan.zhihu.com/p/159060398</a></p>\n<p>平时开发CORS就已经解决问题并且够用了</p>\n<h3 id=\"service-worker\">Service worker</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\">https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API</a></p>\n<p><a href=\"https://developers.google.com/web/tools/workbox\">https://developers.google.com/web/tools/workbox</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'serviceWorker'</span> <span class=\"token keyword\">in</span> navigator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">getRegistrations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">registrations</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> registration <span class=\"token keyword\">of</span> registrations<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[pwa] [workbox] Unregistering service worker:'</span><span class=\"token punctuation\">,</span> registration<span class=\"token punctuation\">)</span>\n      registration<span class=\"token punctuation\">.</span><span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'caches'</span> <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  caches<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keys</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[pwa] [workbox] Cleaning cache for:'</span><span class=\"token punctuation\">,</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          caches<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre><p>workbox</p>\n<h3 id=\"前端缓存\">前端缓存</h3>\n<p><a href=\"https://github.com/xiaotiandada/blog/issues/67\">https://github.com/xiaotiandada/blog/issues/67</a> 正在写...</p>\n<h3 id=\"cors-是什么？\">CORS 是什么？</h3>\n<p>CORS（Cross-Origin Resource Sharing）跨域资源共享使用额外的 HTTP 头来告诉浏览器，此站点已被授权可以访问来自服务器指定的不同域的资源。从 <code>http://mydomain.com</code> Web 应用程序中使用 Ajax 请求 <code>http://yourdomain.com</code> 资源就是一个跨域请求的例子。</p>\n<p>出于安全考虑，浏览器会阻止 JavaScript 发起的 HTTP 跨源请求。 <code>XMLHttpRequest</code> 和 <code>fetch</code> 遵循了同源策略，这意味着使用这些 API 的 Web 应用程序只能从访问同域中的 HTTP 资源。想要通过这些 API 跨域访问资源就需要让跨域的域名被正确的包含在 CORS 头中。</p>\n<ul>\n<li>跨域时需在请求头中加上 <code>Origin</code>。这样服务器接受到请求后会根据 <code>Origin</code> 检测结果在返回头中加入 <code>Access-Control-</code> 开头的字段。</li>\n<li>非简单请求的 CORS，会在正式请求之前，增加一次 HTTP 预检请求去询问服务器该域名是否在白名单之中，以及可以使用哪些 HTTP 动作和头信息字段。只有符合要求后，浏览器才会发出正式的 <code>XMLHttpRequest</code> 请求，否则就抛出异常。</li>\n<li>CORS 行为并不是一个错误，他是保护用户安全的一种机制。</li>\n<li>CORS 可以阻止用户不小心访问的恶意网站去请求一个合法网站的站点资源，这样用户在合法站点的个人数据不仅会被获取，而且还可能进行一些无中生有的操作。</li>\n<li>JSONP 不仅支持跨域请求，而且还支持更多的浏览器。但他只支持 <code>GET</code> 请求。</li>\n</ul>\n<h3 id=\"01--02--03-的计算结果是什么？\"><code>0.1 + 0.2 === 0.3</code> 的计算结果是什么？</h3>\n<p>他的计算结果为 <code>false</code>，因为 JavaScript 中的 Math 遵循 IEEE 754 标准使用了 64 位的浮点数。简言之：计算机使用二进制来存储小数，而大部分小数转换成二进制后都是无限循环的值，因此需要进行取舍，这样一来在进行十进制计算时就会导致精度丢失。</p>\n<pre><code>0.1 + 0.2 // 0.30000000000000004 </code></pre><p>可以 放大倍数或者使用工具库解决问题 比如 bignumber.js</p>\n<h3 id=\"osi模型\">osi模型</h3>\n<p>七层结构：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</p>\n<p>tcp ucp属于传输层；</p>\n<p>http 属于应用层</p>\n<h3 id=\"数组方法-map-和-foreach-有什么区别？\">数组方法 <code>map()</code> 和 <code>forEach()</code> 有什么区别？</h3>\n<p>这两种方法都是对数组中的元素进行迭代。<code>map()</code> 通过每个元素的回调函数将其映射到新的元素上，最终返回一个新的数组。<code>forEach()</code> 虽然也为每一个元素准备了回调函数，但却不返回新的数组。</p>\n<ul>\n<li>需要迭代一个数组，使其本身发生变化且不需要返回一个新数组时，可以使用 <code>forEach()</code></li>\n<li><code>map()</code> 保持原有数组不变的正确选择</li>\n<li><code>map()</code> 运行的较快，且返回的新数组可以让你继续使用 <code>map()</code>、<code>filter()</code>、<code>reduce()</code> 等方法</li>\n</ul>\n<h3 id=\"变量提升-1\">变量提升</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">foobar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foobar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre><p>由于变量提升（Hoisting），局部变量 <code>foo</code> 将会在调用 <code>console.log</code> 方法之前进行声明。也就是说，作为参数传递给 <code>console.log()</code> 的局部变量 <code>foo</code> 替代了在函数外部声明的全局变量。但是变量初始化（赋值）并不会被提升，因此输出为 <code>undefined</code>，而不是 <code>2</code>。</p>\n<ul>\n<li>JavaScript 只会将声明提升，初始化并不会被提升</li>\n<li>提升指变量和函数声明在编译阶段被放入内存中，在代码中的位置并不会变动</li>\n<li>ES6 中的 <code>let</code>、<code>const</code> 不存在提升</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foobar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foobar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Uncaught ReferenceError: foo is not defined</span></code></pre><ul>\n<li>函数提升  函数提升要比变量提升的优先级要高一些，且不会被变量声明覆盖</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">hoistFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output: I am hoisted</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am hoisted'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">hoistFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hoistFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output: 2</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">hoistFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">foobar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foobar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// function foo() {</span>\n  <span class=\"token comment\">// window.runnerWindow.proxyConsole.log(1)</span>\n<span class=\"token comment\">// }</span>\n</code></pre><h3 id=\"立即执行匿名函数的原因是什么？\">立即执行匿名函数的原因是什么？</h3>\n<p>围绕文件中的上下文创建一个闭包环境，为这个文件创建私有的命名空间。可以避免不同的 JavaScript 模块和库在命名上产生冲突。函数被立即调用，就可以将函数的返回值赋给命名空间（库名）。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myLibrary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmyLibrary</code></pre><ul>\n<li>立即执行的匿名函数除了提供私有命名空间外，还提供了数据隐藏、封装、多实例等面向对象编程的特性。如：</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">makeCounter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Counter1 <span class=\"token operator\">=</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Counter2 <span class=\"token operator\">=</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><ul>\n<li>以前很多流行的库（如：jQuery）都使用过该技术，但随着 JavaScript 版本的更新，都逐渐被 <code>import</code>，<code>class</code> 取而代之了。</li>\n</ul>\n<h3 id=\"词法作用域和动态作用域的区别？\">词法作用域和动态作用域的区别？</h3>\n<p>词法作用域指的是使用函数位置来确定变量值。于此相对的是动态作用域，他使用函数调用的位置来确定变量值。</p>\n<ul>\n<li>词法作用语也被成为静态作用域。</li>\n<li>在闭包中，JavaScript 依旧遵循词法作用域。</li>\n<li>大多数语言都使用词法范围，因为这样的源代码更加容易理解。</li>\n<li>JavaScript 实际上没有动态作用域，但 <code>this</code> 机制却和动态作用域类似：关注点都在于函数是如何被调用的。</li>\n<li>下列代码中，使用词法作用域将输出 <code>2</code>，动态作用域将输出 <code>3</code>：</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"null-和-undefined-有什么区别？\"><code>null</code> 和 <code>undefined</code> 有什么区别？</h3>\n<p>在 JavaScript 中有两个值表示无 <code>undefined</code> 和 <code>null</code>。根本的区别在于 <code>null</code> 是显式的，而 <code>undefined</code> 是隐式的。当一个属性不存在或一个变量没有被赋值时，他们的值为 <code>undefined</code>。把 <code>null</code> 赋给一个变量时，就显式的表明这个变量“无值”。实际上，当明确知道没有对象或不应该有值时就使用 <code>null</code>，否则就使用 <code>undefined</code>。</p>\n<ul>\n<li><code>typeof</code> 结果不同</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// \"undefined\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// \"object\"，尽管返回 `object`，但他依旧是一个原始值，这是 JavaScript 在实现上的一个 bug。</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span> <span class=\"token comment\">// \"number\"</span></code></pre><ul>\n<li><a href=\"https://link.ld246.com/forward?goto=https%3A%2F%2Fhacpai.com%2Farticle%2F1546570870626%3Fr%3DVanessa\">等于操作符 <code>==</code> 和 <code>===</code> 有什么区别</a></li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// false</span></code></pre><p>JavaScript 的设计者 Brendan Eich 认为表示“空值”的不应该是一个对象且 <code>null</code> 在计算时会自动转换为 0，很不容易发现错误。因此 <code>undefined</code> 就诞生了。</p>\n<p><code>null</code> 常用于以下场景：</p>\n<ul>\n<li><p>作为函数的参数，表示该函数的参数不是对象。</p>\n</li>\n<li><p>作为对象原型链的终点。</p>\n</li>\n</ul>\n<p><code>undefined</code> 常用于以下场景：</p>\n<ul>\n<li><p>变量被声明了，但没有赋值时，就等于 undefined。</p>\n</li>\n<li><p>调用函数时，应该提供的参数没有提供，该参数等于 undefined。</p>\n</li>\n<li><p>对象没有赋值的属性，该属性的值为 undefined。</p>\n</li>\n<li><p>函数没有返回值时，默认返回 undefined。</p>\n</li>\n</ul>\n<h3 id=\"arguments\">arguments</h3>\n<p>参数是函数定义时的变量名，而 arguments 的值是函数调用时赋予的。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parameter1<span class=\"token punctuation\">,</span> parameter2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"argument1\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"argument1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"argument2\"</span><span class=\"token punctuation\">)</span> </code></pre><ul>\n<li><code>arguments</code> 是一个类似数组的对象</li>\n<li><code>arguments</code> 对象是函数中都可用的局部变量。</li>\n<li>可以使用 <code>Array.from()</code> 或扩展运算符将参数转换为真实数组，如：</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre><h3 id=\"列举几种创建对象的方法\">列举几种创建对象的方法</h3>\n<h4 id=\"对象字面量\">对象字面量</h4>\n<p>通常用于存储一次性数据。</p>\n<pre><code>const person = {\n  name: \"John\",\n  age: 50,\n}\nconsole.log(person.age) </code></pre><h4 id=\"构造函数\">构造函数</h4>\n<p>通常用于为一个对象创建多个实例的场景，每个实例都不会受到该对象的其他实例的影响，他们有自己独立的数据。<code>new</code> 关键字必须位于构造函数之前，否则下例中的 <code>name</code> 和 <code>age</code> 将会挂载到 <code>window</code> 上。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">birthday</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sally\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">birthday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> person1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// John 51</span>\nperson2<span class=\"token punctuation\">.</span><span class=\"token function\">birthday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> person2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Sally 21</span></code></pre><h4 id=\"工厂模式\">工厂模式</h4>\n<p>和构造函数类似，都可以创造一个新的实例，但是他可以通过闭包存储私有数据。在函数调用或 <code>this</code> 关键字之前不需要使用 <code>new</code> 操作。工厂模式不使用原型链模式，他将所有属性和方法都做为自己的属性。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createPerson</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">birthday</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> person<span class=\"token punctuation\">.</span>age<span class=\"token operator\">++</span>\n  <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> birthday <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> person\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">birthday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 51</span></code></pre><h4 id=\"objectcreate\"><code>Object.create()</code></h4>\n<p>设置新创建的对象的原型。<code>Object.create()</code> 的第二个参数可以提供新对象自身定义的可枚举属性。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> personProto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">birthday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>personProto<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">birthday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 51 \"John\"</span></code></pre><ul>\n<li>原型链相关的方法可以让一个对象从其他对象中继承属性和方法。</li>\n</ul>\n<h3 id=\"javascript-通过值还是引用传递？\">JavaScript 通过值还是引用传递？</h3>\n<p>JavaScript 是通过值进行传递的。然而对于对象而言，值是对象的引用。</p>\n<ul>\n<li>在值传递中，传递给函数的参数是函数被调用时所传实参的拷贝。</li>\n<li>在引用传递中，传递给函数的是他的实际参数的隐式引用而不是实参的拷贝</li>\n</ul>\n<h3 id=\"原型继承和经典继承有什么区别？\">原型继承和经典继承有什么区别？</h3>\n<p>在原型继承中，对象实例直接从其他对象继承。通常使用工厂模式或 <code>Object.create()</code> 来创建对象实例。</p>\n<p>在经典继承中，对象实例从类中继承他们的属性和函数。通常使用构造函数和 <code>new</code> 关键字来创建对象实例。</p>\n<ul>\n<li>代码中原型链过长时，应将其分解，以避免出现性能问题。</li>\n<li>原生原型<strong>不应该</strong>被扩展，除非为了与新的 JavaScript 特性兼容。</li>\n<li>在 ES6 中引入的 <code>class</code> 关键字只是语法糖，他仍然是基于原型的。</li>\n<li>在编写复杂的继承代码之前，必须深入理解原型继承的模型。</li>\n</ul>\n<h3 id=\"原始值和引用值的比较\">原始值和引用值的比较</h3>\n<p>以下代码将输入什么？</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"1,2,3\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre><p>第一个 <code>console.log</code> 输出为 <code>true</code>，因为 JavaScript 编译器在两个等号时会执行类型转换，a 将进行 <code>a.toString()</code> 转换为 &quot;1,2,3&quot;，所以 a 和 c 相等。</p>\n<p>第二个 <code>console.log</code> 输出为 <code>false</code>，因为 a 和 b 是数组对象，对象是通过引用来进行比较的。a 和 b 可以看做 <code>new Array(1, 2, 3)</code>，都是新开辟出来的地址，所以引用肯定是不同的。如下通过引用的代码片断，将会输出 <code>true</code>：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> e <span class=\"token operator\">=</span> d\ne<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">===</span> e<span class=\"token punctuation\">)</span></code></pre><ul>\n<li>JavaScript 在执行计算时会对类型进行自动转换</li>\n<li><code>undefined</code>，<code>null</code> ，<code>boolean</code> ，<code>string</code> 和 <code>number</code> 这五类原始类型是通过值进行比较</li>\n</ul>\n<h3 id=\"asi-automatic-semicolon-insertion---自动插入分号\">ASI (automatic semicolon insertion) - 自动插入分号</h3>\n<p>执行以下函数将输入什么？</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre><p>执行 <code>greet()</code> 将输出 <code>undefined</code>。因为 JavaScript 的 ASI ( automatic semicolon insertion )，即自动插入分号会使编译器在语法分析时在 <code>return</code> 关键字后放一个分号，所以在不产生错误的情况下，他将输出 <code>undefined</code>。</p>\n<ul>\n<li>由于 ASI，通常都使用换行来省略分号 以 <code>var</code>、<code>let</code>、<code>const</code>、<code>import</code>、<code>export</code> 开头的声明语句、表达式语句、debugger<code>、</code>continue<code>、</code>break<code>、</code>return<code>、</code>throw` 等语句</li>\n</ul>\n<h3 id=\"javascript-是否需要分号？\">JavaScript 是否需要分号？</h3>\n<p>有时候是不需要的，有时候是需要的。 JavaScript 自动插入分号机制，解释器会在大多数语句后自动添加分号。大多数情况下是不需要分号 但是在某些情况下需要分号</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> </code></pre><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </code></pre><p>Error 大部分编辑器会给出明显的报错提示</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">VM89097</span><span class=\"token operator\">:</span><span class=\"token number\">2</span> Uncaught ReferenceError<span class=\"token operator\">:</span> Cannot access <span class=\"token string\">'a'</span> before initialization at <span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">8</span>\n<span class=\"token constant\">VM89160</span><span class=\"token operator\">:</span><span class=\"token number\">2</span> Uncaught TypeError<span class=\"token operator\">:</span> <span class=\"token number\">3</span> is not a <span class=\"token keyword\">function</span></code></pre><ul>\n<li>根据团队的规范来 如果需要则可以加 不需要则可以不加 通常可以配置eslint来解决这个规范问题</li>\n</ul>\n<h3 id=\"同步和异步代码有什么区别？\">同步和异步代码有什么区别？</h3>\n<p>同步意味着每一个操作必须等待前一个操作完成后才能执行。\n 异步意味着操作不需要等待其他操作完成后才开始执行。</p>\n<ul>\n<li>JavaScript 中的同步任务是指在主线程上排队执行的任务，只有前一个任务执行完成后才能执行后一个任务；异步任务是指进入任务队列（task queue）而非主线程的任务，只有当任务队列通知主线程，某个异步任务可以执行了，该任务才会进入主线程中进行执行。</li>\n<li>JavaScript 的并发模型是基于 “event loop”。</li>\n<li>像 <code>alert</code> 这样的方法回阻塞主线程，以致用户关闭他后才能继续进行后续的操作。</li>\n<li>Web Worker 虽然允许 JavaScript 创建多个线程，但子线程完全受主线程控制，且不能操作 DOM。</li>\n</ul>\n<h3 id=\"javascript-中的短路计算是什么？\">JavaScript 中的短路计算是什么？</h3>\n<p>由于逻辑表达式的运算顺序是从左到右，并且他可以提前结束。使用这一规则便可进行短路计算。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span></code></pre><p>在逻辑运算过程中如果有一个表达式执行抛出异常，程序也不会受到影响，如：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token function\">nonexistentFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">nonexistentFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </code></pre><p>由于从左到右的执行顺序，我们可以进行多个操作，如：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token function\">nonexistentFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>nothing<span class=\"token punctuation\">.</span>wouldThrowError\n<span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>nothing<span class=\"token punctuation\">.</span>wouldThrowError\n<span class=\"token boolean\">true</span> </code></pre><p>一个常用的场景是设置默认值。如果第一个对象是假值，将会使用第二个对象的值。如：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> setting <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>setting <span class=\"token operator\">||</span> <span class=\"token string\">\"default\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>setting<span class=\"token punctuation\">)</span> <span class=\"token comment\">// default</span></code></pre><p>另一个常用的场景是当对象为真值时，去执行该对象的相关操作，如：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">handleButtonClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 以上代码片断等同于以下使用短路计算的代码片断</span>\n<span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">handleButtonClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> </code></pre><p>在上面的示例中，如果 e.target 不存在或他里面不包含和 “button” 相匹配的元素，后面的函数将不会被执行。这是因为第一个对象如果是假值，那么第二个对象就不会被运行。</p>\n<h3 id=\"什么是闭包？\">什么是闭包？</h3>\n<p>一个函数和对其周围状态（<strong>lexical environment，词法环境</strong>）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是<strong>闭包</strong>（<strong>closure</strong>）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。<a href=\"https://link.ld246.com/forward?goto=https%3A%2F%2Fhacpai.com%2Farticle%2F1549635108016%23toc_h4_2\">https://link.ld246.com/forward?goto=https%3A%2F%2Fhacpai.com%2Farticle%2F1549635108016%23toc_h4_2</a>) </p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Mozilla\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// name 是一个被 init 创建的局部变量</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">displayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// displayName() 是内部函数，一个闭包</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用了父函数中声明的变量</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">displayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\">MDN</a></p>\n<h3 id=\"什么是函数式编程？\">什么是函数式编程？</h3>\n<p>函数式编程是一种编程范式，他使用<strong>纯函数</strong>来构建声明方式以避免状态的共享、数据的易变及一些副作用。函数式编程的核心是：同一个函数中只要输入相同，其返回值就必然相等，且不会产生任何副作用。</p>\n<ul>\n<li>与使用命令式或面向对象编程的代码相比，函数式编程的代码更加简洁、清晰、可预测及易于测试。</li>\n<li><code>String.prototype.toUpperCase</code>、<code>Array.prototype.map</code>、<code>Function.prototype.bind</code> 都是 JavaScript 中纯函数的例子，其非纯函数的例子有：<code>Date.now</code>、<code>Math.random</code> 等</li>\n</ul>\n<h3 id=\"命令式编程和声明式编程有什么区别？\">命令式编程和声明式编程有什么区别？</h3>\n<p>这两种编程可以简单的概括为：</p>\n<ul>\n<li>命令式编程：<strong>如何</strong>命令计算机完成</li>\n<li>声明式编程： 我要完成<strong>什么</strong></li>\n</ul>\n<h4 id=\"命令式编程\">命令式编程</h4>\n<pre><code>const numbers = [1, 2, 3, 4, 5]\nconst numbersDoubled = []\nfor (let i = 0; i < numbers.length; i++) {\n  numbersDoubled[i] = numbers[i] * 2\n} </code></pre><p>我们手动循环遍历数组中的元素，然后将每个元素乘以 2 后赋给另外一个数组。</p>\n<h4 id=\"声明式编程\">声明式编程</h4>\n<pre><code>const numbers = [1, 2, 3, 4, 5]\nconst numbersDoubled = numbers.map(n => n * 2) </code></pre><p>我们声明一个新的数组，让其中的每一个元素为原有数组中每一个元素的 2 倍。</p>\n<h3 id=\"memoization-是什么？\">Memoization 是什么？</h3>\n<p>Memoization 是用来缓存函数调用的输出结果，以便减少后续再次调用时的运算，进而加快运算速度的一种优化技术。Memoization 在再次调用有相同输入的同一函数时将直接返回缓存的该函数的输出结果，但第一次的计算当然是必不可少的。</p>\n<pre><code>const memoize = fn => {\n  const cache = new Map()\n  return value => {\n    const cachedResult = cache.get(value)\n    if (cachedResult !== undefined) return cachedResult\n    const result = fn(value)\n    cache.set(value, result)\n    return result\n  }\n} </code></pre><h4 id=\"lodash-2\">Lodash</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'b'</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> other <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'c'</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'d'</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">values</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [1, 2]</span>\n \n<span class=\"token function\">values</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [3, 4]</span>\n \nobject<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">values</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [1, 2]</span>\n \n<span class=\"token comment\">// 修改结果缓存。</span>\nvalues<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">values</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => ['a', 'b']</span>\n \n<span class=\"token comment\">// 替换 `_.memoize.Cache`。</span>\n_<span class=\"token punctuation\">.</span>memoize<span class=\"token punctuation\">.</span>Cache <span class=\"token operator\">=</span> WeakMap<span class=\"token punctuation\">;</span></code></pre><h3 id=\"对比-mutable-和-immutable-及-mutating-和-non-mutating\">对比 Mutable 和 Immutable 及 Mutating 和 Non-Mutating</h3>\n<ul>\n<li>Mutable：对象主题可以被修改</li>\n<li>Immutable：对象一旦被创建就不能被修改</li>\n<li>Mutating：修改对象主题的方法</li>\n<li>Non-Mutating：不会使原始对象发生变化的修改方法</li>\n</ul>\n<p>在 JavaScript 中，对象是可被修改的，但原始值却是不能被修改的。这意味着可以通过执行某些操作来修改对象的原始引用，但对原始值执行任何操作都不能修改他的初始值。\n 所有的 <code>String.prototype</code> 方法都不能对初始值产生任何影响，他们都只会返回一个新的字符串。相比而言，<code>Array.prototype</code> 的某些方法也不会修改初始数组的引用，只会产生一个新的数组，但是某些方法却能产生变化。</p>\n<pre><code>const myString = \"hello!\"\n// 返回一个新数组，并不会修改初始值\nmyString.replace(\"!\", \"\") // \"hello\"\n\nconst originalArray = [1, 2, 3]\n// 原始数组被修改\noriginalArray.push(4) // [1, 2, 3, 4]\n// 返回一个新数组，不会修改原始数组\noriginalArray.concat(4) // [1, 2, 3, 4, 4]</code></pre><ul>\n<li>数组中 Mutating 的方法如：<code>copyWithin</code>、<code>fill</code>、<code>pop</code>、<code>push</code>、<code>reverse</code>、<code>shift</code>、<code>sort</code>、<code>splice</code>、<code>unshift</code></li>\n<li>数组中 Non-Mutating 的方法如: <code>map</code>、<code>slice</code>、<code>concat</code>、<code>filter</code></li>\n<li><a href=\"https://github.com/immutable-js/immutable-js\">https://github.com/immutable-js/immutable-js</a></li>\n</ul>\n<h3 id=\"javascript-中唯一自己不等于自己的值是谁？\">JavaScript 中唯一自己不等于自己的值是谁？</h3>\n<p><code>NaN</code> (Not-a-Number) 无论使用什么比较运算符进行比较时，他是唯一不等于自身的值。<code>NaN</code> 通常是没有意义的数学计算的结果，因此两个 <code>NaN</code> 值被认为相等是没有意义的。</p>\n<ul>\n<li>简单的实现 isNaN：</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNotNumber</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">!==</span> x</code></pre><ul>\n<li><code>isNaN()</code> 和 <code>Number.isNaN()</code> 的区别如下：</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A String'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A String'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre><ul>\n<li>可以使用 <code>Object.is</code>判断</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre><h3 id=\"复合函数\">复合函数</h3>\n<p>在<a href=\"https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6\">数学</a>中，<strong>复合函数</strong>，又称作<strong>合成函数</strong>（英语：function composition）是指<a href=\"https://zh.wikipedia.org/wiki/%E9%80%90%E7%82%B9\">逐点</a>地把一个<a href=\"https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0\">函数</a>作用于另一个函数的结果，所得到的第三个函数。例如，函数 <em>f</em> : <em>X</em> → <em>Y</em> 和 <em>g</em> : <em>Y</em> → <em>Z</em> 可以复合，得到从 <em>X</em> 中的 <em>x</em> 映射到 <em>Z</em> 中 <em>g</em>(<em>f</em>(<em>x</em>)) 的函数。直观来说，如果 <em>z</em> 是 <em>y</em> 的函数，<em>y</em> 是 <em>x</em> 的函数，那么 <em>z</em> 是 <em>x</em> 的函数。得到的复合函数记作 <em>g</em> ∘ <em>f</em> : <em>X</em> → <em>Z</em>，定义为对 <em>X</em> 中的所有 <em>x</em>，(<em>g</em> ∘ <em>f</em> )(<em>x</em>) = <em>g</em>(<em>f</em>(<em>x</em>))。[<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0#cite_note-1\">note 1]</a> 直观地说，复合两个函数是把两个函数链接在一起的过程，内函数的输出就是外函数的输入。<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0\">wiki</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">arg</span> <span class=\"token operator\">=></span> arg\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> fn<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> fn<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre><h3 id=\"什么是纯函数？\">什么是纯函数？</h3>\n<ul>\n<li>给定相同的输入，返回输出结果必须相同</li>\n<li>在作用域之外不能改变其他数据或提供给函数的数据。</li>\n</ul>\n<p>纯函数在满足以上两个条件时，允许在自身内部对自己的变量进行改变。</p>\n<h4 id=\"纯函数\">纯函数</h4>\n<pre><code>const a = (x, y) => x + y\nconst b = (arr, value) => arr.concat(value)\nconst c = arr => [...arr].sort((a, b) => a - b) </code></pre><h4 id=\"非纯函数\">非纯函数</h4>\n<pre><code>const a = (x, y) => x + y + Math.random()\nconst b = (arr, value) => (arr.push(value), arr)\nconst c = arr => arr.sort((a, b) => a - b) </code></pre><h3 id=\"解释递归及其使用场景\">解释递归及其使用场景</h3>\n<p>函数重复调用自身直到满足某个基本条件时。需要条件来打断循环，否则会不停的调用自身</p>\n<p><a href=\"https://blog.csdn.net/Creabine/article/details/79027419\">https://blog.csdn.net/Creabine/article/details/79027419</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre><h3 id=\"静态方法和实例方法的区别\">静态方法和实例方法的区别</h3>\n<ul>\n<li>静态方法属于一个类，他不能在实例上使用。</li>\n<li>实例方法属于类的原型，他继承 自该类的所有实例并可以在实例上使用。</li>\n</ul>\n<pre><code>Array.isArray // 数组的静态方法\nArray.prototype.push // 数组的实例方法</code></pre><p>如果 <code>Array.isArray</code> 方法做为数组的一个实例方法将没有任何意义，因为当他可以正常运行时，我们已经知道这个他是一个数组了。</p>\n<p>实例方法在技术上可以当作静态方法使用，只是实例方法提供了更简洁的语法：</p>\n<pre><code>const arr = [1, 2, 3]\narr.push(4)\nArray.push(arr, 4) </code></pre><ul>\n<li>使用 ES2015 的类语法创建一个静态方法和实例方法</li>\n</ul>\n<pre><code>class Foo {\n    bar() {\n        console.log('instance method')\n    }\n\n    static baz() {\n        console.log('static method')\n    }\n}\nFoo.baz() // static method\nconst f = new Foo()\nf.bar() // instance method</code></pre><h3 id=\"use-strict-的作用\">use strict 的作用</h3>\n<p>开头包含 &#39;use strict&#39; 可以启用严格模式，该模式强制开启了更为严格的 JavaScript 代码解析和错误处理。他被认为是一种很好的实践，为开发者提供了以下便捷之处：</p>\n<ul>\n<li>通过抛出错误来消除了一些原有的静默错误，让调试更加容易。</li>\n<li>修复了一些导致 JavaScript 引擎难以执行优化的缺陷：有时候，相同的代码，严格模式可以比非严格模式下运行得更快。</li>\n<li>提高 JavaScript 的安全性，如私有变量的保护等。</li>\n<li>简化 <code>eval()</code> 和 <code>arguments</code>，如 <code>arguments</code> 不会随参数的变化而变化等。</li>\n</ul>\n<pre><code>\"use strict\"\nfunction f(a){\n  a = 42;\n  return [a, arguments[0]];\n}\nvar pair = f(17);\nconsole.log(pair) // [42, 17]，非严格模式下输出为 [42, 42]</code></pre><ul>\n<li>防止意外的全局变量。</li>\n</ul>\n<pre><code>\"use strict\"\nmistypedVaraible = 17; // Uncaught ReferenceError: mistypedVaraible is not defined</code></pre><ul>\n<li>禁止重新定义。</li>\n</ul>\n<pre><code>\"use strict\";\nundefined = 5; // Uncaught TypeError: Cannot assign to read only property 'undefined' of object '#<Window>'</code></pre><ul>\n<li>使用 <code>delete</code> 时会抛出错误</li>\n</ul>\n<pre><code>\"use strict\";\ndelete mistypedVariable; // Uncaught SyntaxError: Delete of an unqualified identifier in strict mode.</code></pre><ul>\n<li>强制消除 <code>this</code> 的引用，默认为 <code>undefined</code>。</li>\n</ul>\n<pre><code>\"use strict\";\nname = \"atatus\";\nfunction testFunction() {\n    console.log(this.name);\n}\n// 非严格模式下输出 atatus\ntestFunction(); // Uncaught TypeError: Cannot read property 'name' of undefined </code></pre><ul>\n<li>禁用了在 ECMAScript 未来版本中可能会定义的一些语法。</li>\n</ul>\n<h3 id=\"内存泄漏\">内存泄漏</h3>\n<p>定义：程序中己动态分配的堆内存由于某种原因程序未释放或无法释放引发的各种问题 js中可能出现的内存泄漏情况 结果：变慢，崩溃，延迟大等 原因：</p>\n<ol>\n<li>全局变量</li>\n<li>dom清空时，还存在引用</li>\n<li>ie中使用闭包</li>\n<li>定时器未清理</li>\n<li>子元素存在引起的内存泄露</li>\n</ol>\n<p>避免策略：</p>\n<ol>\n<li>减少不必要的全局变量，或者生命周期较长的对象，及时对无用的数据进行垃圾回收；</li>\n<li>注意程序逻辑，避免“死循环”之类的 ；</li>\n<li>避免创建过多的对象  原则：不用了的东西要及时归还。</li>\n<li>减少层级过多的引用</li>\n</ol>\n<h3 id=\"react-vue-angular、ui-库或框架的目的是什么？\">React, Vue, Angular、UI 库或框架的目的是什么？</h3>\n<ul>\n<li>组件化 功能复用 减少冗余代码和提高维护性</li>\n<li>数据驱动视图 只需要关注数据变化即可</li>\n<li>虚拟Dom vue 和react 都使用的虚拟dom性能提升</li>\n<li>提供生命周期、插槽、条件语句、Hooks等一些列功能 提高开发效率</li>\n</ul>\n<h3 id=\"虚拟-dom-是什么，库或者框架中为什么要使用他？\">虚拟 DOM 是什么，库或者框架中为什么要使用他？</h3>\n<p>虚拟 DOM（VDOM）是使用 JavaScript 普通对象来描述真实 DOM 的展现方式</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">createDocumentFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment\">MDN</a></p>\n<ul>\n<li>库或者框架中使用虚拟 DOM 主要为了提高性能。</li>\n<li>使用虚拟 DOM 可以减少对底层的 DOM 操作</li>\n<li>虚拟 DOM 可以将同一时间内多个状态的变化累计计算出最终状态，以便对 DOM 只执行一次更新。</li>\n<li>Vue.js 中 Virtual DOM 是借鉴了一个开源库 <a href=\"https://github.com/snabbdom/snabbdom\">snabbdom</a> 的实现，然后加入了一些 Vue.js 特色的东西</li>\n</ul>\n<h2 id=\"react\">React</h2>\n<h3 id=\"什么是内联条件表达式？\">什么是内联条件表达式？</h3>\n<p>使用 <code>if</code> 语句或三元表达式 还可以在 JSX 中嵌入表达式</p>\n<pre><code>(\n    <div>\n      <h1>Hello! {isLoggedIn ? 'Vanessa' : 'User'}</h1>\n      {unreadMessages.length > 0 &&\n        <h2>\n          You have {unreadMessages.length} unread messages.\n        </h2>\n      }\n    </div>\n )</code></pre><h3 id=\"react-中什么是有状态的组件？\">React 中什么是有状态的组件？</h3>\n<p>有状态的组件是一种其行为取决于该状态的组件。这意味着在一个组件的两个实例中，即使给这两个实例赋予相同的属性，他们也不一定会有相同的渲染输出，这和纯函数组件不同。</p>\n<pre><code>// Stateful class component\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { count: 0 }\n  }\n  render() {\n    // ...\n  }\n}\n\n// Stateful function component\nfunction App() {\n  const [count, setCount] = useState(0)\n  return // ...\n} </code></pre><ul>\n<li>有状态的组件包含了他们内部所依赖的状态。</li>\n<li>有状态的组件是类组件或者是使用了 useState hook 的函数组件。</li>\n<li>有状态的组件在构造器中或使用 <code>useState()</code></li>\n</ul>\n<pre><code>import {useState} from 'react';\n\nfunction Counter(){\n\n let [number,setCount ] = useState(0);\n\n   return (\n       <div>\n        <h1>{number}</h1>\n        <button onClick={()=>setCount(number+1)} >Increment</button>\n        <button onClick={()=>setCount(number-1)} >Deccrement</button>\n       </div>\n   )\n}</code></pre><h3 id=\"什么是无状态组件\">什么是无状态组件</h3>\n<p>无状态组件是本身行为不需要依赖他自身状态的组件。无状态组件可以是函数组件或者类组件。无状态函数组件更易于维护和测试，因为他们可以保证在相同的属性下有相同的输出。当不需要使用生命周期钩子时，应该首先使用无状态函数组件。</p>\n<ul>\n<li>无状态组件不依赖他自身的状态。</li>\n<li>无状态组件可以是类组件或者函数组件。</li>\n<li>无状态函数组件可以完全避免使用 <code>this</code> 关键字。</li>\n<li>无状态组件有更高的性能。</li>\n</ul>\n<pre><code>const Component (props)=>(\n    <div>\n        {props.text}\n        ...\n    </div>\n)</code></pre><h3 id=\"key-是什么？列表中使用时有什么优点？\">key 是什么？列表中使用时有什么优点？</h3>\n<p>Keys 是一种特殊的字符串属性，可以帮助 React 识别哪些项已经被修改过、添加过或删除过。当渲染数组元素时就需要使用 key 来给每一个元素进行固定的标识。每一个元素的 key 必须是唯一的（例如，数据中的 IDs 或最终排序后的索引）。</p>\n<pre><code>const todoItems = todos.map(todo => <li key={todo.id}>{todo.text}</li>) </code></pre><ul>\n<li>Keys 为集合中的元素提供来固定的标识，从而帮助 React 来识别增删改。</li>\n<li>如果项目的顺序可能会发生变化，则不建议使用索引作为 keys，因为这可能会对性能产生负面影响，并且可能会导致组件的状态出现问题。</li>\n<li>如果将列表项单独提出来做为一个组件，在列表组件中 li 标签上的 key 需要提升到 ListItem 组件上</li>\n</ul>\n<pre><code>function ListItem(props) {\n  // Correct! There is no need to specify the key here:\n  return <li>{props.value}</li>;\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Correct! Key should be specified inside the array.\n    <ListItem key={number.toString()}\n              value={number} />\n\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);</code></pre><h3 id=\"react-生命周期的方法有哪些？\">React 生命周期的方法有哪些？</h3>\n<p><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#the-component-lifecycle\">https://zh-hans.reactjs.org/docs/react-component.html#the-component-lifecycle</a></p>\n<p><a href=\"https://medium.com/coding-hot-pot/react-lifecycle-%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F-a48683ae3922\">https://medium.com/coding-hot-pot/react-lifecycle-%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F-a48683ae3922</a></p>\n<h4 id=\"组件的生命周期\">组件的生命周期</h4>\n<h5 id=\"挂载\">挂载</h5>\n<p>当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：</p>\n<ul>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#constructor\"><strong><code>constructor()</code></strong></a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#static-getderivedstatefromprops\"><code>static getDerivedStateFromProps()</code></a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#render\"><strong><code>render()</code></strong></a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#componentdidmount\"><strong><code>componentDidMount()</code></strong></a></li>\n</ul>\n<blockquote>\n<p>注意:</p>\n<p>下述生命周期方法即将过时，在新代码中应该<a href=\"https://zh-hans.reactjs.org/blog/2018/03/27/update-on-async-rendering.html\">避免使用它们</a>：</p>\n<ul>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillmount\"><code>UNSAFE_componentWillMount()</code></a></li>\n</ul>\n</blockquote>\n<h5 id=\"更新\">更新</h5>\n<p>当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：</p>\n<ul>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#static-getderivedstatefromprops\"><code>static getDerivedStateFromProps()</code></a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#shouldcomponentupdate\"><code>shouldComponentUpdate()</code></a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#render\"><strong><code>render()</code></strong></a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#getsnapshotbeforeupdate\"><code>getSnapshotBeforeUpdate()</code></a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#componentdidupdate\"><strong><code>componentDidUpdate()</code></strong></a></li>\n</ul>\n<blockquote>\n<p>注意:</p>\n<p>下述方法即将过时，在新代码中应该<a href=\"https://zh-hans.reactjs.org/blog/2018/03/27/update-on-async-rendering.html\">避免使用它们</a>：</p>\n<ul>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillupdate\"><code>UNSAFE_componentWillUpdate()</code></a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops\"><code>UNSAFE_componentWillReceiveProps()</code></a></li>\n</ul>\n</blockquote>\n<h5 id=\"卸载\">卸载</h5>\n<p>当组件从 DOM 中移除时会调用如下方法：</p>\n<ul>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#componentwillunmount\"><strong><code>componentWillUnmount()</code></strong></a></li>\n</ul>\n<h5 id=\"错误处理\">错误处理</h5>\n<p>当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：</p>\n<ul>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#static-getderivedstatefromerror\"><code>static getDerivedStateFromError()</code></a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#componentdidcatch\"><code>componentDidCatch()</code></a></li>\n</ul>\n<h3 id=\"ref\">Ref</h3>\n<p><a href=\"https://zh-hant.reactjs.org/docs/refs-and-the-dom.html\">https://zh-hant.reactjs.org/docs/refs-and-the-dom.html</a></p>\n<p><a href=\"https://juejin.cn/post/6844903749211652104\">https://juejin.cn/post/6844903749211652104</a></p>\n<p><strong>React.createRef</strong></p>\n<pre class=\"language-react\"><code class=\"language-react\">class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n  render() {\n    return <div ref={this.myRef} />;\n  }\n}</code></pre><p><strong>Callback ref</strong></p>\n<pre class=\"language-react\"><code class=\"language-react\">class Test extends React.Component {\n  componentDidMount(){\n    console.log(this.second);\n  // <input value=\"second\">\n  }\n  render() {\n    return <input value=\"second\" ref={(input) => {this.second = input }} />\n  }\n}</code></pre><h3 id=\"children\">children</h3>\n<p><code>children</code> 是传递给组件属性对象的一部分，他提供了组合组件的能力</p>\n<pre class=\"language-react\"><code class=\"language-react\">function GenericBox({ children }: any) {\n  console.log('children', children)\n  return <div className=\"container\">{children}</div>\n}\n\n<GenericBox>\n  <span>Hello</span> <span>World</span>\n</GenericBox></code></pre><p><img src=\"https://user-images.githubusercontent.com/24250627/108600318-844e1180-73d1-11eb-90fa-61affe7941a9.png\" alt=\"image\"></p>\n<h3 id=\"context\">Context</h3>\n<p><a href=\"https://reactjs.org/docs/context.html\">https://reactjs.org/docs/context.html</a></p>\n<ul>\n<li><p>Context 提供了一种通过 React 组件树传递数据的方法，他不需要手动传递属性。</p>\n</li>\n<li><p>使用 Context，可以跨越组件进行数据的传递</p>\n</li>\n</ul>\n<h3 id=\"react-错误边界\">React 错误边界</h3>\n<p>错误边界是 React 捕获子组件树中所有 JavaScript 错误的组件，他可以记录这些错误，并将错误显示在 UI 上来替代组件树的崩溃。</p>\n<p>定义 <code>componentDidCatch</code> 那么他将成为错误边界</p>\n<p><a href=\"https://reactjs.org/docs/error-boundaries.html\">https://reactjs.org/docs/error-boundaries.html</a></p>\n<pre class=\"language-react\"><code class=\"language-react\">class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch(error, info) {\n    // Display fallback UI\n    this.setState({ hasError: true })\n    // You can also log the error to an error reporting service\n    logErrorToMyService(error, info)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}</code></pre><ul>\n<li><code>componentDidCatch</code>：用于错误边界。他允许组件去捕获其子组件树中任意位置的 JavaScript 错误，打印错误，并使用 UI 展现错误信息。</li>\n<li>当任何一个子组件在渲染过程中、在一个生命周期的方法中或在构造函数中发生错误时 <code>static getDerivedStateFromError()</code>，<code>componentDidCatch()</code> 将会被调用。</li>\n</ul>\n<pre class=\"language-react\"><code class=\"language-react\">class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    logErrorToMyService(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children; \n  }\n}</code></pre><h3 id=\"fragments\">Fragments</h3>\n<p><a href=\"https://reactjs.org/docs/fragments.html\">https://reactjs.org/docs/fragments.html</a></p>\n<pre class=\"language-react\"><code class=\"language-react\">render() {\n  return (\n    <React.Fragment>\n      <ChildA />\n      <ChildB />\n      <ChildC />\n    </React.Fragment>\n  );\n}</code></pre><ul>\n<li>可以使用 <code>&lt;&gt;&lt;/&gt;</code> 代替 <code>&lt;React.Fragment/&gt;</code>。<code>&lt;&gt;&lt;/&gt;</code> 只是一个语法糖。</li>\n<li><code>&lt;&gt;&lt;/&gt;</code> 语法不能接受键值或属性，以下情况只能使用 <code>&lt;React.Fragment/&gt;</code> (没有实际测试过)</li>\n</ul>\n<pre><code>function Glossary(props) {\n  return (\n    <dl>\n      {props.items.map(item => (\n        // 没有`key`，将会触发一个key警告\n        <React.Fragment key={item.id}>\n          <dt>{item.term}</dt>\n          <dd>{item.description}</dd>\n        </React.Fragment>\n      ))}\n    </dl>\n  );\n}</code></pre><ul>\n<li><code>key</code> 是唯一可以传递给 <code>Fragment</code> 的属性 （没有实际测试过）</li>\n</ul>\n<h3 id=\"高阶组件\">高阶组件</h3>\n<p><a href=\"https://zh-hans.reactjs.org/docs/higher-order-components.html\">https://zh-hans.reactjs.org/docs/higher-order-components.html</a></p>\n<blockquote>\n<p>高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。</p>\n<p>具体而言，<strong>高阶组件是参数为组件，返回值为新组件的函数。</strong></p>\n<pre><code>const EnhancedComponent = higherOrderComponent(WrappedComponent);</code></pre><p>组件是将 props 转换为 UI，而高阶组件是将组件转换为另一个组件。</p>\n</blockquote>\n<h3 id=\"portals\">Portals</h3>\n<p><a href=\"https://reactjs.org/docs/portals.html\">https://reactjs.org/docs/portals.html</a></p>\n<pre class=\"language-react\"><code class=\"language-react\">render() {\n  // React does *not* create a new div. It renders the children into `domNode`.\n  // `domNode` is any valid DOM node, regardless of its location in the DOM.\n  return ReactDOM.createPortal(\n    this.props.children,\n    domNode\n  );\n}</code></pre><h3 id=\"react-中如何使用-prop\">React 中如何使用 prop</h3>\n<p> <code>isRequired</code>。</p>\n<p>为组件定义的 <code>propTypes</code>：</p>\n<pre class=\"language-react\"><code class=\"language-react\">import PropTypes from \"prop-types\"\n\nclass User extends React.Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    age: PropTypes.number.isRequired\n  }\n\n  render() {\n    return (\n      <h1>Welcome, {this.props.name}</h1>\n      <h2>Age, {this.props.age}\n    )\n  }\n} </code></pre><ul>\n<li>使用 <code>propTypes</code> 并不是必需的，但这是一个非常棒的减少错误的实践</li>\n<li>使用 <code>PropTypes.element</code> 可以指定只传递一个子代</li>\n<li><code>defaultProps</code> 用来确保 <code>this.props</code> 在父组件没有指定的情况下有一个初始值</li>\n<li>类型检查发生在 <code>defaultProps</code> 赋值之后，所以类型检查也会应用在 <code>defaultProps</code> 上。</li>\n</ul>\n<h3 id=\"vue\">VUE</h3>\n<h4 id=\"vue-组件间通信六种方式\">Vue 组件间通信六种方式</h4>\n<p><a href=\"https://juejin.cn/post/6844903897258000398#heading-2\">https://juejin.cn/post/6844903897258000398#heading-2</a></p>\n<h4 id=\"virtual-dom\">Virtual Dom</h4>\n<p><a href=\"https://juejin.cn/post/6844903615652610055\">https://juejin.cn/post/6844903615652610055</a> TODO: 还没看...</p>\n<h2 id=\"node\">Node</h2>\n<h3 id=\"nodejs-回调的错误处理方式及其优点\">NodeJS 回调的错误处理方式及其优点</h3>\n<p>NodeJS 通常使用回调模式，如果在执行期间发生错误，会把错误作为回调的第一个参数传递到回调函数中：</p>\n<pre><code>fs.readFile(filePath, function(err, data) {\n  if (err) {\n    // 错误处理，return 可以让执行停止，这非常重要\n    return console.log(err)\n  }\n  // 使用数据对象\n  console.log(data)\n}) </code></pre><p>优点包括如下：</p>\n<ul>\n<li>如果不需要引用数据，则无需对数据进行处理</li>\n<li>API 保持高度的一致性可以带来更多的便捷</li>\n<li>能够轻松适配回调模式，从而实现更易于维护的代码</li>\n</ul>\n<p>从下面的示例中可以看出，如果没有错误，回调函数中的第一个参数将为 null。但是如果出现错误的话，将会创建一个 Error 对象作为回调函数中的唯一参数。回调函数让用户更加容易的知道是否有错误发生。</p>\n<p>这种实践也称为 Node.js 的错误约定，这种回调函数的实现称为错误优先回调。</p>\n<pre><code>var isTrue = function(value, callback) {\n  if (value === true) {\n    callback(null, \"Value was true.\")\n  } else {\n    callback(new Error(\"Value is not true!\"))\n  }\n}\n\nvar callback = function(error, data) {\n  if (error) {\n    console.log(error)\n    return\n  }\n  console.log(data)\n}\n\nisTrue(false, callback) // Error: Value is not true!\nisTrue(true, callback) // Value was true.</code></pre><h3 id=\"rest\">REST</h3>\n<p>REST（REpresentational State Transfer）是一种用于网络架构的软件设计模式。RESTful Web 应用程序使用和资源相关的信息方式对数据进行公开。</p>\n<p>通常，这个概念用于管理 Web 应用程序中的状态。对于大多数应用程序来说，他们对数据都有读取，创建，更新和销毁这四个共同的操作。数据模块化后形成单独的表，如 <code>posts</code>,<code>users</code>,<code>comments</code>，RESTful API 通过以下方式对数据进行访问：</p>\n<ul>\n<li>资源标识符。使用端点或 URL 来表示资源。</li>\n<li>服务器对资源的操作应该使用 HTTP 方法或动词。常见的 HTTP 方法有 GET，POST，PUT 和 DELETE。</li>\n</ul>\n<p>以下示例为包含 <code>posts</code> 资源的 HTTP 方法及 URL：</p>\n<ul>\n<li>读取：<code>/posts/</code>=&gt; GET</li>\n<li>创建：<code>/posts/new</code>=&gt; POST</li>\n<li>更新：<code>/posts/:id</code>=&gt; PUT</li>\n<li>删除：<code>/posts/:id</code>=&gt; DELETE</li>\n<li>除 RESTful 以外，GraphQL 也很受欢迎。</li>\n</ul>\n<h3 id=\"如何避免地狱回调？\">如何避免地狱回调？</h3>\n<p>如何避免以下这种地狱回调的情况？</p>\n<pre><code>getData(function(a) {\n  getMoreData(a, function(b) {\n    getMoreData(b, function(c) {\n      getMoreData(c, function(d) {\n        getMoreData(d, function(e) {\n          // ...\n        })\n      })\n    })\n  })\n})</code></pre><p>使用最佳的 <code>async/await</code> 进行替换</p>\n<pre><code>async function asyncAwaitVersion() {\n  const a = await getData()\n  const b = await getMoreData(a)\n  const c = await getMoreData(b)\n  const d = await getMoreData(c)\n  const e = await getMoreData(d)\n  // ...\n} </code></pre><h3 id=\"nodejs-中的事件循环？\">Node.js 中的事件循环？</h3>\n<p><a href=\"https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/\">https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/</a></p>\n<p><a href=\"https://juejin.cn/post/6844903999506923528\">https://juejin.cn/post/6844903999506923528</a></p>\n<p>事件循环允许 Node.js 执行非阻塞的 I/O 操作，尽管 JavaScript 是单线程的。</p>\n<p>事件循环处理所有的异步回调。回调在一个循环中进行排队，当代码运行时，队列中的每一个回调在接收到响应时将逐个进行运行。当 Node.js 启动时会初始化事件循环，每一个事件循环都有如下顺序的六个循环阶段：</p>\n<pre><code>┌───────────────────────────┐\n┌─>│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │<─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘</code></pre><h2 id=\"前端模块化：commonjsamdcmdes6\">前端模块化：CommonJS,AMD,CMD,ES6</h2>\n<p><a href=\"https://juejin.cn/post/6844903576309858318\">https://juejin.cn/post/6844903576309858318</a></p>\n<h3 id=\"es6-模块与-commonjs-模块的差异\">ES6 模块与 CommonJS 模块的差异</h3>\n<h3 id=\"1-commonjs-模块输出的是一个值的拷贝，es6-模块输出的是值的引用。\">1. CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</h3>\n<ul>\n<li>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</li>\n<li>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的<code>import</code>有点像 Unix 系统的“符号连接”，原始值变了，<code>import</code>加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</li>\n</ul>\n<h3 id=\"2-commonjs-模块是运行时加载，es6-模块是编译时输出接口。\">2. CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</h3>\n<ul>\n<li>运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。</li>\n<li>编译时加载: ES6 模块不是对象，而是通过 <code>export</code> 命令显式指定输出的代码，<code>import</code>时采用静态命令的形式。即在<code>import</code>时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。</li>\n</ul>\n<p>CommonJS 加载的是一个对象（即<code>module.exports</code>属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p>\n<h2 id=\"从浏览器多进程到js单线程，js运行机制最全面的一次梳理\">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</h2>\n<p><a href=\"https://juejin.cn/post/6844903553795014663\">https://juejin.cn/post/6844903553795014663</a></p>\n<h2 id=\"浏览器相关\">浏览器相关</h2>\n<h3 id=\"cookie、localsrorage、session、indexdb\">cookie、localSrorage、session、indexDB</h3>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>cookie</th>\n<th>localStorage</th>\n<th>sessionStorage</th>\n<th>indexDB</th>\n<th>Web SQL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>周期</td>\n<td>可以服务器生成，可以前端设置。可以设置过期时间</td>\n<td>长期</td>\n<td>会话周期</td>\n<td>长期</td>\n<td>长期</td>\n</tr>\n<tr>\n<td>数据存储大小</td>\n<td>4K</td>\n<td>5M</td>\n<td>5M</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>与服务端通信</td>\n<td>服务端设置的Cookie会携带在 header</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>对于 <code>cookie</code>，我们还需要注意安全性。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value</td>\n<td>如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识</td>\n</tr>\n<tr>\n<td>http-only</td>\n<td>不能通过 JS 访问 Cookie，减少 XSS 攻击</td>\n</tr>\n<tr>\n<td>secure</td>\n<td>只能在协议为 HTTPS 的请求中携带</td>\n</tr>\n<tr>\n<td>same-site</td>\n<td>规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击</td>\n</tr>\n</tbody></table>\n<h3 id=\"怎么判断页面是否加载完成？\">怎么判断页面是否加载完成？</h3>\n<p>**<code>DOMContentLoaded</code>**当初始HTML文档已完全加载并解析，而无需等待样式表，图像和子帧完成加载时，将触发此事件。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOM fully loaded and parsed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>**<code>load</code>**加载整个页面（包括所有相关资源，例如样式表和图像）时，将触发该事件。这与相反<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event\"><code>DOMContentLoaded</code></a>，后者在页面DOM被加载后立即触发，而无需等待资源完成加载。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'page is fully loaded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"重绘（repaint）和回流（reflow）\">重绘（Repaint）和回流（Reflow）</h3>\n<p>重绘：不改变布局</p>\n<p>回流：需要改变布局</p>\n<p>回流一定发生重绘 重绘不一定发生回流</p>\n<ul>\n<li><p><a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/24\">https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/24</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/6844903682455109640#heading-45%EF%BC%88%E5%BE%88%E5%A4%9A%E4%BA%BA%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%98%AF%EF%BC%8C%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81%E5%85%B6%E5%AE%9E%E5%92%8C\">https://juejin.cn/post/6844903682455109640#heading-45（很多人不知道的是，重绘和回流其实和</a> Event loop 有关。</p>\n</li>\n</ul>\n<p>TODO: 这里没理解...）</p>\n<ul>\n<li><a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model\">https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model</a></li>\n</ul>\n<h4 id=\"减少重绘和回流\">减少重绘和回流</h4>\n<ul>\n<li><p>使用 <code>translate</code> 替代 <code>top</code></p>\n</li>\n<li><p>使用 <code>visibility</code> 替换 <code>display: none</code> ，因为前者只会引起重绘，后者会引发回流（改变了布局）</p>\n</li>\n<li><p>合并多次对DOM和样式的修改，然后一次处理</p>\n</li>\n<li><p>对于复杂动画效果,使用绝对定位让其脱离文档流</p>\n</li>\n<li><p>css3硬件加速（GPU加速）</p>\n</li>\n<li><p>避免触发同步布局事件： 访问元素的一些属性的时候，会导致浏览器强制清空队列，进行强制同步布局。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">initP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> paragraphs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        paragraphs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> box<span class=\"token punctuation\">.</span>offsetWidth <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> box<span class=\"token punctuation\">.</span>offsetWidth<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">initP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> paragraphs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        paragraphs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000017329980\">https://segmentfault.com/a/1190000017329980</a></p>\n<h3 id=\"图片优化\">图片优化</h3>\n<h5 id=\"计算图片大小\">计算图片大小</h5>\n<p>对于一张 100 * 100 像素的图片来说，图像上有 10000 个像素点，如果每个像素的值是 RGBA 存储的话，那么也就是说每个像素有 4 个通道，每个通道 1 个字节（8 位 = 1个字节），所以该图片大小大概为 39KB（10000 * 1 * 4 / 1024）。</p>\n<p>但是在实际项目中，一张图片可能并不需要使用那么多颜色去显示，我们可以通过减少每个像素的调色板来相应缩小图片的大小。</p>\n<p>了解了如何计算图片大小的知识，那么对于如何优化图片，想必大家已经有 2 个思路了：</p>\n<ul>\n<li>减少像素点</li>\n<li>减少每个像素点能够显示的颜色</li>\n</ul>\n<h5 id=\"图片加载优化\">图片加载优化</h5>\n<ol>\n<li><p>不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用 CSS 去代替。</p>\n</li>\n<li><p>对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。还可以返回webp等图片</p>\n</li>\n<li><p>小图使用 base64 格式</p>\n</li>\n<li><p>将多个图标文件整合到一张图片中（雪碧图）</p>\n</li>\n<li><p>选择正确的图片格式：</p>\n<ul>\n<li><p>对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好。安卓、PC支持都还不错，IOS移动端需要注意</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 判断兼容性</span>\n<span class=\"token keyword\">const</span> isSupportWebp <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>browser <span class=\"token operator\">?</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>map <span class=\"token operator\">&amp;&amp;</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image/webp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data:image/webp'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></code></pre></li>\n<li><p>小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替</p>\n</li>\n<li><p>照片使用 JPEG</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"其他文件优化\">其他文件优化</h3>\n<p>CSS 文件放在 <code>head</code> 中</p>\n<p>服务端开启文件压缩功能 GZIP</p>\n<p>将 <code>script</code> 标签放在 <code>body</code> 底部，因为 JS 文件执行会阻塞渲染。当然也可以把 <code>script</code> 标签放在任意位置然后加上 <code>defer</code> ，表示该文件会并行下载，但是会放到 HTML 解析完成后顺序执行。对于没有任何依赖的 JS 文件可以加上 <code>async</code> ，表示加载和渲染后续文档元素的过程将和  JS 文件的加载与执行并行无序进行。</p>\n<p>执行 JS 代码过长会卡住渲染，对于需要很多时间计算的代码可以考虑使用 <code>Webworker</code>。<code>Webworker</code> 可以让我们另开一个线程执行脚本而不影响渲染。</p>\n<h4 id=\"cdn\">CDN</h4>\n<p>静态资源尽量使用 CDN 加载，由于浏览器对于单个域名有并发请求上限，可以考虑使用多个 CDN 域名。对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，否则每次请求都会带上主站的 Cookie。</p>\n<h4 id=\"使用-webpack-优化项目\">使用 Webpack 优化项目</h4>\n<ul>\n<li>对于 Webpack4，打包项目使用 production 模式，这样会自动开启代码压缩</li>\n<li>使用 ES6 模块来开启 tree shaking，这个技术可以移除没有使用的代码</li>\n<li>优化图片，对于小图可以使用 base64 的方式写入文件中</li>\n<li>按照路由拆分代码，实现按需加载</li>\n<li>给打包出来的文件名添加哈希，实现浏览器缓存文件</li>\n</ul>\n<h3 id=\"webpack\">Webpack</h3>\n<p>...</p>\n<h2 id=\"网络\">网络</h2>\n<h3 id=\"tcp-3次握手\">TCP 3次握手</h3>\n<p>在 TCP 协议中，主动发起请求的一端为客户端，被动连接的一端称为服务端。不管是客户端还是服务端，TCP 连接建立完后都能发送和接收数据，所以 TCP 也是一个全双工的协议。</p>\n<p>起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建完 TCB 后遍进入 LISTEN 状态，此时开始等待客户端发送数据。</p>\n<p><strong>第一次握手</strong></p>\n<p>客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入  SYN-SENT 状态，<code>x</code> 表示客户端的数据通信初始序号。</p>\n<p><strong>第二次握手</strong></p>\n<p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</p>\n<p><strong>第三次握手</strong></p>\n<p>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</p>\n<p>PS：第三次握手可以包含数据，通过 TCP 快速打开（TFO）技术。其实只要涉及到握手的协议，都可以使用类似 TFO 的方式，客户端和服务端存储相同 cookie，下次握手时发出 cookie 达到减少 RTT 的目的。</p>\n<p><strong>你是否有疑惑明明两次握手就可以建立起连接，为什么还需要第三次应答？</strong></p>\n<p>因为这是为了防止失效的连接请求报文段被服务端接收，从而产生错误。</p>\n<p>可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求。如果连接请求 A 在两端关闭后终于抵达了服务端，那么这时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并进入 ESTABLISHED 状态。此时客户端其实是 CLOSED 状态，那么就会导致服务端一直等待，造成资源的浪费。</p>\n<p>PS：在建立连接中，任意一端掉线，TCP 都会重发 SYN 包，一般会重试五次，在建立连接中可能会遇到 SYN FLOOD 攻击。遇到这种情况你可以选择调低重试次数或者干脆在不能处理的情况下拒绝请求。</p>\n<h3 id=\"tcp-拥塞控制\">TCP 拥塞控制</h3>\n<p>拥塞处理和流量控制不同，后者是作用于接收方，保证接收方来得及接受数据。而前者是作用于网络，防止过多的数据拥塞网络，避免出现网络负载过大的情况。</p>\n<p>拥塞处理包括了四个算法，分别为：慢开始，拥塞避免，快速重传，快速恢复。</p>\n<h3 id=\"慢开始算法\">慢开始算法</h3>\n<p>慢开始算法，顾名思义，就是在传输开始时将发送窗口慢慢指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。</p>\n<p>慢开始算法步骤具体如下</p>\n<ol>\n<li>连接初始设置拥塞窗口（Congestion Window） 为 1 MSS（一个分段的最大数据量）</li>\n<li>每过一个 RTT 就将窗口大小乘二</li>\n<li>指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值时就会启动拥塞避免算法。</li>\n</ol>\n<h3 id=\"拥塞避免算法\">拥塞避免算法</h3>\n<p>拥塞避免算法相比简单点，每过一个 RTT 窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢将大小调整到最佳值。</p>\n<p>在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行以下步骤：</p>\n<ul>\n<li>将阈值设为当前拥塞窗口的一半</li>\n<li>将拥塞窗口设为 1 MSS</li>\n<li>启动拥塞避免算法</li>\n</ul>\n<h3 id=\"快速重传\">快速重传</h3>\n<p>快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号（没有 Sack 的情况下）。如果收到三个重复的 ACK，无需等待定时器超时再重发而是启动快速重传。具体算法分为两种：</p>\n<p><strong>TCP Taho 实现如下</strong></p>\n<ul>\n<li>将阈值设为当前拥塞窗口的一半</li>\n<li>将拥塞窗口设为 1 MSS</li>\n<li>重新开始慢开始算法</li>\n</ul>\n<p><strong>TCP Reno 实现如下</strong></p>\n<ul>\n<li>拥塞窗口减半</li>\n<li>将阈值设为当前拥塞窗口</li>\n<li>进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该阶段）</li>\n<li>使用拥塞避免算法</li>\n</ul>\n<h3 id=\"tcp-new-ren-改进后的快恢复\">TCP New Ren 改进后的快恢复</h3>\n<p><strong>TCP New Reno</strong> 算法改进了之前 <strong>TCP Reno</strong> 算法的缺陷。在之前，快恢复中只要收到一个新的 ACK 包，就会退出快恢复。</p>\n<p>在 <strong>TCP New Reno</strong> 中，TCP 发送方先记下三个重复 ACK 的分段的最大序号。</p>\n<p>假如我有一个分段数据是 1 ~ 10 这十个序号的报文，其中丢失了序号为 3 和 7 的报文，那么该分段的最大序号就是 10。发送端只会收到 ACK 序号为 3 的应答。这时候重发序号为 3 的报文，接收方顺利接收并会发送 ACK 序号为 7 的应答。这时候 TCP 知道对端是有多个包未收到，会继续发送序号为 7 的报文，接收方顺利接收并会发送 ACK 序号为 11 的应答，这时发送端认为这个分段接收端已经顺利接收，接下来会退出快恢复阶段。</p>\n<h3 id=\"https-握手\">HTTPS 握手</h3>\n<p>HTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密。</p>\n<h3 id=\"tls\">TLS</h3>\n<p>TLS 协议位于传输层之上，应用层之下。首次进行 TLS 协议传输需要两个 RTT ，接下来可以通过 Session Resumption 减少到一个 RTT。</p>\n<p>在 TLS 中使用了两种加密技术，分别为：对称加密和非对称加密。</p>\n<p><strong>对称加密</strong>：</p>\n<p>对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。</p>\n<p><strong>非对称加密</strong>：</p>\n<p>有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。</p>\n<h4 id=\"从输入-url-到页面加载全过程\">从输入 URL 到页面加载全过程</h4>\n<ol>\n<li>首先做 DNS 查询，如果这一步做了智能 DNS 解析的话，会提供访问速度最快的 IP 地址回来</li>\n<li>接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了</li>\n<li>TCP 握手结束后会进行 TLS 握手，然后就开始正式的传输数据</li>\n<li>数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件</li>\n<li>首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错</li>\n<li>浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件</li>\n<li>文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 <code>script</code> 标签的话，会判断是否存在 <code>async</code> 或者 <code>defer</code> ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP 2.0 协议的话会极大的提高多图的下载效率。</li>\n<li>初始的 HTML 被完全加载和解析后会触发 <code>DOMContentLoaded</code> 事件</li>\n<li>CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西</li>\n<li>在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了</li>\n</ol>\n<h4 id=\"http-常用返回码\">HTTP 常用返回码</h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Status</a></p>\n<p>HTTP响应状态代码指示特定的<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP\">HTTP</a>请求是否已成功完成。响应分为五类：</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#information_responses\">信息反馈</a>（<code>100</code>– <code>199</code>）</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#successful_responses\">成功的回应</a>（<code>200</code>– <code>299</code>）</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#redirection_messages\">重定向</a>（<code>300</code>– <code>399</code>）</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses\">客户端错误</a>（<code>400</code>– <code>499</code>）</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#server_error_responses\">服务器错误</a>（<code>500</code>– <code>599</code>）</li>\n</ol>\n<p><strong>2XX 成功</strong></p>\n<ul>\n<li>200 OK，表示从客户端发来的请求在服务器端被正确处理</li>\n<li>204 No content，表示请求成功，但响应报文不含实体的主体部分</li>\n<li>205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容</li>\n<li>206 Partial Content，进行范围请求</li>\n</ul>\n<p><strong>3XX 重定向</strong></p>\n<ul>\n<li>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL</li>\n<li>302 found，临时性重定向，表示资源临时被分配了新的 URL</li>\n<li>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源</li>\n<li>304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况</li>\n<li>307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</li>\n</ul>\n<p><strong>4XX 客户端错误</strong></p>\n<ul>\n<li>400 bad request，请求报文存在语法错误</li>\n<li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息</li>\n<li>403 forbidden，表示对请求资源的访问被服务器拒绝</li>\n<li>404 not found，表示在服务器上没有找到请求的资源</li>\n<li>429 Too Many Requests 用户在给定的时间内发送了太多请求（“速率限制”）</li>\n</ul>\n<p><strong>5XX 服务器错误</strong></p>\n<ul>\n<li>500 internal sever error，表示服务器端在执行请求时发生了错误</li>\n<li>501 Not Implemented，表示服务器不支持当前请求所需要的某个功能</li>\n<li>502 Bad Gateway 此错误响应意味着服务器在充当网关以获取处理请求所需的响应的同时，获得了无效的响应。</li>\n<li>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</li>\n</ul>\n<h3 id=\"数据结构算法\">数据结构算法</h3>\n<p><a href=\"https://github.com/xiaotiandada/blog/issues/48\">https://github.com/xiaotiandada/blog/issues/48</a></p>\n<h2 id=\"security\">Security</h2>\n<h3 id=\"什么是跨站点脚本攻击（xss）\">什么是跨站点脚本攻击（XSS）</h3>\n<p>XSS 是指客户端代码注入，攻击者将带有恶意脚本的代码注入到合法的网站或 web 应用程序中。这通常发生在应用程序对用户的输入不进行验证时，这样恶意代码就会轻松的注入到动态的 HTML 内容中。</p>\n<ul>\n<li><p>可以使用工具库过滤xss <a href=\"https://www.npmjs.com/package/xss\">https://www.npmjs.com/package/xss</a></p>\n</li>\n<li><p>恶意的脚本有权限访问到通常用于存储会话令牌的 cookie。</p>\n</li>\n<li><p>当页面中注入的恶意脚本执行时，就可以对该页面中的 DOM 进行任意操作。这样一来，攻击者不仅可以插入与网站相似的内容或操作，也可以窜改网站上原有的实际内容。该脚本还可以使用 AJAX 发送带有任意内容的 HTTP 请求到任意一台服务器上。</p>\n</li>\n<li><p>在客户端，可以使用 <code>textContent</code> 来代替 <code>innerHTML</code> 以阻止浏览器运行通过 HTML 解析器执行内部脚本得到的字符串。</p>\n</li>\n<li><p>在服务器端，转义 HTML 标签可以阻止浏览器将用户的输入解析为真实的 HTML，这样也不会执行脚本。但如果你想真实的展现用户的输入，那就只能对会被注入的标签、标签属性进行过滤。</p>\n</li>\n</ul>\n<h2 id=\"其他\">其他</h2>\n<h3 id=\"什么是大-o-符号？\">什么是大 O 符号？</h3>\n<p>大 O 符号在计算机科学中 用来描述算法的时间复杂度。执行速度快且复杂性低的算法视为优秀的算法。\n 算法的运行次数并不是每次都相同，大部分取决于所提供的数据。在某些情况下，他们执行的很快，但某些情况下，他们却执行的很慢（哪怕他们的数据是一样多）。</p>\n<p>以下示例中，我们假设基准时间为：1element = 1ms</p>\n<h4 id=\"o1\">O(1)</h4>\n<pre><code>arr[arr.length - 1] // 1000 elements = 1ms</code></pre><p>时间复杂度恒定。无论数组有多少元素，理论（不考虑机器性能、当前环境等因素）上他执行的时间总量是相同的。</p>\n<h4 id=\"on\">O(N)</h4>\n<pre><code>arr.filter(fn) // 1000 elements = 1000ms</code></pre><p>线性时间复杂度。执行时间将随数组元素个数呈线性增加。如果数组拥有 1000 个元素且函数运行需要花费 1ms，那么 7000 个元素需要执行 7ms。这是因为函数在返回结果之前必须迭代数组中的所有元素。</p>\n<h4 id=\"o1-n\">O([1, N])</h4>\n<pre><code>arr.some(fn) // 1000 elements = 1ms <= x <= 1000ms</code></pre><p>执行时间的长短取决于提供给函数的数据，他需要的时间可能很短，也可能很长。最好的情况是 O(1)，最坏的情况是 O(N)。</p>\n<h4 id=\"onlogn\">O(NlogN)</h4>\n<pre><code>arr.sort(fn) // 1000 elements ~= 10000ms</code></pre><p>浏览器通常为 <code>sort()</code> 方法使用快速排序算法进行实现，快速排序的平均时间复杂度为 O(NlogN)。这对于数据很多的集合非常有效。</p>\n<h4 id=\"on2\">O(N^2)</h4>\n<pre><code>for (let i = 0; i < arr.length; i++) {\n  for (let j = 0; j < arr.length; j++) {\n    // 1000 elements = 1000000ms\n  }\n} </code></pre><p>执行时间随元素数量呈二次方增长。这通常是由于使用了嵌套循环。</p>\n<h4 id=\"on-1\">O(N!)</h4>\n<pre><code>// 1000 elements = Infinity ms\nconst permutations = arr => {\n  if (arr.length <= 2) return arr.length === 2 ? [arr, [arr[1], arr[0]]] : arr\n  return arr.reduce(\n    (acc, item, i) =>\n      acc.concat(\n        permutations([...arr.slice(0, i), ...arr.slice(i + 1)]).map(val => [\n          item,\n          ...val\n        ])\n      ),\n    []\n  )\n} </code></pre><p>数组中即使只增加一个元素，也会使执行时间增加的非常长。</p>\n<ul>\n<li>嵌套循环的执行时间会随着元素的增长呈指数增长，因此遇到嵌套循环需考虑到性能问题。</li>\n</ul>\n<p>...</p>\n","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}