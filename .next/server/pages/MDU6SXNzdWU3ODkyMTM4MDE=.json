{"pageProps":{"post":{"id":"MDU6SXNzdWU3ODkyMTM4MDE=","url":"https://github.com/xiaotiandada/blog/issues/65","title":"Egg set-cookie 与 Axios   HttpOnly","updatedAt":"2021-01-28T12:19:14Z","createdAt":"2021-01-19T17:25:58Z","body":"## 参考文章\r\n\r\n- https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\r\n- https://eggjs.org/zh-cn/core/cookie-and-session.html\r\n- https://github.com/mqyqingfeng/Blog/issues/157\r\n- https://github.com/eggjs/egg/issues/2721\r\n- https://github.com/eggjs/egg/blob/master/config/config.default.js#L57\r\n- https://eggjs.org/en/tutorials/proxy.html#mobileAside\r\n\r\n代码都在这儿：https://github.com/xiaotiandada/cli-ant-temp\r\n\r\n## 环境\r\n\r\n前后分离项目set-cookie\r\n\r\n## Axios 配置\r\n```javascript\r\nconst client = axios.create({\r\n  baseURL: process.env.VUE_APP_API,\r\n  timeout: 1000 * 30,\r\n  headers: {\r\n  },\r\n  withCredentials: true,\r\n})\r\n```\r\n需要设置``withCredentials: true`` axios默认是发送请求的时候不会带上cookie的\r\n\r\n## Egg 配置\r\n\r\n利用 cors 跨域\r\n\r\n```javascript\r\n// ...\r\n  const domainWhiteList = [ 'http://localhost:8080', 'http://127.0.0.1:8080' ];\r\n\r\n  config.security = {\r\n    domainWhiteList,\r\n    csrf: {\r\n      enable: false,\r\n    },\r\n  };\r\n\r\n  config.cors = {\r\n    origin: ctx => {\r\n      if (domainWhiteList.includes(ctx.request.header.origin)) {\r\n        return ctx.request.header.origin;\r\n      }\r\n    },\r\n    allowMethods: 'GET,HEAD,PUT,POST,DELETE,PATCH,OPTIONS',\r\n    credentials: true,\r\n  };\r\n// ...\r\n```\r\n\r\n## Egg get\r\n\r\n```typescript\r\n public async add() {\r\n    const ctx = this.ctx;\r\n    let count: any = ctx.cookies.get('count');\r\n    console.log('count', count);\r\n    console.log('token', ctx.cookies.get('access-token'));\r\n\r\n    count = count ? Number(count) : 0;\r\n    const countCookie: any = ++count;\r\n    ctx.cookies.set('count', countCookie, {\r\n      sameSite: 'none',\r\n    });\r\n    ctx.body = count;\r\n }\r\n```\r\n\r\n## Egg post\r\n\r\n```typescript\r\n  public async signIn() {\r\n    const { ctx } = this;\r\n    const { account, password } = ctx.request.body;\r\n    const payload = {\r\n      account,\r\n      password,\r\n    };\r\n    const secret = 'xxx';\r\n    const token = jwt.encode(payload, secret);\r\n    ctx.cookies.set('access-token', token, {\r\n      sameSite: 'none',\r\n      maxAge: ms('7d'),\r\n    });\r\n    ctx.body = {\r\n      data: token,\r\n    };\r\n  }\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/24250627/105119172-c520e500-5b0a-11eb-95bb-f4a56bb581c6.png)\r\n\r\n## 问题\r\n\r\n部署到线上需要开启 ``sameSite: 'none'`` , sameSite 需要开启 ``secure: true``\r\n\r\n[参考文章](https://github.com/mqyqingfeng/Blog/issues/157) \r\n\r\n```javascript\r\n      ctx.cookies.set('access-token', accessToken, {\r\n        sameSite: 'none',\r\n        secure: true,\r\n        maxAge: ms('7d'),\r\n      });\r\n```\r\n\r\n```\r\nHTTP 接口不支持 SameSite=none\r\n如果你想加 SameSite=none 属性，那么该 Cookie 就必须同时加上 Secure 属性，表示只有在 HTTPS 协议下该 Cookie 才会被发送。\r\n```\r\n实际部署到线上会报错 ``Cannot send secure cookie over unencrypted connection``\r\n\r\n解决方案\r\n\r\n![image](https://user-images.githubusercontent.com/24250627/105142637-cca9b380-5b35-11eb-8747-0e29850e761f.png)\r\n\r\n应该设置Nginx等([caddy](https://caddyserver.com/))可以解决问题，但是我这里是设置Egg config的 [proxy](https://eggjs.org/en/tutorials/proxy.html#mobileAside) 解决这个问题\r\n\r\n\r\n","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<h2 id=\"参考文章\">参考文章</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies</a></li>\n<li><a href=\"https://eggjs.org/zh-cn/core/cookie-and-session.html\">https://eggjs.org/zh-cn/core/cookie-and-session.html</a></li>\n<li><a href=\"https://github.com/mqyqingfeng/Blog/issues/157\">https://github.com/mqyqingfeng/Blog/issues/157</a></li>\n<li><a href=\"https://github.com/eggjs/egg/issues/2721\">https://github.com/eggjs/egg/issues/2721</a></li>\n<li><a href=\"https://github.com/eggjs/egg/blob/master/config/config.default.js#L57\">https://github.com/eggjs/egg/blob/master/config/config.default.js#L57</a></li>\n<li><a href=\"https://eggjs.org/en/tutorials/proxy.html#mobileAside\">https://eggjs.org/en/tutorials/proxy.html#mobileAside</a></li>\n</ul>\n<p>代码都在这儿：<a href=\"https://github.com/xiaotiandada/cli-ant-temp\">https://github.com/xiaotiandada/cli-ant-temp</a></p>\n<h2 id=\"环境\">环境</h2>\n<p>前后分离项目set-cookie</p>\n<h2 id=\"axios-配置\">Axios 配置</h2>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">baseURL</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VUE_APP_API</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre><p>需要设置<code>withCredentials: true</code> axios默认是发送请求的时候不会带上cookie的</p>\n<h2 id=\"egg-配置\">Egg 配置</h2>\n<p>利用 cors 跨域</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> domainWhiteList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'http://localhost:8080'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://127.0.0.1:8080'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  config<span class=\"token punctuation\">.</span>security <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    domainWhiteList<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">csrf</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">enable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  config<span class=\"token punctuation\">.</span>cors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">origin</span><span class=\"token operator\">:</span> <span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>domainWhiteList<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">allowMethods</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET,HEAD,PUT,POST,DELETE,PATCH,OPTIONS'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre><h2 id=\"egg-get\">Egg get</h2>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"> public async add() {\n    const ctx = this.ctx;\n    let count: any = ctx.cookies.get('count');\n    console.log('count', count);\n    console.log('token', ctx.cookies.get('access-token'));\n\n    count = count ? Number(count) : 0;\n    const countCookie: any = ++count;\n    ctx.cookies.set('count', countCookie, {\n      sameSite: 'none',\n    });\n    ctx.body = count;\n }</code></pre><h2 id=\"egg-post\">Egg post</h2>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">  public async signIn() {\n    const { ctx } = this;\n    const { account, password } = ctx.request.body;\n    const payload = {\n      account,\n      password,\n    };\n    const secret = 'xxx';\n    const token = jwt.encode(payload, secret);\n    ctx.cookies.set('access-token', token, {\n      sameSite: 'none',\n      maxAge: ms('7d'),\n    });\n    ctx.body = {\n      data: token,\n    };\n  }</code></pre><p><img src=\"https://user-images.githubusercontent.com/24250627/105119172-c520e500-5b0a-11eb-95bb-f4a56bb581c6.png\" alt=\"image\"></p>\n<h2 id=\"问题\">问题</h2>\n<p>部署到线上需要开启 <code>sameSite: &#39;none&#39;</code> , sameSite 需要开启 <code>secure: true</code></p>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/157\">参考文章</a> </p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">      ctx<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'access-token'</span><span class=\"token punctuation\">,</span> accessToken<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">sameSite</span><span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">secure</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token function\">ms</span><span class=\"token punctuation\">(</span><span class=\"token string\">'7d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><pre><code>HTTP 接口不支持 SameSite=none\n如果你想加 SameSite=none 属性，那么该 Cookie 就必须同时加上 Secure 属性，表示只有在 HTTPS 协议下该 Cookie 才会被发送。</code></pre><p>实际部署到线上会报错 <code>Cannot send secure cookie over unencrypted connection</code></p>\n<p>解决方案</p>\n<p><img src=\"https://user-images.githubusercontent.com/24250627/105142637-cca9b380-5b35-11eb-8747-0e29850e761f.png\" alt=\"image\"></p>\n<p>应该设置Nginx等(<a href=\"https://caddyserver.com/\">caddy</a>)可以解决问题，但是我这里是设置Egg config的 <a href=\"https://eggjs.org/en/tutorials/proxy.html#mobileAside\">proxy</a> 解决这个问题</p>\n","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}