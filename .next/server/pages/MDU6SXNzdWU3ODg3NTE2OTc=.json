{"pageProps":{"post":{"id":"MDU6SXNzdWU3ODg3NTE2OTc=","url":"https://github.com/xiaotiandada/blog/issues/60","title":"JFIF图片格式上传","updatedAt":"2021-01-19T06:40:01Z","createdAt":"2021-01-19T06:40:01Z","body":"2020-11-13 00:01:44\r\n\r\n图片存储格式之一，由[JPEG](https://baike.baidu.com/item/JPEG)格式衍生而来，后缀为\".jfif\"。[JFIF](https://baike.baidu.com/item/jfif)\r\n\r\n<!-- more -->\r\n\r\n了解到一种新的图片格式JFIF 但是这种图片格式上传是导致失败 `Invalid filename`  \r\n\r\n最后解决方案时候在前端上传的时候转换文件\r\n\r\n如果没有图片的话可以在这里转换 https://convertio.co/zh/\r\n\r\n前端：React Ant\r\n\r\n后端：Nodejs Egg oss\r\n\r\n> 后端代码忽略了 参考: https://github.com/eggjs/egg-oss\r\n\r\n前端用Ant的Upload https://ant.design/components/upload-cn/ \r\n\r\n这里有篇介绍格式转换的 https://blog.csdn.net/qq_21937107/article/details/91424611\r\n\r\n| 参数          | 说明                                          | 类型                      | 默认值 | 版本 |\r\n| ------------- | --------------------------------------------- | ------------------------- | ------ | ---- |\r\n| transformFile | 在上传之前转换文件。支持返回一个 Promise 对象 | function(file): string... | -      |      |\r\n\r\n```typescript\r\nfunction blobToFile(blob: any, fileName: string) {\r\n  blob.lastModifiedDate = new Date();\r\n  blob.name = fileName;\r\n  return blob;\r\n}\r\n\r\nasync function transformFile(file: File): Promise<string | Blob | File> {\r\n  // https://blog.csdn.net/qq_21937107/article/details/91424611\r\n  // base64 to blob then file\r\n  console.log('file', file)\r\n  try {\r\n    const fileImg = await imageConversion.filetoDataURL(file)\r\n    const blob = await imageConversion.dataURLtoFile(fileImg)\r\n\r\n    const fileName = file.name.split('.')\r\n    let fileType = fileName[fileName.length - 1]\r\n\r\n    // 如果文件类型是 jfif 使用 jpg 否则使用默认\r\n    if (fileType === 'jfif') {\r\n      fileType = 'jpg'\r\n    }\r\n    const result = blobToFile(blob, `${fileName[0] || Date.now()}.${fileType}`)\r\n    console.log('result', result)\r\n\r\n    return result\r\n  } catch (e) {\r\n    console.log('e', e)\r\n    return file\r\n  }\r\n}\r\n```\r\n\r\n 利用 [imageConversion](https://github.com/WangYuLue/image-conversion) 逻辑就是 File transform base64 to blob then file\r\n\r\n```typescript\r\n// to base64\r\nconst fileImg = await imageConversion.filetoDataURL(file)\r\n// to blob\r\nconst blob = await imageConversion.dataURLtoFile(fileImg)\r\n// then file\r\nblobToFile(blob, fileName)\r\n```\r\n\r\nJFIF上传成功包括WEBP IOS预览也正常\r\n\r\n","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<p>2020-11-13 00:01:44</p>\n<p>图片存储格式之一，由<a href=\"https://baike.baidu.com/item/JPEG\">JPEG</a>格式衍生而来，后缀为&quot;.jfif&quot;。<a href=\"https://baike.baidu.com/item/jfif\">JFIF</a></p>\n<!-- more -->\n\n<p>了解到一种新的图片格式JFIF 但是这种图片格式上传是导致失败 <code>Invalid filename</code>  </p>\n<p>最后解决方案时候在前端上传的时候转换文件</p>\n<p>如果没有图片的话可以在这里转换 <a href=\"https://convertio.co/zh/\">https://convertio.co/zh/</a></p>\n<p>前端：React Ant</p>\n<p>后端：Nodejs Egg oss</p>\n<blockquote>\n<p>后端代码忽略了 参考: <a href=\"https://github.com/eggjs/egg-oss\">https://github.com/eggjs/egg-oss</a></p>\n</blockquote>\n<p>前端用Ant的Upload <a href=\"https://ant.design/components/upload-cn/\">https://ant.design/components/upload-cn/</a> </p>\n<p>这里有篇介绍格式转换的 <a href=\"https://blog.csdn.net/qq_21937107/article/details/91424611\">https://blog.csdn.net/qq_21937107/article/details/91424611</a></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>transformFile</td>\n<td>在上传之前转换文件。支持返回一个 Promise 对象</td>\n<td>function(file): string...</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody></table>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">function blobToFile(blob: any, fileName: string) {\n  blob.lastModifiedDate = new Date();\n  blob.name = fileName;\n  return blob;\n}\n\nasync function transformFile(file: File): Promise<string | Blob | File> {\n  // https://blog.csdn.net/qq_21937107/article/details/91424611\n  // base64 to blob then file\n  console.log('file', file)\n  try {\n    const fileImg = await imageConversion.filetoDataURL(file)\n    const blob = await imageConversion.dataURLtoFile(fileImg)\n\n    const fileName = file.name.split('.')\n    let fileType = fileName[fileName.length - 1]\n\n    // 如果文件类型是 jfif 使用 jpg 否则使用默认\n    if (fileType === 'jfif') {\n      fileType = 'jpg'\n    }\n    const result = blobToFile(blob, `${fileName[0] || Date.now()}.${fileType}`)\n    console.log('result', result)\n\n    return result\n  } catch (e) {\n    console.log('e', e)\n    return file\n  }\n}</code></pre><p> 利用 <a href=\"https://github.com/WangYuLue/image-conversion\">imageConversion</a> 逻辑就是 File transform base64 to blob then file</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">// to base64\nconst fileImg = await imageConversion.filetoDataURL(file)\n// to blob\nconst blob = await imageConversion.dataURLtoFile(fileImg)\n// then file\nblobToFile(blob, fileName)</code></pre><p>JFIF上传成功包括WEBP IOS预览也正常</p>\n","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}