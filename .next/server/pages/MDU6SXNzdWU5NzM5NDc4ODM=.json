{"pageProps":{"post":{"id":"MDU6SXNzdWU5NzM5NDc4ODM=","url":"https://github.com/xiaotiandada/blog/issues/82","title":"DAPP | Ethereum contract","updatedAt":"2022-05-16T04:12:32Z","createdAt":"2021-08-18T18:32:19Z","body":"- https://github.com/aragon/use-wallet/pull/122\r\n- https://guoyu.mirror.xyz/RD-xkpoxasAU7x5MIJmiCX4gll3Cs0pAd5iM258S1Ek\r\n\r\n---\r\n\r\n<img src=\"https://user-images.githubusercontent.com/24250627/130034290-08b1242c-7cf4-48be-a942-b505f354daa7.png\" alt=\"image\" style=\"width: 600px\" />\r\n\r\n---------------------------------   ---------------------------------\r\n\r\n> 比较偏前端  Demo 都在 Repo 里面，想写的都在这里了 不想写的都在代码里面了\r\n\r\n- [Repo](https://github.com/xiaotiandada/chain-temp)\r\n- [Demo](https://chain-temp.vercel.app/)\r\n\r\n### 前端\r\n\r\n#### 调用合约\r\n\r\n1. 写 Hooks 方法\r\n\r\n```tsx\r\nimport { useCallback, useMemo } from 'react';\r\nimport { BigNumber, ethers, utils } from 'ethers';\r\n\r\nimport { currentProvider } from 'https://data-seed-prebsc-2-s2.binance.org:8545 BSC Provider';\r\nimport { useSigner } from '看下面的 useSigner Hooks';\r\nimport { TokenFactory__factory } from '合约 Compile 出来的 Typechain 文件'\r\n\r\nexport function useTokenFactory() {\r\n  const { signer, isSignerReady } = useSigner();\r\n  console.log('currentContracts', currentContracts)\r\n\r\n  const token = useMemo(() => {\r\n    const readonlyProvider = currentProvider as ethers.providers.Provider;\r\n    if (isSignerReady(signer)) {\r\n      return TokenFactory__factory.connect(合约地址, signer)\r\n    } else {\r\n      return TokenFactory__factory.connect(合约地址, readonlyProvider)\r\n    }\r\n  }, [ signer, isSignerReady ])\r\n\r\n  /**\r\n   * 发布 Token\r\n   */\r\n  const mint = useCallback(\r\n    async (\r\n      name: string,\r\n      symbol: string,\r\n      initialBalance: string\r\n    ): Promise<ethers.ContractTransaction> => {\r\n    const mintToken = await token.mint(name, symbol, BigNumber.from(utils.parseUnits(initialBalance, 18)))\r\n    console.log('mintToken', mintToken)\r\n    console.log('mintToken hash', mintToken.hash)\r\n    mintToken.wait()\r\n    return mintToken\r\n  }, [ token ])\r\n\r\n  /**\r\n   * 发布过的 Token\r\n   */\r\n  const list = useCallback(\r\n    async (): Promise<string[]>  => {\r\n      const listResult = await token.list()\r\n      console.log('listResult', listResult)\r\n      return listResult\r\n  }, [ token ])\r\n\r\n  return {\r\n    mint, list\r\n  }\r\n}\r\n```\r\n\r\n2. 页面调用\r\n\r\n```tsx\r\n  const { mint, list } = useTokenFactory()\r\n  \r\n  // list\r\n  async () => {\r\n    await list()\r\n  }\r\n  \r\n  // mint\r\n  await mint(name, symbol, initialBalance)\r\n```\r\n\r\n\r\n\r\n#### 批量查询\r\n\r\n```tsx\r\n// Multicall 具体可以看 Repo 里面的方法\r\n\r\nimport { ethers } from 'ethers';\r\nimport { Multicall__factory } from 'Multicall Contract';\r\nimport { currentMulticallAddress } from 'Multicall Address';\r\nimport { currentProvider } from '参考上面的 providers';\r\n\r\n// static multicall\r\nexport const staticMulticall = Multicall__factory.connect(\r\n  currentMulticallAddress,\r\n  currentProvider as ethers.providers.Provider\r\n);\r\n```\r\n\r\n```tsx\r\nimport { BigNumber, ethers, utils } from 'ethers';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\n\r\nimport { _abi } from '合约导出的 ABI'\r\nimport { staticMulticall } from './useMulticall';\r\nimport { chunk } from 'lodash';\r\n\r\ninterface ERC20MulticallResult {\r\n  address: string,\r\n  data: {\r\n    [key: string]: string | number | ethers.BigNumber,\r\n    name: string,\r\n    symbol: string,\r\n    decimals: number,\r\n    totalSupply: ethers.BigNumber,\r\n    balanceOf: ethers.BigNumber\r\n  }\r\n}\r\n\r\nconst ERC20Interface = new utils.Interface(_abi)\r\n// console.log('ERC20Interface', ERC20Interface)\r\n\r\n/**\r\n * ERC20 Multicall\r\n * @param address\r\n * @returns\r\n */\r\nexport function useERC20Multicall(address: string[]) {\r\n  const { account } = useWallet();\r\n  const [tokenData, setTokenData] = useState<ERC20MulticallResult[]>([])\r\n\r\n  // fetch data\r\n  const fetchAllAddress = useCallback(\r\n    async () => {\r\n      if (!address.length) {\r\n        return\r\n      }\r\n\r\n      // 校验地址\r\n      const checksAddress = address.map(i => utils.getAddress(i))\r\n\r\n      if (!checksAddress.length) {\r\n        return\r\n      }\r\n\r\n      let keys = [ 'name', 'symbol', 'decimals', 'totalSupply', 'balanceOf' ]\r\n      const len = account ? 5 : 4\r\n\r\n      // calls\r\n      const calls :{ target: string,callData: string  }[] = []\r\n      for (let i = 0; i < checksAddress.length; i++) {\r\n        const ele = checksAddress[i];\r\n        for (let j = 0; j < len; j++) {\r\n          calls.push({\r\n            target: ele,\r\n            callData: ERC20Interface.encodeFunctionData(keys[j], (keys[j] === 'balanceOf' && account) ? [account] : [])\r\n          })\r\n        }\r\n      }\r\n\r\n      // aggregate\r\n      const { returnData } = await staticMulticall.callStatic.aggregate(calls)\r\n\r\n      // merged\r\n      const chunkReturnData = chunk(returnData, len)\r\n      console.log('chunkReturnData', chunkReturnData)\r\n\r\n      let result: ERC20MulticallResult[] = []\r\n      for (let i = 0; i < chunkReturnData.length; i++) {\r\n        const ele = chunkReturnData[i];\r\n        result[i] = {\r\n          address: checksAddress[i],\r\n          data: {\r\n            name: '',\r\n            symbol: '',\r\n            decimals: 18,\r\n            totalSupply: BigNumber.from(0),\r\n            balanceOf: BigNumber.from(0),\r\n          }\r\n        }\r\n        for (let j = 0; j < ele.length; j++) {\r\n          const eleJ = ele[j];\r\n          const [ res ] = ERC20Interface.decodeFunctionResult(keys[j], eleJ)\r\n          result[i].data[keys[j]] = res\r\n        }\r\n      }\r\n\r\n      console.log('result', result)\r\n      setTokenData(result)\r\n\r\n      return result\r\n  }, [ address, account ])\r\n\r\n  useEffect(() => {\r\n    console.log('address', address)\r\n    fetchAllAddress()\r\n  }, [ address, fetchAllAddress ])\r\n\r\n  return { tokenData };\r\n}\r\n```\r\n\r\n聚合查询：讲解（同样也很感谢好同事写的方法）\r\n\r\n```ts\r\n// calls 格式, 可以根据自己的需求封装方法\r\nconst calls = [\r\n  {\r\n    target: address,\r\n    callData: ERC20Interface.encodeFunctionData('key', [])\r\n  }\r\n]\r\n\r\n// aggregate 聚合去查询\r\nconst { returnData } = await staticMulticall.callStatic.aggregate(calls)\r\n\r\n// 解码数据\r\nconst [ res ] = ERC20Interface.decodeFunctionResult('key', returnData[index])\r\n```\r\n\r\n\r\n\r\n#### 批量查询余额\r\n\r\n和上面的聚合查询差不多的，批量处理 Calls 方法然后调用。(查询余额 记得带 Account)\r\n\r\n```ts\r\nInterface.encodeFunctionData('balanceOf', [account])\r\n```\r\n\r\n\r\n\r\n#### 签名\r\n\r\n```tsx\r\n// 感谢俺的同事写的 Hooks 复制过来的\r\n\r\nimport { ethers } from 'ethers';\r\nimport { useMemo } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\n\r\n/**\r\n * 签名\r\n * @param addressOrIndex\r\n * @returns\r\n */\r\nexport function useSigner(addressOrIndex?: string | number) {\r\n  const wallet = useWallet();\r\n\r\n  const signer = useMemo(() => {\r\n    if (!wallet.ethereum) return null;\r\n    const provider = new ethers.providers.Web3Provider(wallet.ethereum as ReturnType<typeof wallet.ethereum>);\r\n    return provider.getSigner(addressOrIndex);\r\n  }, [wallet, addressOrIndex]);\r\n\r\n  function isSignerReady(\r\n    signer: ethers.providers.JsonRpcSigner | null\r\n  ): signer is ethers.providers.JsonRpcSigner {\r\n    return Boolean(signer);\r\n  }\r\n\r\n  return { signer, isSignerReady };\r\n}\r\n```\r\n\r\n\r\n\r\n#### Token 选择\r\n\r\n<img src=\"https://user-images.githubusercontent.com/24250627/130107940-5e502cfb-592b-4f86-83f1-47dd16f149c3.png\" alt=\"image\" style=\"width: 300px\" />\r\n\r\n\r\n\r\n- Hooks https://github.com/xiaotiandada/chain-temp/blob/master/src/hooks/useTokenList.ts\r\n\r\n- Views https://github.com/xiaotiandada/chain-temp/blob/master/src/components/TokenListSelect/index.tsx\r\n\r\n- 这块比较简单，Token 余额查询使用批量查询即可，搜索可以 **本地+单独调用合约**。\r\n\r\n  \r\n\r\n### 合约\r\n\r\n1. https://hardhat.org/getting-started/ 按照文垱一把梭哈（可以部署到测试网 Rinkey 等）\r\n2. Typescript 支持 https://hardhat.org/guides/typescript.html\r\n3. 导出 Type 方便前端使用 https://github.com/ethereum-ts/TypeChain/tree/master/packages/hardhat\r\n4. 如果想部署到 BSC 测试网 https://docs.binance.org/smart-chain/developer/deploy/hardhat.html\r\n\r\n写了一个简单的 Demo Contract （或者使用官方例子）\r\n\r\n```javascript\r\npragma solidity ^0.8.0;\r\n\r\nimport \"hardhat/console.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n// ERC20 Token\r\ncontract Token is ERC20 {\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialBalance\r\n    ) public ERC20(name, symbol) {\r\n        _mint(msg.sender, initialBalance);\r\n    }\r\n}\r\n\r\n// Create ERC20 Token\r\ncontract TokenFactory {\r\n    constructor() {}\r\n\r\n    address[] public contracts;\r\n\r\n    // mint\r\n    function mint(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialBalance\r\n    ) public {\r\n        console.log(\"Create ERC20\");\r\n        address contractAddress = address(\r\n            new Token(name, symbol, initialBalance)\r\n        );\r\n        console.log(\"contractAddress '%s'\", contractAddress);\r\n        contracts.push(contractAddress);\r\n    }\r\n\r\n    function list() public view returns (address[] memory) {\r\n        return contracts;\r\n    }\r\n}\r\n```\r\n\r\n**总结** 两个方法 Address：0x008c5c5cb4196719cbb61050d41BeEdAF01c5726\r\n\r\n- Mint ERC20 Token 然后保存合约地址 （mint）\r\n- 查询 Mint 过的合约地址（list）\r\n\r\nCompile 之后会生成 typechain 文件方便前端用，也可以自己用第三方工具快速生成 DAPP 方法调用，传入 Contract Address 和ABI就好了\r\n\r\n\r\n\r\n---\r\n\r\n# Ethereum\r\n\r\nEthereum study notes\r\n\r\n\r\n学习资料\r\n- https://ethereum.org/\r\n- https://solidity.readthedocs.io/en/v0.6.6/introduction-to-smart-contracts.html\r\n- https://www.qikegu.com/docs/4733\r\n- https://www.trufflesuite.com/tutorials/pet-shop\r\n-\r\n- https://docs.openzeppelin.com/learn/developing-smart-contracts\r\n\r\n\r\n**cryptozombies** 这个教程写的挺好的!!!\r\n- https://cryptozombies.io/\r\n- https://github.com/loomnetwork/cryptozombies-lesson-code\r\n\r\n简易的拍卖 rinkeby 测试网\r\n- https://xiaotiandada.github.io/ethereum/auction/client/\r\n\r\n\r\n## 总结(一)\r\n\r\n### 配置本地的开发环境以及遇到的坑\r\n\r\n首先看看这里 https://ethereum.org/\r\n\r\n然后开发可以参照这篇文章进行学习和实战 https://www.qikegu.com/docs/4733\r\n\r\n在``truffle init``的时候遇到一个connect x.x.x.x:443的错误\r\n\r\n官方给出来的答复是 GFW ``It's all GFW's fault, when i crossed GFW, everything work.`` [issues/2995](https://github.com/trufflesuite/truffle/issues/2995)\r\n\r\n我目前的解决方案是直接clone [repo](https://github.com/truffle-box/bare-box)然后一些基本的目录都有了,然后在继续参考教程跑流程\r\n\r\n## 总结(二)\r\n\r\n### 本地部署多个项目的合约无法成功\r\n\r\n本地执行 ``truffle compile`` 显示是成功的\r\n\r\n执行 ``truffle migrate`` 显示是最新的\r\n\r\n但是实际在 ``truffle console`` || ``truffle test`` 里面调用时错误的\r\n\r\n解决方案是 ``truffle migrate --reset`` 增加 ``--reset`` !!!\r\n\r\n看到一篇文章有写到这个问题 https://www.jianshu.com/p/42479ede6730 \r\n\r\n> 这个命令会执行所有migrations目录下的js文件。如果之前执行过truffle migrate命令，再次执行，只会部署新的js文件，如果没有新的js文件，不会起任何作用。如果使用--reset参数，则会重新的执行所有脚本的部署。truffle migrate --reset。\r\n\r\n## 总结(二)\r\n\r\n### 简单的计数器合约\r\n\r\n### 初始化项目\r\n\r\n因为本地``truffle init``有问题, 所以我这里采取``clone``的方式init, 具体步骤参考上文\r\n\r\n```bash\r\ngit clone xxxxxx\r\n```\r\n\r\n然后替换名字\r\n\r\n```bash\r\nmv xxx counter\r\n```\r\n\r\n然后喜欢性的npm\r\n\r\n```bash\r\nnpm init\r\n```\r\n\r\n\r\n\r\n### 新建计数器合约\r\n\r\n在``contracts``目录新建\r\n\r\n```bash\r\ntouch Counter.sol\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n// 声明\r\ncontract Counter {\r\n  // 声明计数器变量\r\n  uint256 counter;\r\n\r\n  // 部署时调用 初始化\r\n  constructor() public {\r\n    counter = 0;\r\n  }\r\n\r\n  // 增加方法\r\n  function increase() public {\r\n    counter += 1;\r\n  }\r\n\r\n  // 返回counter uint256是类型\r\n  function get() public view returns(uint256) {\r\n    return counter;\r\n  }\r\n\r\n}\r\n```\r\n\r\n### 编译、部署、测试合约\r\n\r\n部署的时候需要在``migrations``目录新建``2_deploy_contracts.js``前面需要加上序号\r\n\r\n执行需要 具体文档有写 https://www.qikegu.com/docs/4798\r\n\r\n```bash\r\ntruffle compile\r\n\r\ntruffle migrate\r\n\r\ntruffle test\r\n```\r\n\r\n部署过程基本都大同小异(略过 不重复写了), 可以参考上文的资料进行部署\r\n\r\n---\r\n\r\n⬆️  &nbsp;&nbsp;已落后\r\n\r\n---\r\n\r\n使用 (Hardhat)(https://hardhat.org/guides/create-task.html)\r\n","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<ul>\n<li><a href=\"https://github.com/aragon/use-wallet/pull/122\">https://github.com/aragon/use-wallet/pull/122</a></li>\n<li><a href=\"https://guoyu.mirror.xyz/RD-xkpoxasAU7x5MIJmiCX4gll3Cs0pAd5iM258S1Ek\">https://guoyu.mirror.xyz/RD-xkpoxasAU7x5MIJmiCX4gll3Cs0pAd5iM258S1Ek</a></li>\n</ul>\n<hr>\n<img src=\"https://user-images.githubusercontent.com/24250627/130034290-08b1242c-7cf4-48be-a942-b505f354daa7.png\" alt=\"image\" style=\"width: 600px\" />\n\n<hr>\n<blockquote>\n<p>比较偏前端  Demo 都在 Repo 里面，想写的都在这里了 不想写的都在代码里面了</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/xiaotiandada/chain-temp\">Repo</a></li>\n<li><a href=\"https://chain-temp.vercel.app/\">Demo</a></li>\n</ul>\n<h3 id=\"前端\">前端</h3>\n<h4 id=\"调用合约\">调用合约</h4>\n<ol>\n<li>写 Hooks 方法</li>\n</ol>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">import { useCallback, useMemo } from 'react';\nimport { BigNumber, ethers, utils } from 'ethers';\n\nimport { currentProvider } from 'https://data-seed-prebsc-2-s2.binance.org:8545 BSC Provider';\nimport { useSigner } from '看下面的 useSigner Hooks';\nimport { TokenFactory__factory } from '合约 Compile 出来的 Typechain 文件'\n\nexport function useTokenFactory() {\n  const { signer, isSignerReady } = useSigner();\n  console.log('currentContracts', currentContracts)\n\n  const token = useMemo(() => {\n    const readonlyProvider = currentProvider as ethers.providers.Provider;\n    if (isSignerReady(signer)) {\n      return TokenFactory__factory.connect(合约地址, signer)\n    } else {\n      return TokenFactory__factory.connect(合约地址, readonlyProvider)\n    }\n  }, [ signer, isSignerReady ])\n\n  /**\n   * 发布 Token\n   */\n  const mint = useCallback(\n    async (\n      name: string,\n      symbol: string,\n      initialBalance: string\n    ): Promise<ethers.ContractTransaction> => {\n    const mintToken = await token.mint(name, symbol, BigNumber.from(utils.parseUnits(initialBalance, 18)))\n    console.log('mintToken', mintToken)\n    console.log('mintToken hash', mintToken.hash)\n    mintToken.wait()\n    return mintToken\n  }, [ token ])\n\n  /**\n   * 发布过的 Token\n   */\n  const list = useCallback(\n    async (): Promise<string[]>  => {\n      const listResult = await token.list()\n      console.log('listResult', listResult)\n      return listResult\n  }, [ token ])\n\n  return {\n    mint, list\n  }\n}</code></pre><ol start=\"2\">\n<li>页面调用</li>\n</ol>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">  const { mint, list } = useTokenFactory()\n  \n  // list\n  async () => {\n    await list()\n  }\n  \n  // mint\n  await mint(name, symbol, initialBalance)</code></pre><h4 id=\"批量查询\">批量查询</h4>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">// Multicall 具体可以看 Repo 里面的方法\n\nimport { ethers } from 'ethers';\nimport { Multicall__factory } from 'Multicall Contract';\nimport { currentMulticallAddress } from 'Multicall Address';\nimport { currentProvider } from '参考上面的 providers';\n\n// static multicall\nexport const staticMulticall = Multicall__factory.connect(\n  currentMulticallAddress,\n  currentProvider as ethers.providers.Provider\n);</code></pre><pre class=\"language-tsx\"><code class=\"language-tsx\">import { BigNumber, ethers, utils } from 'ethers';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\n\nimport { _abi } from '合约导出的 ABI'\nimport { staticMulticall } from './useMulticall';\nimport { chunk } from 'lodash';\n\ninterface ERC20MulticallResult {\n  address: string,\n  data: {\n    [key: string]: string | number | ethers.BigNumber,\n    name: string,\n    symbol: string,\n    decimals: number,\n    totalSupply: ethers.BigNumber,\n    balanceOf: ethers.BigNumber\n  }\n}\n\nconst ERC20Interface = new utils.Interface(_abi)\n// console.log('ERC20Interface', ERC20Interface)\n\n/**\n * ERC20 Multicall\n * @param address\n * @returns\n */\nexport function useERC20Multicall(address: string[]) {\n  const { account } = useWallet();\n  const [tokenData, setTokenData] = useState<ERC20MulticallResult[]>([])\n\n  // fetch data\n  const fetchAllAddress = useCallback(\n    async () => {\n      if (!address.length) {\n        return\n      }\n\n      // 校验地址\n      const checksAddress = address.map(i => utils.getAddress(i))\n\n      if (!checksAddress.length) {\n        return\n      }\n\n      let keys = [ 'name', 'symbol', 'decimals', 'totalSupply', 'balanceOf' ]\n      const len = account ? 5 : 4\n\n      // calls\n      const calls :{ target: string,callData: string  }[] = []\n      for (let i = 0; i < checksAddress.length; i++) {\n        const ele = checksAddress[i];\n        for (let j = 0; j < len; j++) {\n          calls.push({\n            target: ele,\n            callData: ERC20Interface.encodeFunctionData(keys[j], (keys[j] === 'balanceOf' && account) ? [account] : [])\n          })\n        }\n      }\n\n      // aggregate\n      const { returnData } = await staticMulticall.callStatic.aggregate(calls)\n\n      // merged\n      const chunkReturnData = chunk(returnData, len)\n      console.log('chunkReturnData', chunkReturnData)\n\n      let result: ERC20MulticallResult[] = []\n      for (let i = 0; i < chunkReturnData.length; i++) {\n        const ele = chunkReturnData[i];\n        result[i] = {\n          address: checksAddress[i],\n          data: {\n            name: '',\n            symbol: '',\n            decimals: 18,\n            totalSupply: BigNumber.from(0),\n            balanceOf: BigNumber.from(0),\n          }\n        }\n        for (let j = 0; j < ele.length; j++) {\n          const eleJ = ele[j];\n          const [ res ] = ERC20Interface.decodeFunctionResult(keys[j], eleJ)\n          result[i].data[keys[j]] = res\n        }\n      }\n\n      console.log('result', result)\n      setTokenData(result)\n\n      return result\n  }, [ address, account ])\n\n  useEffect(() => {\n    console.log('address', address)\n    fetchAllAddress()\n  }, [ address, fetchAllAddress ])\n\n  return { tokenData };\n}</code></pre><p>聚合查询：讲解（同样也很感谢好同事写的方法）</p>\n<pre class=\"language-ts\"><code class=\"language-ts\">// calls 格式, 可以根据自己的需求封装方法\nconst calls = [\n  {\n    target: address,\n    callData: ERC20Interface.encodeFunctionData('key', [])\n  }\n]\n\n// aggregate 聚合去查询\nconst { returnData } = await staticMulticall.callStatic.aggregate(calls)\n\n// 解码数据\nconst [ res ] = ERC20Interface.decodeFunctionResult('key', returnData[index])</code></pre><h4 id=\"批量查询余额\">批量查询余额</h4>\n<p>和上面的聚合查询差不多的，批量处理 Calls 方法然后调用。(查询余额 记得带 Account)</p>\n<pre class=\"language-ts\"><code class=\"language-ts\">Interface.encodeFunctionData('balanceOf', [account])</code></pre><h4 id=\"签名\">签名</h4>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">// 感谢俺的同事写的 Hooks 复制过来的\n\nimport { ethers } from 'ethers';\nimport { useMemo } from 'react';\nimport { useWallet } from 'use-wallet';\n\n/**\n * 签名\n * @param addressOrIndex\n * @returns\n */\nexport function useSigner(addressOrIndex?: string | number) {\n  const wallet = useWallet();\n\n  const signer = useMemo(() => {\n    if (!wallet.ethereum) return null;\n    const provider = new ethers.providers.Web3Provider(wallet.ethereum as ReturnType<typeof wallet.ethereum>);\n    return provider.getSigner(addressOrIndex);\n  }, [wallet, addressOrIndex]);\n\n  function isSignerReady(\n    signer: ethers.providers.JsonRpcSigner | null\n  ): signer is ethers.providers.JsonRpcSigner {\n    return Boolean(signer);\n  }\n\n  return { signer, isSignerReady };\n}</code></pre><h4 id=\"token-选择\">Token 选择</h4>\n<img src=\"https://user-images.githubusercontent.com/24250627/130107940-5e502cfb-592b-4f86-83f1-47dd16f149c3.png\" alt=\"image\" style=\"width: 300px\" />\n\n\n\n<ul>\n<li><p>Hooks <a href=\"https://github.com/xiaotiandada/chain-temp/blob/master/src/hooks/useTokenList.ts\">https://github.com/xiaotiandada/chain-temp/blob/master/src/hooks/useTokenList.ts</a></p>\n</li>\n<li><p>Views <a href=\"https://github.com/xiaotiandada/chain-temp/blob/master/src/components/TokenListSelect/index.tsx\">https://github.com/xiaotiandada/chain-temp/blob/master/src/components/TokenListSelect/index.tsx</a></p>\n</li>\n<li><p>这块比较简单，Token 余额查询使用批量查询即可，搜索可以 <strong>本地+单独调用合约</strong>。</p>\n</li>\n</ul>\n<h3 id=\"合约\">合约</h3>\n<ol>\n<li><a href=\"https://hardhat.org/getting-started/\">https://hardhat.org/getting-started/</a> 按照文垱一把梭哈（可以部署到测试网 Rinkey 等）</li>\n<li>Typescript 支持 <a href=\"https://hardhat.org/guides/typescript.html\">https://hardhat.org/guides/typescript.html</a></li>\n<li>导出 Type 方便前端使用 <a href=\"https://github.com/ethereum-ts/TypeChain/tree/master/packages/hardhat\">https://github.com/ethereum-ts/TypeChain/tree/master/packages/hardhat</a></li>\n<li>如果想部署到 BSC 测试网 <a href=\"https://docs.binance.org/smart-chain/developer/deploy/hardhat.html\">https://docs.binance.org/smart-chain/developer/deploy/hardhat.html</a></li>\n</ol>\n<p>写了一个简单的 Demo Contract （或者使用官方例子）</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">pragma solidity <span class=\"token operator\">^</span><span class=\"token number\">0.8</span><span class=\"token number\">.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"hardhat/console.sol\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"@openzeppelin/contracts/token/ERC20/ERC20.sol\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ERC20 Token</span>\ncontract Token is <span class=\"token constant\">ERC20</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n        string memory name<span class=\"token punctuation\">,</span>\n        string memory symbol<span class=\"token punctuation\">,</span>\n        uint256 initialBalance\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token constant\">ERC20</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> symbol</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_mint</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> initialBalance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Create ERC20 Token</span>\ncontract TokenFactory <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    address<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> contracts<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// mint</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">mint</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">string memory name<span class=\"token punctuation\">,</span>\n        string memory symbol<span class=\"token punctuation\">,</span>\n        uint256 initialBalance</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Create ERC20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        address contractAddress <span class=\"token operator\">=</span> <span class=\"token function\">address</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Token</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">,</span> initialBalance<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contractAddress '%s'\"</span><span class=\"token punctuation\">,</span> contractAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        contracts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>contractAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> view <span class=\"token function\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">address<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> contracts<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre><p><strong>总结</strong> 两个方法 Address：0x008c5c5cb4196719cbb61050d41BeEdAF01c5726</p>\n<ul>\n<li>Mint ERC20 Token 然后保存合约地址 （mint）</li>\n<li>查询 Mint 过的合约地址（list）</li>\n</ul>\n<p>Compile 之后会生成 typechain 文件方便前端用，也可以自己用第三方工具快速生成 DAPP 方法调用，传入 Contract Address 和ABI就好了</p>\n<hr>\n<h1 id=\"ethereum\">Ethereum</h1>\n<p>Ethereum study notes</p>\n<p>学习资料</p>\n<ul>\n<li><a href=\"https://ethereum.org/\">https://ethereum.org/</a></li>\n<li><a href=\"https://solidity.readthedocs.io/en/v0.6.6/introduction-to-smart-contracts.html\">https://solidity.readthedocs.io/en/v0.6.6/introduction-to-smart-contracts.html</a></li>\n<li><a href=\"https://www.qikegu.com/docs/4733\">https://www.qikegu.com/docs/4733</a></li>\n<li><a href=\"https://www.trufflesuite.com/tutorials/pet-shop\">https://www.trufflesuite.com/tutorials/pet-shop</a></li>\n<li></li>\n<li><a href=\"https://docs.openzeppelin.com/learn/developing-smart-contracts\">https://docs.openzeppelin.com/learn/developing-smart-contracts</a></li>\n</ul>\n<p><strong>cryptozombies</strong> 这个教程写的挺好的!!!</p>\n<ul>\n<li><a href=\"https://cryptozombies.io/\">https://cryptozombies.io/</a></li>\n<li><a href=\"https://github.com/loomnetwork/cryptozombies-lesson-code\">https://github.com/loomnetwork/cryptozombies-lesson-code</a></li>\n</ul>\n<p>简易的拍卖 rinkeby 测试网</p>\n<ul>\n<li><a href=\"https://xiaotiandada.github.io/ethereum/auction/client/\">https://xiaotiandada.github.io/ethereum/auction/client/</a></li>\n</ul>\n<h2 id=\"总结一\">总结(一)</h2>\n<h3 id=\"配置本地的开发环境以及遇到的坑\">配置本地的开发环境以及遇到的坑</h3>\n<p>首先看看这里 <a href=\"https://ethereum.org/\">https://ethereum.org/</a></p>\n<p>然后开发可以参照这篇文章进行学习和实战 <a href=\"https://www.qikegu.com/docs/4733\">https://www.qikegu.com/docs/4733</a></p>\n<p>在<code>truffle init</code>的时候遇到一个connect x.x.x.x:443的错误</p>\n<p>官方给出来的答复是 GFW <code>It&#39;s all GFW&#39;s fault, when i crossed GFW, everything work.</code> <a href=\"https://github.com/trufflesuite/truffle/issues/2995\">issues/2995</a></p>\n<p>我目前的解决方案是直接clone <a href=\"https://github.com/truffle-box/bare-box\">repo</a>然后一些基本的目录都有了,然后在继续参考教程跑流程</p>\n<h2 id=\"总结二\">总结(二)</h2>\n<h3 id=\"本地部署多个项目的合约无法成功\">本地部署多个项目的合约无法成功</h3>\n<p>本地执行 <code>truffle compile</code> 显示是成功的</p>\n<p>执行 <code>truffle migrate</code> 显示是最新的</p>\n<p>但是实际在 <code>truffle console</code> || <code>truffle test</code> 里面调用时错误的</p>\n<p>解决方案是 <code>truffle migrate --reset</code> 增加 <code>--reset</code> !!!</p>\n<p>看到一篇文章有写到这个问题 <a href=\"https://www.jianshu.com/p/42479ede6730\">https://www.jianshu.com/p/42479ede6730</a> </p>\n<blockquote>\n<p>这个命令会执行所有migrations目录下的js文件。如果之前执行过truffle migrate命令，再次执行，只会部署新的js文件，如果没有新的js文件，不会起任何作用。如果使用--reset参数，则会重新的执行所有脚本的部署。truffle migrate --reset。</p>\n</blockquote>\n<h2 id=\"总结二-1\">总结(二)</h2>\n<h3 id=\"简单的计数器合约\">简单的计数器合约</h3>\n<h3 id=\"初始化项目\">初始化项目</h3>\n<p>因为本地<code>truffle init</code>有问题, 所以我这里采取<code>clone</code>的方式init, 具体步骤参考上文</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">git clone xxxxxx</code></pre><p>然后替换名字</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">mv xxx counter</code></pre><p>然后喜欢性的npm</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npm init</code></pre><h3 id=\"新建计数器合约\">新建计数器合约</h3>\n<p>在<code>contracts</code>目录新建</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">touch Counter.sol\npragma solidity >=0.4.21 <0.7.0;\n\n// 声明\ncontract Counter {\n  // 声明计数器变量\n  uint256 counter;\n\n  // 部署时调用 初始化\n  constructor() public {\n    counter = 0;\n  }\n\n  // 增加方法\n  function increase() public {\n    counter += 1;\n  }\n\n  // 返回counter uint256是类型\n  function get() public view returns(uint256) {\n    return counter;\n  }\n\n}</code></pre><h3 id=\"编译、部署、测试合约\">编译、部署、测试合约</h3>\n<p>部署的时候需要在<code>migrations</code>目录新建<code>2_deploy_contracts.js</code>前面需要加上序号</p>\n<p>执行需要 具体文档有写 <a href=\"https://www.qikegu.com/docs/4798\">https://www.qikegu.com/docs/4798</a></p>\n<pre class=\"language-bash\"><code class=\"language-bash\">truffle compile\n\ntruffle migrate\n\ntruffle test</code></pre><p>部署过程基本都大同小异(略过 不重复写了), 可以参考上文的资料进行部署</p>\n<hr>\n<p>⬆️  &nbsp;&nbsp;已落后</p>\n<hr>\n<p>使用 (Hardhat)(<a href=\"https://hardhat.org/guides/create-task.html\">https://hardhat.org/guides/create-task.html</a>)</p>\n","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}