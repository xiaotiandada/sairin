{"pageProps":{"post":{"id":"MDU6SXNzdWU4NTI1MTAzOTk=","url":"https://github.com/xiaotiandada/blog/issues/74","title":"140 行写一个自动生成 Issues 为 Markdown 文垱","updatedAt":"2022-06-07T04:32:11Z","createdAt":"2021-04-07T15:09:12Z","body":"[Repo Issues](https://github.com/xiaotiandada/issues)\r\n\r\n- [the-githubtoken-in-github-actions-how-it-works-change-permissions-customizations-3cgp](https://dev.to/github/the-githubtoken-in-github-actions-how-it-works-change-permissions-customizations-3cgp) 使用`secrets.GITHUB_TOKEN`\r\n\r\n\r\n1. 生成个人 [Token](https://github.com/settings/tokens)\r\n\r\n   ```javascript\r\n   const octokit = new Octokit({\r\n     auth: process.env.TOKEN\r\n   });\r\n   \r\n   // TOKEN=xxx node ./app/index.js\r\n   ```\r\n\r\n2. 获取 Repo 数据 主要获取 Name、Issues count 信息，然后获取 Issues 信息\r\n\r\n   ```javascript\r\n   // 分页处理\r\n   let count = (respo as any).open_issues_count\r\n   let per_page = 100 // default 30 max 100\r\n   let len = Math.floor(count / per_page) + 1\r\n   ```\r\n\r\n3. 生成 Markdown\r\n\r\n4. Push 内容为 Readme.md\r\n\r\n   ```javascript\r\n   // push 内容需要 base64\r\n   const contentsBase64 = new Buffer(contents).toString('base64');\r\n   ```\r\n\r\n![image](https://user-images.githubusercontent.com/24250627/120079607-40149080-c0e7-11eb-8e6a-2db97cf4dae4.png)\r\n\r\n5. 使用 GitHub Action 定时更新\r\n\r\n\r\n```typescript\r\nimport { Octokit } from '@octokit/rest';\r\nimport { RestEndpointMethodTypes } from \"@octokit/plugin-rest-endpoint-methods/dist-types/generated/parameters-and-response-types\";\r\n\r\ntype listForRepoType = RestEndpointMethodTypes[\"issues\"][\"listForRepo\"][\"parameters\"]\r\n\r\n// https://docs.github.com/en/rest/reference/issues#list-repository-issues\r\n// https://octokit.github.io/rest.js/v18\r\n\r\nconst octokit = new Octokit({\r\n  auth: process.env.TOKEN\r\n});\r\nconst owner = 'xiaotiandada'\r\nconst repo = 'blog'\r\nconst path = 'README.md'\r\n\r\n/**\r\n * push markdown\r\n * @param contents 文垱内容\r\n * @returns\r\n */\r\nconst push = async (contents: string) => {\r\n  try {\r\n    const { status, data } = await octokit.repos.getContent({\r\n      owner,\r\n      repo,\r\n      path,\r\n    });\r\n    // console.log(data)\r\n\r\n    if (status !== 200) {\r\n      console.log('fail', status)\r\n      return\r\n    }\r\n\r\n    const contentsBase64 = new Buffer(contents).toString('base64');\r\n    const { status: pushStatus, data: pushData } = await octokit.repos.createOrUpdateFileContents({\r\n      owner,\r\n      repo,\r\n      path,\r\n      message: `Update ${Date.now()}`,\r\n      content: contentsBase64,\r\n      sha: data.sha,\r\n    });\r\n    if (pushStatus === 200) {\r\n    // console.log(pushData)\r\n      console.log(`push success, url: ${pushData.content.html_url}`)\r\n    } else {\r\n      console.log('fail', pushStatus)\r\n    }\r\n  } catch (e) {\r\n    console.log('push', e.toString())\r\n  }\r\n}\r\n/**\r\n * process markdown\r\n * @param data issues list\r\n */\r\nconst processMd = ({data, name, description}: { data: Array<listForRepoType>, name: string, description: string }) => {\r\n  let md =\r\n`<div align=\"center\">\r\n<h1>${name}</h1>\r\n<p>${description}</p>\r\n</div>\\n\\n`\r\n\r\n  data.map((i) => {\r\n    let label = ''\r\n    let labels: any = i.labels\r\n    for (let i = 0; i < labels.length; i++) {\r\n      const ele: { name: string } = labels[i];\r\n      label += ` ${ele.name} `\r\n    }\r\n    // [xxx](xxx) [ xx ]\r\n    md += `[#${i.number} ${i.title}](${i.html_url}) ${ label ? '[' + label + ']' : '' }\\n\\n`\r\n  })\r\n\r\n  // console.log('md', md)\r\n  push(md)\r\n}\r\n/**\r\n * get repo\r\n */\r\nconst getRepo = async () => {\r\n  try {\r\n    const { status, data } = await octokit.rest.repos.get({\r\n      owner,\r\n      repo,\r\n    });\r\n    if (status === 200) {\r\n      // console.log('data', data)\r\n      return data\r\n    } else {\r\n      console.log('fail', status)\r\n      return false\r\n    }\r\n  } catch (e) {\r\n    console.log('getRepo', e.toString())\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * fetch issues\r\n */\r\nconst fetch = async () => {\r\n  try {\r\n\r\n    const respo = await getRepo()\r\n    let count = (respo as any).open_issues_count\r\n    let per_page = 100 // default 30 max 100\r\n    let len = Math.floor(count / per_page) + 1\r\n\r\n    let list: listForRepoType[] = []\r\n    for (let i = 1; i <= len; i++) {\r\n      const { status, data } = await octokit.rest.issues.listForRepo({\r\n        owner,\r\n        repo,\r\n        page: i,\r\n        per_page: per_page\r\n      });\r\n      if (status === 200) {\r\n        // console.log('data', data)\r\n        list.push(...(data as any))\r\n      } else {\r\n        console.log('fail', status)\r\n      }\r\n    }\r\n\r\n    processMd({\r\n      data: list,\r\n      name: (respo as any).name,\r\n      description: (respo as any).description,\r\n    })\r\n  } catch (e) {\r\n    console.log('fetch', e.toString())\r\n  }\r\n}\r\n\r\nfetch()\r\n```","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<p><a href=\"https://github.com/xiaotiandada/issues\">Repo Issues</a></p>\n<ul>\n<li><a href=\"https://dev.to/github/the-githubtoken-in-github-actions-how-it-works-change-permissions-customizations-3cgp\">the-githubtoken-in-github-actions-how-it-works-change-permissions-customizations-3cgp</a> 使用<code>secrets.GITHUB_TOKEN</code></li>\n</ul>\n<ol>\n<li><p>生成个人 <a href=\"https://github.com/settings/tokens\">Token</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> octokit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Octokit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">auth</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">TOKEN</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// TOKEN=xxx node ./app/index.js</span></code></pre></li>\n<li><p>获取 Repo 数据 主要获取 Name、Issues count 信息，然后获取 Issues 信息</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 分页处理</span>\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>respo <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>open_issues_count\n<span class=\"token keyword\">let</span> per_page <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">// default 30 max 100</span>\n<span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">/</span> per_page<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></li>\n<li><p>生成 Markdown</p>\n</li>\n<li><p>Push 内容为 Readme.md</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// push 内容需要 base64</span>\n<span class=\"token keyword\">const</span> contentsBase64 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/24250627/120079607-40149080-c0e7-11eb-8e6a-2db97cf4dae4.png\" alt=\"image\"></p>\n<ol start=\"5\">\n<li>使用 GitHub Action 定时更新</li>\n</ol>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">import { Octokit } from '@octokit/rest';\nimport { RestEndpointMethodTypes } from \"@octokit/plugin-rest-endpoint-methods/dist-types/generated/parameters-and-response-types\";\n\ntype listForRepoType = RestEndpointMethodTypes[\"issues\"][\"listForRepo\"][\"parameters\"]\n\n// https://docs.github.com/en/rest/reference/issues#list-repository-issues\n// https://octokit.github.io/rest.js/v18\n\nconst octokit = new Octokit({\n  auth: process.env.TOKEN\n});\nconst owner = 'xiaotiandada'\nconst repo = 'blog'\nconst path = 'README.md'\n\n/**\n * push markdown\n * @param contents 文垱内容\n * @returns\n */\nconst push = async (contents: string) => {\n  try {\n    const { status, data } = await octokit.repos.getContent({\n      owner,\n      repo,\n      path,\n    });\n    // console.log(data)\n\n    if (status !== 200) {\n      console.log('fail', status)\n      return\n    }\n\n    const contentsBase64 = new Buffer(contents).toString('base64');\n    const { status: pushStatus, data: pushData } = await octokit.repos.createOrUpdateFileContents({\n      owner,\n      repo,\n      path,\n      message: `Update ${Date.now()}`,\n      content: contentsBase64,\n      sha: data.sha,\n    });\n    if (pushStatus === 200) {\n    // console.log(pushData)\n      console.log(`push success, url: ${pushData.content.html_url}`)\n    } else {\n      console.log('fail', pushStatus)\n    }\n  } catch (e) {\n    console.log('push', e.toString())\n  }\n}\n/**\n * process markdown\n * @param data issues list\n */\nconst processMd = ({data, name, description}: { data: Array<listForRepoType>, name: string, description: string }) => {\n  let md =\n`<div align=\"center\">\n<h1>${name}</h1>\n<p>${description}</p>\n</div>\\n\\n`\n\n  data.map((i) => {\n    let label = ''\n    let labels: any = i.labels\n    for (let i = 0; i < labels.length; i++) {\n      const ele: { name: string } = labels[i];\n      label += ` ${ele.name} `\n    }\n    // [xxx](xxx) [ xx ]\n    md += `[#${i.number} ${i.title}](${i.html_url}) ${ label ? '[' + label + ']' : '' }\\n\\n`\n  })\n\n  // console.log('md', md)\n  push(md)\n}\n/**\n * get repo\n */\nconst getRepo = async () => {\n  try {\n    const { status, data } = await octokit.rest.repos.get({\n      owner,\n      repo,\n    });\n    if (status === 200) {\n      // console.log('data', data)\n      return data\n    } else {\n      console.log('fail', status)\n      return false\n    }\n  } catch (e) {\n    console.log('getRepo', e.toString())\n    return false\n  }\n}\n\n/**\n * fetch issues\n */\nconst fetch = async () => {\n  try {\n\n    const respo = await getRepo()\n    let count = (respo as any).open_issues_count\n    let per_page = 100 // default 30 max 100\n    let len = Math.floor(count / per_page) + 1\n\n    let list: listForRepoType[] = []\n    for (let i = 1; i <= len; i++) {\n      const { status, data } = await octokit.rest.issues.listForRepo({\n        owner,\n        repo,\n        page: i,\n        per_page: per_page\n      });\n      if (status === 200) {\n        // console.log('data', data)\n        list.push(...(data as any))\n      } else {\n        console.log('fail', status)\n      }\n    }\n\n    processMd({\n      data: list,\n      name: (respo as any).name,\n      description: (respo as any).description,\n    })\n  } catch (e) {\n    console.log('fetch', e.toString())\n  }\n}\n\nfetch()</code></pre>","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}