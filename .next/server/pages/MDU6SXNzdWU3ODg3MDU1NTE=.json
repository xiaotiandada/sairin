{"pageProps":{"post":{"id":"MDU6SXNzdWU3ODg3MDU1NTE=","url":"https://github.com/xiaotiandada/blog/issues/2","title":"模仿san的hover动画","updatedAt":"2021-01-19T04:54:17Z","createdAt":"2021-01-19T04:54:17Z","body":"2018-05-19 01:10:14\r\n\r\n在百度前端技术学院学习 设计师学院 绿(大佬)的课程 (第一课QAQ) [传送门](http://ife.baidu.com/course/detail/id/18)\r\n\r\n然后模仿san官网的动画效果 [san](https://baidu.github.io/san/)\r\n\r\n这是我模仿的效果 [传送们](https://xiaotiandada.github.io/Case/Anime/sanDemo/app/) pc端食用更佳！\r\n\r\n大佬的实现已经很棒了 个人只让部分动画变得平滑 比如说鼠标移出的时候增加了\r\n\r\n<!-- more -->\r\n\r\n```bash\r\ntransition: transform .3s;\r\n```\r\n\r\n这样可以让鼠标移出Div的时候更加平滑\r\n\r\n分界线～～～\r\n\r\n---\r\n\r\n首先贴出资料和大佬的教程\r\n\r\n* http://ife.baidu.com/course/detail/id/18\r\n* https://zhuanlan.zhihu.com/uxelement\r\n* https://baidu.github.io/san/\r\n* https://github.com/airbnb/lottie-web\r\n* https://codepen.io/airnan/project/editor/ZeNONO/\r\n* https://www.youtube.com/watch?v=5XMUJdjI0L8\r\n* ......\r\n\r\n大概就是这么写 大家可以去Google搜教程 官方案例很不错\r\n\r\n首先布局 结构和样式都可以借鉴san官网 利用控制台(so easy~)\r\n\r\n```bash\r\n<div class=\"resource-block\">\r\n  <a href=\"\" class=\"resource-item\">\r\n    <div class=\"resource-item-top resource-item-top-two\">\r\n        <div\r\n        id=\"bm\"\r\n        class=\"bodymovin\"\r\n        data-movpath=\"js/compass.json\">\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"resource-item-bottom\">\r\n      <h5>教程</h5>\r\n      <p>教程是入门的捷径，请从这里开始了解San</p>\r\n    </div>\r\n  </a>\r\n</div>\r\n```\r\n\r\n这是结构 具体样式可以查看我的github文件 [传送门](https://github.com/xiaotiandada/Case/tree/master/Anime)\r\n\r\n然后就是js 控制动画效果了\r\n\r\n引入jquery (方便～)\r\n\r\n* 在github上的build/player获取最新版本的lottie.js文件 或者 从AE的插件导出\r\n* 在HTML引入文件\r\n\r\n``` bash\r\n<script src=\"js/lottie.js\"></script>\r\n```\r\n\r\n* 调用lottie.loadAnimation()启动一个动画。将一个对象作为参数\r\n\r\n```bash\r\nvar animData = {\r\n  container: bodymovinLayer,\r\n  renderer: 'svg',\r\n  prerender: true,\r\n  loop: false,\r\n  autoplay: false,\r\n  path: bodymovinLayer.getAttribute('data-movpath')\r\n}\r\n\r\n# animData 导出的动画数据的Object\r\n# container 渲染动画的dom元素\r\n# renderer 'svg'/'canvas'/'html'来设置渲染器\r\n# prerender 这个根据英文应该是预渲染\r\n# loop 是否循环播放\r\n# autoplay 是否自动播放\r\n# path 路径\r\n\r\n\r\n```\r\n\r\n* while循环绑定事件 将上面封装进一个方法\r\n\r\n```bash\r\nsetBodymovin = function (cards, len) {\r\n  while (len--) {\r\n    var bodymovinLayer = cards[len].getElementsByClassName('bodymovin')[0]\r\n\r\n    var animData = {\r\n      container: bodymovinLayer,\r\n      renderer: 'svg',\r\n      prerender: true,\r\n      loop: false,\r\n      autoplay: false,\r\n      path: bodymovinLayer.getAttribute('data-movpath')\r\n    }\r\n\r\n    anim = lottie.loadAnimation(animData);\r\n\r\n    (function (anim) {\r\n      var card = cards[len]\r\n\r\n      $(card).on('mouseenter', function () {\r\n        anim.play()\r\n      })\r\n\r\n      $(card).on('mouseleave', function (e) {\r\n        anim.stop()\r\n      })\r\n    })(anim)\r\n\r\n  }\r\n\r\n}\r\n```\r\n\r\n* 最后获取元素调用\r\n\r\n```bash\r\nvar resourceCards = document.querySelectorAll('.resource-block')\r\nvar facilityCards = document.querySelectorAll('.facility-block')\r\nvar len = resourceCards.length\r\n\r\nsetBodymovin(resourceCards, len)\r\nsetBodymovin(facilityCards, len)\r\n\r\n```\r\n\r\n最后贴 gulp 任务\r\n\r\n```bash\r\nconst gulp = require('gulp')\r\nconst connect = require('gulp-connect')\r\n\r\ngulp.task('connect', function(){\r\n  connect.server({\r\n    root: 'app',\r\n    port: 8000,\r\n    livereload: true\r\n  })\r\n})\r\n\r\ngulp.task('html', function(){\r\n  gulp.src('./app/*.html')\r\n    .pipe(connect.reload())\r\n})\r\n\r\ngulp.task('css', function(){\r\n  gulp.src('./app/css/*.css')\r\n    .pipe(connect.reload())\r\n})\r\n\r\ngulp.task('watch', function () {\r\n  gulp.watch(['./app/*.html'], ['html'])\r\n  gulp.watch(['./app/css/*.css'], ['css'])\r\n})\r\n\r\ngulp.task('default', ['connect','watch'])\r\n```\r\n\r\n具体代码见github源码\r\n\r\n大佬多给给意见哦～～～\r\n\r\nQq： 952822399","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<p>2018-05-19 01:10:14</p>\n<p>在百度前端技术学院学习 设计师学院 绿(大佬)的课程 (第一课QAQ) <a href=\"http://ife.baidu.com/course/detail/id/18\">传送门</a></p>\n<p>然后模仿san官网的动画效果 <a href=\"https://baidu.github.io/san/\">san</a></p>\n<p>这是我模仿的效果 <a href=\"https://xiaotiandada.github.io/Case/Anime/sanDemo/app/\">传送们</a> pc端食用更佳！</p>\n<p>大佬的实现已经很棒了 个人只让部分动画变得平滑 比如说鼠标移出的时候增加了</p>\n<!-- more -->\n\n<pre class=\"language-bash\"><code class=\"language-bash\">transition: transform .3s;</code></pre><p>这样可以让鼠标移出Div的时候更加平滑</p>\n<p>分界线～～～</p>\n<hr>\n<p>首先贴出资料和大佬的教程</p>\n<ul>\n<li><a href=\"http://ife.baidu.com/course/detail/id/18\">http://ife.baidu.com/course/detail/id/18</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/uxelement\">https://zhuanlan.zhihu.com/uxelement</a></li>\n<li><a href=\"https://baidu.github.io/san/\">https://baidu.github.io/san/</a></li>\n<li><a href=\"https://github.com/airbnb/lottie-web\">https://github.com/airbnb/lottie-web</a></li>\n<li><a href=\"https://codepen.io/airnan/project/editor/ZeNONO/\">https://codepen.io/airnan/project/editor/ZeNONO/</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=5XMUJdjI0L8\">https://www.youtube.com/watch?v=5XMUJdjI0L8</a></li>\n<li>......</li>\n</ul>\n<p>大概就是这么写 大家可以去Google搜教程 官方案例很不错</p>\n<p>首先布局 结构和样式都可以借鉴san官网 利用控制台(so easy~)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><div class=\"resource-block\">\n  <a href=\"\" class=\"resource-item\">\n    <div class=\"resource-item-top resource-item-top-two\">\n        <div\n        id=\"bm\"\n        class=\"bodymovin\"\n        data-movpath=\"js/compass.json\">\n      </div>\n    </div>\n\n    <div class=\"resource-item-bottom\">\n      <h5>教程</h5>\n      <p>教程是入门的捷径，请从这里开始了解San</p>\n    </div>\n  </a>\n</div></code></pre><p>这是结构 具体样式可以查看我的github文件 <a href=\"https://github.com/xiaotiandada/Case/tree/master/Anime\">传送门</a></p>\n<p>然后就是js 控制动画效果了</p>\n<p>引入jquery (方便～)</p>\n<ul>\n<li>在github上的build/player获取最新版本的lottie.js文件 或者 从AE的插件导出</li>\n<li>在HTML引入文件</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><script src=\"js/lottie.js\"></script></code></pre><ul>\n<li>调用lottie.loadAnimation()启动一个动画。将一个对象作为参数</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">var animData = {\n  container: bodymovinLayer,\n  renderer: 'svg',\n  prerender: true,\n  loop: false,\n  autoplay: false,\n  path: bodymovinLayer.getAttribute('data-movpath')\n}\n\n# animData 导出的动画数据的Object\n# container 渲染动画的dom元素\n# renderer 'svg'/'canvas'/'html'来设置渲染器\n# prerender 这个根据英文应该是预渲染\n# loop 是否循环播放\n# autoplay 是否自动播放\n# path 路径\n\n</code></pre><ul>\n<li>while循环绑定事件 将上面封装进一个方法</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">setBodymovin = function (cards, len) {\n  while (len--) {\n    var bodymovinLayer = cards[len].getElementsByClassName('bodymovin')[0]\n\n    var animData = {\n      container: bodymovinLayer,\n      renderer: 'svg',\n      prerender: true,\n      loop: false,\n      autoplay: false,\n      path: bodymovinLayer.getAttribute('data-movpath')\n    }\n\n    anim = lottie.loadAnimation(animData);\n\n    (function (anim) {\n      var card = cards[len]\n\n      $(card).on('mouseenter', function () {\n        anim.play()\n      })\n\n      $(card).on('mouseleave', function (e) {\n        anim.stop()\n      })\n    })(anim)\n\n  }\n\n}</code></pre><ul>\n<li>最后获取元素调用</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">var resourceCards = document.querySelectorAll('.resource-block')\nvar facilityCards = document.querySelectorAll('.facility-block')\nvar len = resourceCards.length\n\nsetBodymovin(resourceCards, len)\nsetBodymovin(facilityCards, len)\n</code></pre><p>最后贴 gulp 任务</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">const gulp = require('gulp')\nconst connect = require('gulp-connect')\n\ngulp.task('connect', function(){\n  connect.server({\n    root: 'app',\n    port: 8000,\n    livereload: true\n  })\n})\n\ngulp.task('html', function(){\n  gulp.src('./app/*.html')\n    .pipe(connect.reload())\n})\n\ngulp.task('css', function(){\n  gulp.src('./app/css/*.css')\n    .pipe(connect.reload())\n})\n\ngulp.task('watch', function () {\n  gulp.watch(['./app/*.html'], ['html'])\n  gulp.watch(['./app/css/*.css'], ['css'])\n})\n\ngulp.task('default', ['connect','watch'])</code></pre><p>具体代码见github源码</p>\n<p>大佬多给给意见哦～～～</p>\n<p>Qq： 952822399</p>\n","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}