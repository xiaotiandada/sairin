{"pageProps":{"post":{"id":"MDU6SXNzdWU3ODg3NDgyMzE=","url":"https://github.com/xiaotiandada/blog/issues/42","title":"用nodejs快速在Matataki发文","updatedAt":"2021-01-19T06:33:09Z","createdAt":"2021-01-19T06:33:09Z","body":"2020-01-27 20:52:26\r\n\r\n如何用nodejs快速在Matataki发文, 利用node爬虫来获取网页的内容然后转发到[matataki](https://www.matataki.io/)上面\r\n\r\n这里就自己的[blog](https://xiaotiandada.github.io/)做一个简单的**example** 这是可能需要用的[接口文档](https://xiaotiandada.github.io/matatakiApi)⬇️⬇️⬇️ (docsify真香)\r\n\r\n<!-- more -->\r\n\r\n![](https://i.loli.net/2020/01/27/V5oPbDI9QANXcGJ.png)\r\n\r\n### 开始\r\n\r\n1. 首先我们先初始一个项目\r\n\r\n   ```bash\r\n   mkdir matataki-post\r\n   npm init -y\r\n   touch index.js\r\n   ```\r\n\r\n2. 理清思路\r\n\r\n   就像怎么把大象🐘装进冰箱一样 1.... 2... 3... 首先我们需要在[matataki](https://www.matataki.io/article)上面注册一个账号, 我选择了邮箱 因为很简单也很方便 注册也挺快的, 然后去发布一篇文章 看看接口是如何调用的\r\n\r\n   **编辑**\r\n\r\n   ![](https://i.loli.net/2020/01/27/Lp29OskI6whtKdx.png)\r\n\r\n   **发布**\r\n\r\n   ![](https://i.loli.net/2020/01/27/KzcSsa6kIovujWE.png)\r\n\r\n   分析Networ \r\n\r\n   编辑: 我们在编辑文章的时候可以看出上传图片调用接口是 /post/uploadImage, 于是我们可以忽略其他接口调用\r\n\r\n   发布: 发布的时候, 可以看出我们一共调用了两个核心的接口, 一个是ipfs上传, 一个是文章上传\r\n\r\n   \r\n\r\n   **思路**\r\n\r\n   ```tex\r\n   // 1、获取内容\r\n   \t// 1、获取html\r\n   \t// 2、解析dom获取内容\r\n   // 2、发布文章\r\n   \t// 1、转存文章封面 因为文章的图片是外站的 我们需要转存到matataki上面才行\r\n   \t// 2、上传ipfs\r\n   \t// 3、上传文章\r\n   ```\r\n\r\n   \r\n\r\n3. 获取网页内容并解析dom\r\n\r\n   因为我的blog是静态页面 所以用[superagent](https://www.npmjs.com/package/superagent)就可以抓取到内容了, 如果是客户端渲染抓去内容可能有问题, 可以考虑用[puppetter](https://www.npmjs.com/package/puppeteer)做爬虫, 然后用[cheerio](https://www.npmjs.com/package/cheerio)来解析dom 回味jq,  请求用[axios](https://www.npmjs.com/package/axios)因为做前端习惯了🍑\r\n\r\n   ```bash\r\n   npm i superagent cheerio axios\r\n   ```\r\n\r\n   ```javascript\r\n   const superagent = require(\"superagent\");\r\n   const cheerio = require(\"cheerio\");\r\n   const axios = require(\"axios\");\r\n   // ...\r\n   // 获取内容\r\n   const getHtml = async url => {\r\n     try {\r\n       // 根据url获取内容\r\n       const res = await superagent.get(url);\r\n       return res.text;\r\n     } catch (err) {\r\n       console.error(err);\r\n       return false;\r\n     }\r\n   };\r\n   \r\n   // 拆dom 这块根据自己页面自定义\r\n   const getDom = html => {\r\n     if (!html) return false; // 没html返回\r\n     const $ = cheerio.load(html);\r\n     // 我的标题\r\n     let title = $(\"#main #posts .post-header .post-title\");\r\n     // 描述\r\n     let desc = $(\"#main #posts .post-body\").text();\r\n     // 内容\r\n     let content = $(\"#main #posts .post-body\").html();\r\n     // 文章封面\r\n     let cover = $(\"#main #posts .post-body img\");\r\n   \t\r\n     // 如果有标题\r\n     let titleRes = title.length >= 1 ? $(title[0]).text() : \"\";\r\n     // 如果有图片\r\n     let coverRes = cover.length >= 1 ? $(cover[0]).attr(\"src\") : \"\";\r\n   \t\r\n     // 把数据返回出去\r\n     return {\r\n       title: titleRes,\r\n       desc,\r\n       content,\r\n       cover: coverRes\r\n     };\r\n   };\r\n   ```\r\n\r\n   这块还是挺简单的233~~~\r\n\r\n   ```bash\r\n   # 然后我们可以调用方法 启动\r\n   node index\r\n   \r\n   # 如果不出意外的话, 数据就能正常返回了 懒得截图了\r\n   ```\r\n\r\n4. 发布文章\r\n\r\n   首先我们需要一些平台需要的信息, \r\n\r\n   - **TOKEN**, 可以去控制台的**Cookies**里面寻找, 找到一个**key**为 **ACCESS_TOKEN** 然后复制信息\r\n   -  **URL** 就是需要转发的文章 \r\n   - **AUTHOR**是你这个账号在平台的用户名\r\n   -  **PLATFORM** 是你这个账号的类型, 比如我是邮箱账号 我就是为 **email**\r\n\r\n   ```javascript\r\n   const TOKEN = \"\"; // 身份证明\r\n   const URL = \"\"; // 需要发的文章\r\n   const AUTHOR = \"\"; // 用户名\r\n   const PLATFORM = \"email\"; // 账号类型 邮箱账号\r\n   ```\r\n\r\n   然后我们需要一个**config**文件 我也这种做法对不对 反正能用🍑 如果你觉得直接写在index.js要方便 可以简化这步\r\n\r\n   ```javascript\r\n   // config.js\r\n   module.exports = {\r\n     // 接口地址\r\n     api: {\r\n       development: \"\",\r\n       production: \"https://api.smartsignature.io\"\r\n     },\r\n     // 页面地址\r\n     webUrl: {\r\n       development: \"\",\r\n       production: \"https://www.matataki.io\"\r\n     }\r\n   }\r\n   \r\n   // index.js\r\n   const config = require('./config') // config\r\n   const mode = process.env.NODE_ENV || 'production'; // 模式\r\n   const API = config.api[mode]; // 接口\r\n   const webUrl = config.webUrl[mode]; // 页面地址\r\n   ```\r\n\r\n   增加两个命令  **dev**  **start** 来区分  **development** 和 **production**\r\n\r\n   ```javascript\r\n     \"scripts\": {\r\n       \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n       \"dev\": \"NODE_ENV=development node index\",\r\n       \"start\": \"NODE_ENV=production node index\"\r\n     },\r\n   ```\r\n\r\n   把内容发布到**ipfs**\r\n\r\n   ```javascript\r\n   const qs = require(\"qs\");\r\n   // ...\r\n   \r\n   console.log('开始获取Html...');\r\n   let resHtml = await getHtml(URL);\r\n   console.log('获取Dom...');\r\n   let resDom = await getDom(resHtml);\r\n   \r\n   let data = {\r\n       title: resDom.title.trim(),\r\n       author: AUTHOR,\r\n       desc: resDom.desc.trim(),\r\n       content: resDom.content.trim()\r\n     };\r\n     data.desc = data.desc.replace(/[\\r\\n]/g, \"\"); // 去除回撤换行\r\n     data.content = data.content.replace(/[\\r\\n]/g, \"\"); // 去除回撤换行\r\n     let hash = await postIpfs(data);\r\n     if (!hash) return console.log(\"not hash\", hash);\r\n   \r\n   // 发布到ipfs\r\n   const postIpfs = async ({ title, author, desc, content }) => {\r\n     try {\r\n       if (!TOKEN) throw new Error(\"没有token\");\r\n       const stringifyData = qs.stringify({\r\n         \"data[title]\": title,\r\n         \"data[author]\": author,\r\n         \"data[desc]\": desc,\r\n         \"data[content]\": content\r\n       });\r\n       let res = await axios({\r\n         method: \"post\",\r\n         url: `${API}/post/ipfs`,\r\n         data: stringifyData,\r\n         headers: { \"x-access-token\": TOKEN }\r\n       });\r\n       // console.log(res.data);\r\n       if (res.status === 200 && res.data.code === 0) {\r\n         return res.data.hash;\r\n       } else return false;\r\n     } catch (error) {\r\n       console.log(error);\r\n       return false;\r\n     }\r\n   };\r\n   ```\r\n\r\n   需要的 **x-access-token** 已经在前面定义过了, 成功请求后会返回**hash**地址\r\n\r\n   然后转存图片\r\n\r\n   > 下载图片这块, 按照**search**到的**code**没有修改, 使用**request**请求图片, 并且写入文件, 当然我也发现一个不错的第三方库, [image-downloader](https://www.npmjs.com/package/image-downloader) 这个可以很轻松的下载图片\r\n\r\n   ```javascript\r\n   const FormData = require('form-data');\r\n   const fs = require('fs')\r\n   const request = require('request')\r\n   const path = require('path')\r\n   // ...\r\n   // 图片转存\r\n   const downloadImage = async url => {\r\n     if (!url) {\r\n       console.log('没有url地址')\r\n       return false\r\n     }\r\n     // https://github.com/Kerminate/douban-movies/blob/9119c276b2785b329f62cca684bc6d6459a7c57e/server/tasks/smms.js\r\n   \r\n     // 下载图片\r\n     const downResources = (url, imgPath) => {\r\n       return new Promise((resolve, reject) => {\r\n         request\r\n           .get(url)\r\n           .pipe(fs.createWriteStream(imgPath))\r\n           .on('finish', () => {\r\n             resolve()\r\n           })\r\n       })\r\n     }\r\n   \r\n     const fileName = 'photo.png'\r\n     const imgPath = path.resolve(__dirname, './photo.jpg')\r\n     try {\r\n       await downResources(url, imgPath)\r\n       // fix Callback must be a function\r\n       const buffer = await fs.readFileSync(imgPath)\r\n       const base64Image = Buffer.from(buffer).toString('base64')\r\n   \r\n       const form = new FormData()\r\n       form.append('smfile', Buffer.from(base64Image, 'base64'), {\r\n         filename: fileName\r\n       })\r\n       let headers = form.getHeaders()\r\n       headers['x-access-token'] = TOKEN\r\n       const res = await axios({\r\n           method: 'POST',\r\n           url: `${API}/post/uploadImage`,\r\n           headers: headers,\r\n           data: form\r\n         })\r\n       // console.log(res.data)\r\n       if (res.status === 200 && res.data.code === 0) {\r\n         return res.data.data.cover\r\n       } else {\r\n         console.log('fail, status: ', res.status)\r\n         return false\r\n       }\r\n     } catch (err) {\r\n       console.log('update error', err)\r\n       return false\r\n     }\r\n   };\r\n   ```\r\n\r\n   图片上传的核心我是从**github**里面**search**的\r\n\r\n   ```javascript\r\n   // ...\r\n   // 这里的一些转换我没有弄明白, 前端一般直接一个file或者一个blob就上去了\r\n   // 在node里面这个Buffer我还没有理解 希望大佬们看到了能教我一手👋!!!\r\n   const base64Image = Buffer.from(buffer).toString('base64')\r\n   const form = new FormData()\r\n   form.append('smfile', Buffer.from(base64Image, 'base64'), {\r\n     filename: fileName\r\n   })\r\n   // ...\r\n   ```\r\n\r\n   上传成功后会返回一个**url**地址, 如果是**smms**之类的图床上传记得多写一些判断他会判断**重复**的图片\r\n\r\n   图片也有了之后就是上传文章了\r\n\r\n   ```javascript\r\n   // 发布文章\r\n   const post = async data => {\r\n     try {\r\n       let res = await axios({\r\n         method: \"post\",\r\n         url: `${API}/post/publish`,\r\n         data: data,\r\n         headers: { \"x-access-token\": TOKEN }\r\n       });\r\n       // console.log(data, res.data);\r\n       if (res.status === 200 && res.data.code === 0) {\r\n         return res.data;\r\n       } else {\r\n         console.log('fail', res.data)\r\n         return false;\r\n       }\r\n     } catch (error) {\r\n       console.log('error', error)\r\n       return false;\r\n     }\r\n   };\r\n   \r\n     console.log('发送到Matataki...');\r\n   \t// 大部分的参数按照我这个默认就好了\r\n     let resPost = await post({\r\n       author: AUTHOR,\r\n       cover,\r\n       fissionFactor: 2000,\r\n       hash: hash,\r\n       platform: PLATFORM,\r\n       publickey: null,\r\n       sign: null,\r\n       msgParams: null,\r\n       signId: null,\r\n       title: resDom.title,\r\n       is_original: 0,\r\n       tags: \"\",\r\n       cc_license: null,\r\n       commentPayPoint: 1,\r\n       shortContent: \"\"\r\n     });\r\n     if (resPost) {\r\n       console.log(`发送成功, 您的文章地址: ${webUrl}/p/${resPost.data}`)\r\n     } else {\r\n       console.log('发送失败!!!')\r\n     }\r\n   ```\r\n\r\n   成功后会返回一个文章**id**然后我们去访问`` console.log(`发送成功, 您的文章地址: ${webUrl}/p/${resPost.data}`)``\r\n\r\n\r\n\r\n到此流程就完全结束了!!! 归纳调用\r\n\r\n```javascript\r\n// 开始\r\nconst init = async () => {\r\n  console.log('开始获取Html...');\r\n  let resHtml = await getHtml(URL);\r\n  console.log('获取Dom...');\r\n  let resDom = await getDom(resHtml);\r\n\r\n  console.log('开始发送到ipfs...');\r\n  let data = {\r\n    title: resDom.title.trim(),\r\n    author: AUTHOR,\r\n    desc: resDom.desc.trim(),\r\n    content: resDom.content.trim()\r\n  };\r\n  data.desc = data.desc.replace(/[\\r\\n]/g, \"\"); // 去除回撤换行\r\n  data.content = data.content.replace(/[\\r\\n]/g, \"\"); // 去除回撤换行\r\n  let hash = await postIpfs(data);\r\n  if (!hash) return console.log(\"not hash\", hash);\r\n\r\n  console.log('转存下载图片...');\r\n  let cover = await downloadImage(resDom.cover);\r\n  if (!cover) return console.log('下载图片失败')\r\n  console.log('发送到Matataki...');\r\n  let resPost = await post({\r\n    author: AUTHOR,\r\n    cover,\r\n    fissionFactor: 2000,\r\n    hash: hash,\r\n    platform: PLATFORM,\r\n    publickey: null,\r\n    sign: null,\r\n    msgParams: null,\r\n    signId: null,\r\n    title: resDom.title,\r\n    is_original: 0,\r\n    tags: \"\",\r\n    cc_license: null,\r\n    commentPayPoint: 1,\r\n    shortContent: \"\"\r\n  });\r\n  if (resPost) {\r\n    console.log(`发送成功, 您的文章地址: ${webUrl}/p/${resPost.data}`)\r\n  } else {\r\n    console.log('发送失败!!!')\r\n  }\r\n};\r\n\r\ninit()\r\n```\r\n\r\n![](https://i.loli.net/2020/01/28/u24DUxmbzJMjAkK.png)\r\n\r\n调用结果 看起来还不错🍑\r\n\r\n [预览地址 1991](https://www.matataki.io/p/1991)\r\n\r\n[仓库地址](https://github.com/xiaotiandada/matataki-post)\r\n\r\n[我的Github](https://github.com/xiaotiandada)\r\n\r\n---\r\n\r\n由于这是一个简单的**example** 所以不会弄得太复杂 简单的爬虫加上调用接口即可。\r\n\r\n因为不太会node 全完自己瞎鼓捣, 如果写的不对或者不好的地方希望大佬们多多指点 指点\r\n\r\n也欢迎加入QQ Group ID:718639024 来吐槽我🤮🤮🤮","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<p>2020-01-27 20:52:26</p>\n<p>如何用nodejs快速在Matataki发文, 利用node爬虫来获取网页的内容然后转发到<a href=\"https://www.matataki.io/\">matataki</a>上面</p>\n<p>这里就自己的<a href=\"https://xiaotiandada.github.io/\">blog</a>做一个简单的<strong>example</strong> 这是可能需要用的<a href=\"https://xiaotiandada.github.io/matatakiApi\">接口文档</a>⬇️⬇️⬇️ (docsify真香)</p>\n<!-- more -->\n\n<p><img src=\"https://i.loli.net/2020/01/27/V5oPbDI9QANXcGJ.png\" alt=\"\"></p>\n<h3 id=\"开始\">开始</h3>\n<ol>\n<li><p>首先我们先初始一个项目</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">mkdir matataki-post\nnpm init -y\ntouch index.js</code></pre></li>\n<li><p>理清思路</p>\n<p>就像怎么把大象🐘装进冰箱一样 1.... 2... 3... 首先我们需要在<a href=\"https://www.matataki.io/article\">matataki</a>上面注册一个账号, 我选择了邮箱 因为很简单也很方便 注册也挺快的, 然后去发布一篇文章 看看接口是如何调用的</p>\n<p><strong>编辑</strong></p>\n<p><img src=\"https://i.loli.net/2020/01/27/Lp29OskI6whtKdx.png\" alt=\"\"></p>\n<p><strong>发布</strong></p>\n<p><img src=\"https://i.loli.net/2020/01/27/KzcSsa6kIovujWE.png\" alt=\"\"></p>\n<p>分析Networ </p>\n<p>编辑: 我们在编辑文章的时候可以看出上传图片调用接口是 /post/uploadImage, 于是我们可以忽略其他接口调用</p>\n<p>发布: 发布的时候, 可以看出我们一共调用了两个核心的接口, 一个是ipfs上传, 一个是文章上传</p>\n<p><strong>思路</strong></p>\n<pre class=\"language-tex\"><code class=\"language-tex\">// 1、获取内容\n    // 1、获取html\n    // 2、解析dom获取内容\n// 2、发布文章\n    // 1、转存文章封面 因为文章的图片是外站的 我们需要转存到matataki上面才行\n    // 2、上传ipfs\n    // 3、上传文章</code></pre></li>\n<li><p>获取网页内容并解析dom</p>\n<p>因为我的blog是静态页面 所以用<a href=\"https://www.npmjs.com/package/superagent\">superagent</a>就可以抓取到内容了, 如果是客户端渲染抓去内容可能有问题, 可以考虑用<a href=\"https://www.npmjs.com/package/puppeteer\">puppetter</a>做爬虫, 然后用<a href=\"https://www.npmjs.com/package/cheerio\">cheerio</a>来解析dom 回味jq,  请求用<a href=\"https://www.npmjs.com/package/axios\">axios</a>因为做前端习惯了🍑</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npm i superagent cheerio axios</code></pre><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> superagent <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"superagent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cheerio <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cheerio\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// 获取内容</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getHtml</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">url</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 根据url获取内容</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> superagent<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 拆dom 这块根据自己页面自定义</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getDom</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">html</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>html<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没html返回</span>\n  <span class=\"token keyword\">const</span> $ <span class=\"token operator\">=</span> cheerio<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 我的标题</span>\n  <span class=\"token keyword\">let</span> title <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#main #posts .post-header .post-title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 描述</span>\n  <span class=\"token keyword\">let</span> desc <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#main #posts .post-body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 内容</span>\n  <span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#main #posts .post-body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 文章封面</span>\n  <span class=\"token keyword\">let</span> cover <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#main #posts .post-body img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n  <span class=\"token comment\">// 如果有标题</span>\n  <span class=\"token keyword\">let</span> titleRes <span class=\"token operator\">=</span> title<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 如果有图片</span>\n  <span class=\"token keyword\">let</span> coverRes <span class=\"token operator\">=</span> cover<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>cover<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    \n  <span class=\"token comment\">// 把数据返回出去</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> titleRes<span class=\"token punctuation\">,</span>\n    desc<span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">cover</span><span class=\"token operator\">:</span> coverRes\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><p>这块还是挺简单的233~~~</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"># 然后我们可以调用方法 启动\nnode index\n\n# 如果不出意外的话, 数据就能正常返回了 懒得截图了</code></pre></li>\n<li><p>发布文章</p>\n<p>首先我们需要一些平台需要的信息, </p>\n<ul>\n<li><strong>TOKEN</strong>, 可以去控制台的<strong>Cookies</strong>里面寻找, 找到一个<strong>key</strong>为 <strong>ACCESS_TOKEN</strong> 然后复制信息</li>\n<li><strong>URL</strong> 就是需要转发的文章 </li>\n<li><strong>AUTHOR</strong>是你这个账号在平台的用户名</li>\n<li><strong>PLATFORM</strong> 是你这个账号的类型, 比如我是邮箱账号 我就是为 <strong>email</strong></li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">TOKEN</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 身份证明</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 需要发的文章</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">AUTHOR</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用户名</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PLATFORM</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 账号类型 邮箱账号</span></code></pre><p>然后我们需要一个<strong>config</strong>文件 我也这种做法对不对 反正能用🍑 如果你觉得直接写在index.js要方便 可以简化这步</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 接口地址</span>\n  <span class=\"token literal-property property\">api</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">development</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">production</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.smartsignature.io\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 页面地址</span>\n  <span class=\"token literal-property property\">webUrl</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">development</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">production</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.matataki.io\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// config</span>\n<span class=\"token keyword\">const</span> mode <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">||</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模式</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">API</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">[</span>mode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接口</span>\n<span class=\"token keyword\">const</span> webUrl <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>webUrl<span class=\"token punctuation\">[</span>mode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 页面地址</span></code></pre><p>增加两个命令  <strong>dev</strong>  <strong>start</strong> 来区分  <strong>development</strong> 和 <strong>production</strong></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=development node index\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=production node index\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre><p>把内容发布到<strong>ipfs</strong></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> qs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'开始获取Html...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> resHtml <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getHtml</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'获取Dom...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> resDom <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getDom</span><span class=\"token punctuation\">(</span>resHtml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> resDom<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token constant\">AUTHOR</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">desc</span><span class=\"token operator\">:</span> resDom<span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> resDom<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  data<span class=\"token punctuation\">.</span>desc <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\r\\n]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 去除回撤换行</span>\n  data<span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\r\\n]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 去除回撤换行</span>\n  <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">postIpfs</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hash<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not hash\"</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 发布到ipfs</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">postIpfs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token constant\">TOKEN</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> stringifyData <span class=\"token operator\">=</span> qs<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"data[title]\"</span><span class=\"token operator\">:</span> title<span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"data[author]\"</span><span class=\"token operator\">:</span> author<span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"data[desc]\"</span><span class=\"token operator\">:</span> desc<span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"data[content]\"</span><span class=\"token operator\">:</span> content\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">API</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/post/ipfs</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> stringifyData<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"x-access-token\"</span><span class=\"token operator\">:</span> <span class=\"token constant\">TOKEN</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// console.log(res.data);</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><p>需要的 <strong>x-access-token</strong> 已经在前面定义过了, 成功请求后会返回<strong>hash</strong>地址</p>\n<p>然后转存图片</p>\n<blockquote>\n<p>下载图片这块, 按照<strong>search</strong>到的<strong>code</strong>没有修改, 使用<strong>request</strong>请求图片, 并且写入文件, 当然我也发现一个不错的第三方库, <a href=\"https://www.npmjs.com/package/image-downloader\">image-downloader</a> 这个可以很轻松的下载图片</p>\n</blockquote>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> FormData <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form-data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// 图片转存</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">downloadImage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">url</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'没有url地址'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// https://github.com/Kerminate/douban-movies/blob/9119c276b2785b329f62cca684bc6d6459a7c57e/server/tasks/smms.js</span>\n\n  <span class=\"token comment\">// 下载图片</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">downResources</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> imgPath</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      request\n        <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span>imgPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finish'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> fileName <span class=\"token operator\">=</span> <span class=\"token string\">'photo.png'</span>\n  <span class=\"token keyword\">const</span> imgPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./photo.jpg'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">downResources</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> imgPath<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// fix Callback must be a function</span>\n    <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>imgPath<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> base64Image <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    form<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'smfile'</span><span class=\"token punctuation\">,</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>base64Image<span class=\"token punctuation\">,</span> <span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> fileName\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> headers <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    headers<span class=\"token punctuation\">[</span><span class=\"token string\">'x-access-token'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">TOKEN</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">API</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/post/uploadImage</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> headers<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> form\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// console.log(res.data)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>cover\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail, status: '</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'update error'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><p>图片上传的核心我是从<strong>github</strong>里面<strong>search</strong>的</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// 这里的一些转换我没有弄明白, 前端一般直接一个file或者一个blob就上去了</span>\n<span class=\"token comment\">// 在node里面这个Buffer我还没有理解 希望大佬们看到了能教我一手👋!!!</span>\n<span class=\"token keyword\">const</span> base64Image <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nform<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'smfile'</span><span class=\"token punctuation\">,</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>base64Image<span class=\"token punctuation\">,</span> <span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> fileName\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span></code></pre><p>上传成功后会返回一个<strong>url</strong>地址, 如果是<strong>smms</strong>之类的图床上传记得多写一些判断他会判断<strong>重复</strong>的图片</p>\n<p>图片也有了之后就是上传文章了</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 发布文章</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">post</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">API</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/post/publish</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"x-access-token\"</span><span class=\"token operator\">:</span> <span class=\"token constant\">TOKEN</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// console.log(data, res.data);</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发送到Matataki...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 大部分的参数按照我这个默认就好了</span>\n  <span class=\"token keyword\">let</span> resPost <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token constant\">AUTHOR</span><span class=\"token punctuation\">,</span>\n    cover<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fissionFactor</span><span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> hash<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">platform</span><span class=\"token operator\">:</span> <span class=\"token constant\">PLATFORM</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">publickey</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">sign</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">msgParams</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">signId</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> resDom<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">is_original</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">tags</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">cc_license</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">commentPayPoint</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">shortContent</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resPost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">发送成功, 您的文章地址: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>webUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/p/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>resPost<span class=\"token punctuation\">.</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发送失败!!!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre><p>成功后会返回一个文章<strong>id</strong>然后我们去访问<code> console.log(`发送成功, 您的文章地址: ${webUrl}/p/${resPost.data}`)</code></p>\n</li>\n</ol>\n<p>到此流程就完全结束了!!! 归纳调用</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 开始</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">init</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'开始获取Html...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> resHtml <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getHtml</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'获取Dom...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> resDom <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getDom</span><span class=\"token punctuation\">(</span>resHtml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'开始发送到ipfs...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> resDom<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token constant\">AUTHOR</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">desc</span><span class=\"token operator\">:</span> resDom<span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> resDom<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  data<span class=\"token punctuation\">.</span>desc <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\r\\n]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 去除回撤换行</span>\n  data<span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\r\\n]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 去除回撤换行</span>\n  <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">postIpfs</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hash<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not hash\"</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转存下载图片...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> cover <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">downloadImage</span><span class=\"token punctuation\">(</span>resDom<span class=\"token punctuation\">.</span>cover<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cover<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'下载图片失败'</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发送到Matataki...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> resPost <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token constant\">AUTHOR</span><span class=\"token punctuation\">,</span>\n    cover<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fissionFactor</span><span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> hash<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">platform</span><span class=\"token operator\">:</span> <span class=\"token constant\">PLATFORM</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">publickey</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">sign</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">msgParams</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">signId</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> resDom<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">is_original</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">tags</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">cc_license</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">commentPayPoint</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">shortContent</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resPost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">发送成功, 您的文章地址: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>webUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/p/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>resPost<span class=\"token punctuation\">.</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发送失败!!!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre><p><img src=\"https://i.loli.net/2020/01/28/u24DUxmbzJMjAkK.png\" alt=\"\"></p>\n<p>调用结果 看起来还不错🍑</p>\n<p> <a href=\"https://www.matataki.io/p/1991\">预览地址 1991</a></p>\n<p><a href=\"https://github.com/xiaotiandada/matataki-post\">仓库地址</a></p>\n<p><a href=\"https://github.com/xiaotiandada\">我的Github</a></p>\n<hr>\n<p>由于这是一个简单的<strong>example</strong> 所以不会弄得太复杂 简单的爬虫加上调用接口即可。</p>\n<p>因为不太会node 全完自己瞎鼓捣, 如果写的不对或者不好的地方希望大佬们多多指点 指点</p>\n<p>也欢迎加入QQ Group ID:718639024 来吐槽我🤮🤮🤮</p>\n","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}