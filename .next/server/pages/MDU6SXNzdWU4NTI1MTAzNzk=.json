{"pageProps":{"post":{"id":"MDU6SXNzdWU4NTI1MTAzNzk=","url":"https://github.com/xiaotiandada/blog/issues/73","title":"前端下载 Markdown File","updatedAt":"2021-05-26T17:04:28Z","createdAt":"2021-04-07T15:09:10Z","body":"[Download Any File from Blob](https://dev.to/nombrekeff/download-file-from-blob-21ho)\r\n\r\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/Blob\r\n\r\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/URL\r\n\r\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\r\n\r\n>`Blob` 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 [`ReadableStream`](https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream) 来用于数据操作。 \r\n>\r\n>Blob 表示的不一定是JavaScript原生格式的数据。[`File`](https://developer.mozilla.org/zh-CN/docs/Web/API/File) 接口基于`Blob`，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。\r\n>\r\n>要从其他非blob对象和数据构造一个 `Blob`，请使用 [`Blob()`](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob) 构造函数。要创建一个 blob 数据的子集 blob，请使用 [`slice()`](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/slice) 方法。要获取用户文件系统上的文件对应的 `Blob` 对象，请参阅 [`File`](https://developer.mozilla.org/zh-CN/docs/Web/API/File) 文档。\r\n>\r\n>接受 `Blob` 对象的API也被列在 [`File`](https://developer.mozilla.org/zh-CN/docs/Web/API/File) 文档中。\r\n>\r\n>**注意：**`slice()` 方法原本接受 `length` 作为第二个参数，以表示复制到新 `Blob` 对象的字节数。如果设置的参数使 `start + length` 超出了源 `Blob` 对象的大小，则返回从开始到结尾的所有数据。\r\n>\r\n>**注意：**`slice()` 方法在某些浏览器和版本上带有浏览器引擎前缀：比如 Firefox 12 及更早版本的`blob.mozSlice()` 和 Safari 中的`blob.webkitSlice()`。 没有浏览器引擎前缀的老版本 `slice()` 方法有不同的语义，并且已过时。Firefox 30 取消了对 `blob.mozSlice()` 的支持。\r\n\r\n```javascript\r\nvar debug = {hello: \"world\"};\r\nvar blob = new Blob([JSON.stringify(debug, null, 2)], {type : 'application/json'});\r\n```\r\n\r\n>**`URL`**接口用于解析，构造，规范化和编码 [URLs](https://developer.mozilla.org/zh-CN/docs/Glossary/URL)。 它通过提供允许您轻松阅读和修改URL组件的属性来工作。 通常，通过在调用URL的构造函数时将URL指定为字符串或提供相对URL和基本URL来创建新的URL对象。 然后，您可以轻松读取URL的已解析组成部分或对URL进行更改。\r\n>\r\n>如果浏览器尚不支持[`URL()`](https://developer.mozilla.org/zh-CN/docs/Web/API/URL/URL)构造函数，则可以使用[`Window`](https://developer.mozilla.org/zh-CN/docs/Web/API/Window)中的[`Window.URL`](https://developer.mozilla.org/zh-CN/docs/conflicting/Web/API/URL)属性。 确保检查您的任何目标浏览器是否要求对此添加前缀。\r\n\r\n>**`URL.createObjectURL()`** 静态方法会创建一个 [`DOMString`](https://developer.mozilla.org/zh-CN/docs/Web/API/DOMString)，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 [`document`](https://developer.mozilla.org/zh-CN/docs/Web/API/Document) 绑定。这个新的URL 对象表示指定的 [`File`](https://developer.mozilla.org/zh-CN/docs/Web/API/File) 对象或 [`Blob`](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob) 对象。\r\n\r\n>**`URL.revokeObjectURL()`** 静态方法用来释放一个之前已经存在的、通过调用 [`URL.createObjectURL()`](https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL) 创建的 URL 对象。当你结束使用某个 URL 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。\r\n>\r\n>你可以在 `sourceopen` 被处理之后的任何时候调用 `revokeObjectURL()`。这是因为 `createObjectURL()` 仅仅意味着将一个媒体元素的 `src` 属性关联到一个 [`MediaSource`](https://developer.mozilla.org/zh-CN/docs/Web/API/MediaSource) 对象上去。调用`revokeObjectURL()` 使这个潜在的对象回到原来的地方，允许平台在合适的时机进行垃圾收集。\r\n\r\n```javascript\r\nlet objectURL = URL.createObjectURL(object);\r\n\r\nwindow.URL.revokeObjectURL(objectURL);\r\n```\r\n\r\n>**EventTarget.dispatchEvent**\r\n>\r\n>向一个指定的事件目标派发一个[事件](https://developer.mozilla.org/zh-CN/docs/Web/API/Event), 并以合适的顺序**同步调用**目标元素相关的事件处理函数。标准事件处理规则(包括事件捕获和可选的冒泡过程)同样适用于通过手动的使用`dispatchEvent()`方法派发的事件。\r\n\r\n>MouseEvent\r\n>\r\n>The `**MouseEvent**` interface represents events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include `click`, `dblclick`, `mouseup`, `mousedown`.\r\n>\r\n>`MouseEvent` derives from [`UIEvent`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent), which in turn derives from [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event). Though the [`MouseEvent.initMouseEvent()`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent) method is kept for backward compatibility, creating of a `MouseEvent` object should be done using the [`MouseEvent()`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent) constructor.\r\n>\r\n>Several more specific events are based on `MouseEvent`, including [`WheelEvent`](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent) and [`DragEvent`](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent).\r\n>\r\n>\r\n>\r\n><iframe class=\"inheritance-diagram-frame\" id=\"frame_inheritance_diagram\" width=\"600\" height=\"70\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/Web/API/MouseEvent/_sample_.inheritance_diagram.html\" loading=\"lazy\" style=\"box-sizing: border-box; max-width: 100%; border: 0px;\"></iframe>\r\n\r\n```javascript\r\nlet evt = new MouseEvent(\"click\", {\r\n  bubbles: true,\r\n  cancelable: true,\r\n  view: window\r\n});\r\n\r\ncb.dispatchEvent(evt);\r\n```\r\n\r\n将数据转换为 blob，然后创建 url 链接，赋值给 a tag 利用 a tag 实现下载文件。\r\n\r\n\r\n```javascript\r\n\r\nfunction downloadBlob(blob, name = 'file.txt') {\r\n  // Convert your blob into a Blob URL (a special url that points to an object in the browser's memory)\r\n  const blobUrl = URL.createObjectURL(blob);\r\n\r\n  // Create a link element\r\n  const link = document.createElement(\"a\");\r\n\r\n  // Set link's href to point to the Blob URL\r\n  link.href = blobUrl;\r\n  link.download = name;\r\n\r\n  // Append link to the body\r\n  document.body.appendChild(link);\r\n\r\n  // Dispatch click event on the link\r\n  // This is necessary as link.click() does not work on the latest firefox\r\n  link.dispatchEvent(\r\n    new MouseEvent('click', { \r\n      bubbles: true, \r\n      cancelable: true, \r\n      view: window \r\n    })\r\n  );\r\n\r\n  // Remove link from body\r\n  document.body.removeChild(link);\r\n  window.URL.revokeObjectURL(blobUrl)\r\n}\r\n\r\n// Usage\r\nlet mdBlob = new Blob(['markdown'])\r\ndownloadBlob(mdBlob, 'markdown.md');\r\n\r\n```","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<p><a href=\"https://dev.to/nombrekeff/download-file-from-blob-21ho\">Download Any File from Blob</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\">https://developer.mozilla.org/zh-CN/docs/Web/API/Blob</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URL\">https://developer.mozilla.org/zh-CN/docs/Web/API/URL</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent\">https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\">https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent</a></p>\n<blockquote>\n<p><code>Blob</code> 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> 来用于数据操作。 </p>\n<p>Blob 表示的不一定是JavaScript原生格式的数据。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/File\"><code>File</code></a> 接口基于<code>Blob</code>，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。</p>\n<p>要从其他非blob对象和数据构造一个 <code>Blob</code>，请使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob\"><code>Blob()</code></a> 构造函数。要创建一个 blob 数据的子集 blob，请使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/slice\"><code>slice()</code></a> 方法。要获取用户文件系统上的文件对应的 <code>Blob</code> 对象，请参阅 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/File\"><code>File</code></a> 文档。</p>\n<p>接受 <code>Blob</code> 对象的API也被列在 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/File\"><code>File</code></a> 文档中。</p>\n<p><strong>注意：</strong><code>slice()</code> 方法原本接受 <code>length</code> 作为第二个参数，以表示复制到新 <code>Blob</code> 对象的字节数。如果设置的参数使 <code>start + length</code> 超出了源 <code>Blob</code> 对象的大小，则返回从开始到结尾的所有数据。</p>\n<p><strong>注意：</strong><code>slice()</code> 方法在某些浏览器和版本上带有浏览器引擎前缀：比如 Firefox 12 及更早版本的<code>blob.mozSlice()</code> 和 Safari 中的<code>blob.webkitSlice()</code>。 没有浏览器引擎前缀的老版本 <code>slice()</code> 方法有不同的语义，并且已过时。Firefox 30 取消了对 <code>blob.mozSlice()</code> 的支持。</p>\n</blockquote>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> debug <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">hello</span><span class=\"token operator\">:</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span> <span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><blockquote>\n<p>**<code>URL</code>**接口用于解析，构造，规范化和编码 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/URL\">URLs</a>。 它通过提供允许您轻松阅读和修改URL组件的属性来工作。 通常，通过在调用URL的构造函数时将URL指定为字符串或提供相对URL和基本URL来创建新的URL对象。 然后，您可以轻松读取URL的已解析组成部分或对URL进行更改。</p>\n<p>如果浏览器尚不支持<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URL/URL\"><code>URL()</code></a>构造函数，则可以使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window\"><code>Window</code></a>中的<a href=\"https://developer.mozilla.org/zh-CN/docs/conflicting/Web/API/URL\"><code>Window.URL</code></a>属性。 确保检查您的任何目标浏览器是否要求对此添加前缀。</p>\n</blockquote>\n<blockquote>\n<p><strong><code>URL.createObjectURL()</code></strong> 静态方法会创建一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMString\"><code>DOMString</code></a>，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document\"><code>document</code></a> 绑定。这个新的URL 对象表示指定的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/File\"><code>File</code></a> 对象或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\"><code>Blob</code></a> 对象。</p>\n</blockquote>\n<blockquote>\n<p><strong><code>URL.revokeObjectURL()</code></strong> 静态方法用来释放一个之前已经存在的、通过调用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL\"><code>URL.createObjectURL()</code></a> 创建的 URL 对象。当你结束使用某个 URL 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。</p>\n<p>你可以在 <code>sourceopen</code> 被处理之后的任何时候调用 <code>revokeObjectURL()</code>。这是因为 <code>createObjectURL()</code> 仅仅意味着将一个媒体元素的 <code>src</code> 属性关联到一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MediaSource\"><code>MediaSource</code></a> 对象上去。调用<code>revokeObjectURL()</code> 使这个潜在的对象回到原来的地方，允许平台在合适的时机进行垃圾收集。</p>\n</blockquote>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> objectURL <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">revokeObjectURL</span><span class=\"token punctuation\">(</span>objectURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><blockquote>\n<p><strong>EventTarget.dispatchEvent</strong></p>\n<p>向一个指定的事件目标派发一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Event\">事件</a>, 并以合适的顺序<strong>同步调用</strong>目标元素相关的事件处理函数。标准事件处理规则(包括事件捕获和可选的冒泡过程)同样适用于通过手动的使用<code>dispatchEvent()</code>方法派发的事件。</p>\n</blockquote>\n<blockquote>\n<p>MouseEvent</p>\n<p>The <code>**MouseEvent**</code> interface represents events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include <code>click</code>, <code>dblclick</code>, <code>mouseup</code>, <code>mousedown</code>.</p>\n<p><code>MouseEvent</code> derives from <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/UIEvent\"><code>UIEvent</code></a>, which in turn derives from <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event\"><code>Event</code></a>. Though the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent\"><code>MouseEvent.initMouseEvent()</code></a> method is kept for backward compatibility, creating of a <code>MouseEvent</code> object should be done using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent\"><code>MouseEvent()</code></a> constructor.</p>\n<p>Several more specific events are based on <code>MouseEvent</code>, including <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent\"><code>WheelEvent</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\"><code>DragEvent</code></a>.</p>\n<iframe class=\"inheritance-diagram-frame\" id=\"frame_inheritance_diagram\" width=\"600\" height=\"70\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/Web/API/MouseEvent/_sample_.inheritance_diagram.html\" loading=\"lazy\" style=\"box-sizing: border-box; max-width: 100%; border: 0px;\"></iframe>\n</blockquote>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> evt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">cancelable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">view</span><span class=\"token operator\">:</span> window\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncb<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>将数据转换为 blob，然后创建 url 链接，赋值给 a tag 利用 a tag 实现下载文件。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">downloadBlob</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'file.txt'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Convert your blob into a Blob URL (a special url that points to an object in the browser's memory)</span>\n  <span class=\"token keyword\">const</span> blobUrl <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create a link element</span>\n  <span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Set link's href to point to the Blob URL</span>\n  link<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> blobUrl<span class=\"token punctuation\">;</span>\n  link<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Append link to the body</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Dispatch click event on the link</span>\n  <span class=\"token comment\">// This is necessary as link.click() does not work on the latest firefox</span>\n  link<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> \n      <span class=\"token literal-property property\">cancelable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> \n      <span class=\"token literal-property property\">view</span><span class=\"token operator\">:</span> window \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Remove link from body</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">revokeObjectURL</span><span class=\"token punctuation\">(</span>blobUrl<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Usage</span>\n<span class=\"token keyword\">let</span> mdBlob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'markdown'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">downloadBlob</span><span class=\"token punctuation\">(</span>mdBlob<span class=\"token punctuation\">,</span> <span class=\"token string\">'markdown.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}