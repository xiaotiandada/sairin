{"pageProps":{"post":{"id":"I_kwDOD_pKSM48PE0t","url":"https://github.com/xiaotiandada/blog/issues/86","title":"React Native 学习","updatedAt":"2021-09-29T08:17:55Z","createdAt":"2021-09-29T07:17:25Z","body":"- [repo](https://github.com/xiaotiandada/look)\r\n- [App](https://expo.dev/@xiaotiandada/AwesomeProject)\r\n- [NativeBase](https://nativebase.io/) UI 组件库\r\n\r\n记录一些觉得有意义的功能点\r\n\r\n### 列表滚动\r\n\r\n- 静态列表 不多的情况我会用 [ScrollView](https://reactnative.dev/docs/scrollview)\r\n\r\n  ```tsx\r\n  <ScrollView style={styles.scrollView}>\r\n    <Text style={styles.text}>\r\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n      eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\r\n      minim veniam, quis nostrud exercitation ullamco laboris nisi ut\r\n      aliquip ex ea commodo consequat. Duis aute irure dolor in\r\n      reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\r\n      pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\r\n      culpa qui officia deserunt mollit anim id est laborum.\r\n    </Text>\r\n  </ScrollView>\r\n  ```\r\n\r\n- 动态加载 包含图片什么的 [flatlist](https://reactnative.dev/docs/flatlist)\r\n\r\n```tsx\r\n<FlatList\r\n  data={DATA}\r\n  renderItem={renderItem}\r\n  keyExtractor={(item) => item.id}\r\n  />\r\n```\r\n\r\n- [SectionList](https://reactnative.dev/docs/sectionlist) 暂没用上\r\n\r\n### 列表下拉刷新\r\n\r\n```tsx\r\nconst [refreshing, setRefreshing] = useState<boolean>(false);\r\n\r\n// refresh\r\nconst onRefresh = useCallback(\r\n  async () => {\r\n    // do something\r\n  }, []);\r\n\r\n\r\n<FlatList\r\n  ref={refFlatList}\r\n  numColumns={2}\r\n  renderItem={renderItem}\r\n  keyExtractor={(item) => item.id}\r\n  refreshControl={\r\n    <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\r\n  }\r\n// ...\r\n```\r\n\r\nFlatList 继承了 ScrollView 所以 ScrollView 也一样\r\n\r\n\r\n\r\n### 列表上拉加载\r\n\r\n```tsx\r\n// more load components\r\nconst RenderLoadMoreView = () => {\r\n  return <View style={styles.loadMore}>\r\n    <ActivityIndicator\r\n      style={styles.indicator}\r\n      size={\"small\"}\r\n      animating={true}\r\n      />\r\n    <Text>Loading...</Text>\r\n  </View>\r\n};\r\n\r\nconst fetchCosplayMore = useCallback(\r\n  async () => {\r\n    // do something\r\n  }, []);\r\n\r\n\r\n<FlatList\r\n  ref={refFlatList}\r\n  numColumns={2}\r\n  renderItem={renderItem}\r\n  keyExtractor={(item) => item.id}\r\n  refreshControl={\r\n    <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\r\n  }\r\n  ListFooterComponent={() => RenderLoadMoreView()}\r\n  onEndReached={() => fetchCosplayMore()}\r\n  \r\n  // ...\r\n```\r\n\r\n\r\n\r\n### 列表滚动\r\n\r\n```tsx\r\nconst handleScroll = useCallback((e: NativeSyntheticEvent<NativeScrollEvent>) => {\r\n  // do something\r\n}, []);\r\n\r\n<FlatList\r\n  ref={refFlatList}\r\n  numColumns={2}\r\n  renderItem={renderItem}\r\n  keyExtractor={(item) => item.id}\r\n  refreshControl={\r\n    <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\r\n  }\r\n  ListFooterComponent={() => RenderLoadMoreView()}\r\n  onEndReached={() => fetchCosplayMore()}\r\n  onScroll={handleScroll}\r\n```\r\n\r\n\r\n\r\n### 图片保存 ios\r\n\r\n```tsx\r\nimport * as MediaLibrary from 'expo-media-library';\r\nimport * as ImagePicker from 'expo-image-picker';\r\n\r\nconst handleDownload = useCallback(\r\n    async (url: string): Promise<void> => {\r\n      // libraryPermissionResult Object {\r\n      //   \"accessPrivileges\": \"none\",\r\n      //   \"canAskAgain\": false,\r\n      //   \"expires\": \"never\",\r\n      //   \"granted\": false,\r\n      //   \"status\": \"denied\",\r\n      // }\r\n\t\r\n      // copy doc 不太需要\r\n      if (Platform.OS !== 'web') {\r\n        const { status } = await ImagePicker.getMediaLibraryPermissionsAsync();\r\n        if (status !== 'granted') {\r\n          // Alert.alert('Sorry, we need media library permissions to make this work!');\r\n          // return\r\n        }\r\n      } else {\r\n        console.log('no support web')\r\n        return\r\n      }\r\n\t\t\t\r\n      // 好像是这个权限 后来不知道怎么清空权限重新获取一下\r\n      const libraryPermissionResult = await ImagePicker.getMediaLibraryPermissionsAsync()\r\n      console.log('libraryPermissionResult', libraryPermissionResult)\r\n      // ImagePicker.requestMediaLibraryPermissionsAsync(writeOnly)\r\n\r\n      // Get permission\r\n      if (libraryPermissionResult.accessPrivileges === 'none' && libraryPermissionResult.status !== 'granted') {\r\n        await ImagePicker.requestMediaLibraryPermissionsAsync(true)\r\n\r\n        const _libraryPermissionResult = await ImagePicker.getMediaLibraryPermissionsAsync()\r\n        console.log('_libraryPermissionResult', _libraryPermissionResult)\r\n\r\n        if (_libraryPermissionResult.accessPrivileges === 'none' && _libraryPermissionResult.status !== 'granted') {\r\n          return\r\n        }\r\n      }\r\n\r\n      // Save\r\n      try {\r\n        // encode 因为图片 url 有中文 会报错\r\n        await MediaLibrary.saveToLibraryAsync(encodeURI(url))\r\n        Alert.alert('Saved successfully')\r\n\r\n      } catch (error) {\r\n        console.log('error', error)\r\n        Alert.alert('Save failed')\r\n      }\r\n    }, [])\r\n```\r\n\r\n> 先跑了个流程\r\n\r\n### ActionSheetIOS\r\n\r\n```tsx\r\nimport { ActionSheetIOS } from 'react-native';\r\n\r\nconst onPress = () =>\r\n  ActionSheetIOS.showActionSheetWithOptions(\r\n    {\r\n      options: [\"Cancel\", \"Generate number\", \"Reset\"],\r\n      destructiveButtonIndex: 2,\r\n      cancelButtonIndex: 0,\r\n      userInterfaceStyle: 'dark'\r\n    },\r\n    buttonIndex => {\r\n      if (buttonIndex === 0) {\r\n        // cancel action\r\n      } else if (buttonIndex === 1) {\r\n        setResult(Math.floor(Math.random() * 100) + 1);\r\n      } else if (buttonIndex === 2) {\r\n        setResult(\"🔮\");\r\n      }\r\n    }\r\n  );\r\n```\r\n\r\n会弹出一个菜单\r\n\r\n\r\n\r\n### Share\r\n\r\n```tsx\r\nimport { Share } from 'react-native';\r\nconst onShare = async () => {\r\n    try {\r\n      const result = await Share.share({\r\n        message:\r\n          'React Native | A framework for building native apps using React',\r\n      });\r\n      if (result.action === Share.sharedAction) {\r\n        if (result.activityType) {\r\n          // shared with activity type of result.activityType\r\n        } else {\r\n          // shared\r\n        }\r\n      } else if (result.action === Share.dismissedAction) {\r\n        // dismissed\r\n      }\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  };\r\n```\r\n\r\n会出现一个 分享 菜单，和 expo share sdk 有什么区别我还不知道 https://docs.expo.dev/versions/latest/react-native/share/\r\n\r\n### 返回到顶部\r\n\r\n```tsx\r\n// TODO: type fix\r\nconst refFlatList = useRef<any>(null);\r\n\r\n// go top\r\nconst goToTop = useCallback(() => {\r\n  // 后来看见的 懒得试\r\n  // https://reactnavigation.org/docs/use-scroll-to-top\r\n  refFlatList.current.scrollToOffset({ offset: 0 });\r\n}, [refFlatList]);\r\n\r\n\r\n<FlatList\r\n  ref={refFlatList}\r\n```\r\n\r\nreactnavigation 文档也提到了这个功能\r\n\r\n### react-navigation\r\n\r\nhttps://reactnavigation.org/\r\n\r\n- navigation.navigate('Detail') 只会产生一条记录\r\n\r\n- navigation.push('Detail') 会产出N条记录\r\n\r\n- useFocusEffect\r\n\r\n  ```tsx\r\n  useFocusEffect(\r\n    useCallback(() => {\r\n      const fetch = () => something()\r\n      fetch()\r\n    }, [])\r\n  );\r\n  ```\r\n\r\n- params ``navigation.navigate('Detail', params)``\r\n- ...\r\n\r\n### 背景渐变\r\n\r\n```tsx\r\nimport * as React from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\n\r\nexport default function App() {\r\n  return (\r\n    <View style={styles.container}>\r\n      <LinearGradient\r\n        // Background Linear Gradient\r\n        colors={['rgba(0,0,0,0.8)', 'transparent']}\r\n        style={styles.background}\r\n      />\r\n      <LinearGradient\r\n        // Button Linear Gradient\r\n        colors={['#4c669f', '#3b5998', '#192f6a']}\r\n        style={styles.button}>\r\n        <Text style={styles.text}>Sign in with Facebook</Text>\r\n      </LinearGradient>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({ ... }); \r\n```\r\n\r\n","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<ul>\n<li><a href=\"https://github.com/xiaotiandada/look\">repo</a></li>\n<li><a href=\"https://expo.dev/@xiaotiandada/AwesomeProject\">App</a></li>\n<li><a href=\"https://nativebase.io/\">NativeBase</a> UI 组件库</li>\n</ul>\n<p>记录一些觉得有意义的功能点</p>\n<h3 id=\"列表滚动\">列表滚动</h3>\n<ul>\n<li><p>静态列表 不多的情况我会用 <a href=\"https://reactnative.dev/docs/scrollview\">ScrollView</a></p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><ScrollView style={styles.scrollView}>\n  <Text style={styles.text}>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n    eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n    minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n    aliquip ex ea commodo consequat. Duis aute irure dolor in\n    reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n    pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n    culpa qui officia deserunt mollit anim id est laborum.\n  </Text>\n</ScrollView></code></pre></li>\n<li><p>动态加载 包含图片什么的 <a href=\"https://reactnative.dev/docs/flatlist\">flatlist</a></p>\n</li>\n</ul>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><FlatList\n  data={DATA}\n  renderItem={renderItem}\n  keyExtractor={(item) => item.id}\n  /></code></pre><ul>\n<li><a href=\"https://reactnative.dev/docs/sectionlist\">SectionList</a> 暂没用上</li>\n</ul>\n<h3 id=\"列表下拉刷新\">列表下拉刷新</h3>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">const [refreshing, setRefreshing] = useState<boolean>(false);\n\n// refresh\nconst onRefresh = useCallback(\n  async () => {\n    // do something\n  }, []);\n\n\n<FlatList\n  ref={refFlatList}\n  numColumns={2}\n  renderItem={renderItem}\n  keyExtractor={(item) => item.id}\n  refreshControl={\n    <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n  }\n// ...</code></pre><p>FlatList 继承了 ScrollView 所以 ScrollView 也一样</p>\n<h3 id=\"列表上拉加载\">列表上拉加载</h3>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">// more load components\nconst RenderLoadMoreView = () => {\n  return <View style={styles.loadMore}>\n    <ActivityIndicator\n      style={styles.indicator}\n      size={\"small\"}\n      animating={true}\n      />\n    <Text>Loading...</Text>\n  </View>\n};\n\nconst fetchCosplayMore = useCallback(\n  async () => {\n    // do something\n  }, []);\n\n\n<FlatList\n  ref={refFlatList}\n  numColumns={2}\n  renderItem={renderItem}\n  keyExtractor={(item) => item.id}\n  refreshControl={\n    <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n  }\n  ListFooterComponent={() => RenderLoadMoreView()}\n  onEndReached={() => fetchCosplayMore()}\n  \n  // ...</code></pre><h3 id=\"列表滚动-1\">列表滚动</h3>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">const handleScroll = useCallback((e: NativeSyntheticEvent<NativeScrollEvent>) => {\n  // do something\n}, []);\n\n<FlatList\n  ref={refFlatList}\n  numColumns={2}\n  renderItem={renderItem}\n  keyExtractor={(item) => item.id}\n  refreshControl={\n    <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n  }\n  ListFooterComponent={() => RenderLoadMoreView()}\n  onEndReached={() => fetchCosplayMore()}\n  onScroll={handleScroll}</code></pre><h3 id=\"图片保存-ios\">图片保存 ios</h3>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">import * as MediaLibrary from 'expo-media-library';\nimport * as ImagePicker from 'expo-image-picker';\n\nconst handleDownload = useCallback(\n    async (url: string): Promise<void> => {\n      // libraryPermissionResult Object {\n      //   \"accessPrivileges\": \"none\",\n      //   \"canAskAgain\": false,\n      //   \"expires\": \"never\",\n      //   \"granted\": false,\n      //   \"status\": \"denied\",\n      // }\n    \n      // copy doc 不太需要\n      if (Platform.OS !== 'web') {\n        const { status } = await ImagePicker.getMediaLibraryPermissionsAsync();\n        if (status !== 'granted') {\n          // Alert.alert('Sorry, we need media library permissions to make this work!');\n          // return\n        }\n      } else {\n        console.log('no support web')\n        return\n      }\n            \n      // 好像是这个权限 后来不知道怎么清空权限重新获取一下\n      const libraryPermissionResult = await ImagePicker.getMediaLibraryPermissionsAsync()\n      console.log('libraryPermissionResult', libraryPermissionResult)\n      // ImagePicker.requestMediaLibraryPermissionsAsync(writeOnly)\n\n      // Get permission\n      if (libraryPermissionResult.accessPrivileges === 'none' && libraryPermissionResult.status !== 'granted') {\n        await ImagePicker.requestMediaLibraryPermissionsAsync(true)\n\n        const _libraryPermissionResult = await ImagePicker.getMediaLibraryPermissionsAsync()\n        console.log('_libraryPermissionResult', _libraryPermissionResult)\n\n        if (_libraryPermissionResult.accessPrivileges === 'none' && _libraryPermissionResult.status !== 'granted') {\n          return\n        }\n      }\n\n      // Save\n      try {\n        // encode 因为图片 url 有中文 会报错\n        await MediaLibrary.saveToLibraryAsync(encodeURI(url))\n        Alert.alert('Saved successfully')\n\n      } catch (error) {\n        console.log('error', error)\n        Alert.alert('Save failed')\n      }\n    }, [])</code></pre><blockquote>\n<p>先跑了个流程</p>\n</blockquote>\n<h3 id=\"actionsheetios\">ActionSheetIOS</h3>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">import { ActionSheetIOS } from 'react-native';\n\nconst onPress = () =>\n  ActionSheetIOS.showActionSheetWithOptions(\n    {\n      options: [\"Cancel\", \"Generate number\", \"Reset\"],\n      destructiveButtonIndex: 2,\n      cancelButtonIndex: 0,\n      userInterfaceStyle: 'dark'\n    },\n    buttonIndex => {\n      if (buttonIndex === 0) {\n        // cancel action\n      } else if (buttonIndex === 1) {\n        setResult(Math.floor(Math.random() * 100) + 1);\n      } else if (buttonIndex === 2) {\n        setResult(\"🔮\");\n      }\n    }\n  );</code></pre><p>会弹出一个菜单</p>\n<h3 id=\"share\">Share</h3>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">import { Share } from 'react-native';\nconst onShare = async () => {\n    try {\n      const result = await Share.share({\n        message:\n          'React Native | A framework for building native apps using React',\n      });\n      if (result.action === Share.sharedAction) {\n        if (result.activityType) {\n          // shared with activity type of result.activityType\n        } else {\n          // shared\n        }\n      } else if (result.action === Share.dismissedAction) {\n        // dismissed\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  };</code></pre><p>会出现一个 分享 菜单，和 expo share sdk 有什么区别我还不知道 <a href=\"https://docs.expo.dev/versions/latest/react-native/share/\">https://docs.expo.dev/versions/latest/react-native/share/</a></p>\n<h3 id=\"返回到顶部\">返回到顶部</h3>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">// TODO: type fix\nconst refFlatList = useRef<any>(null);\n\n// go top\nconst goToTop = useCallback(() => {\n  // 后来看见的 懒得试\n  // https://reactnavigation.org/docs/use-scroll-to-top\n  refFlatList.current.scrollToOffset({ offset: 0 });\n}, [refFlatList]);\n\n\n<FlatList\n  ref={refFlatList}</code></pre><p>reactnavigation 文档也提到了这个功能</p>\n<h3 id=\"react-navigation\">react-navigation</h3>\n<p><a href=\"https://reactnavigation.org/\">https://reactnavigation.org/</a></p>\n<ul>\n<li><p>navigation.navigate(&#39;Detail&#39;) 只会产生一条记录</p>\n</li>\n<li><p>navigation.push(&#39;Detail&#39;) 会产出N条记录</p>\n</li>\n<li><p>useFocusEffect</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">useFocusEffect(\n  useCallback(() => {\n    const fetch = () => something()\n    fetch()\n  }, [])\n);</code></pre></li>\n<li><p>params <code>navigation.navigate(&#39;Detail&#39;, params)</code></p>\n</li>\n<li><p>...</p>\n</li>\n</ul>\n<h3 id=\"背景渐变\">背景渐变</h3>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">import * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <LinearGradient\n        // Background Linear Gradient\n        colors={['rgba(0,0,0,0.8)', 'transparent']}\n        style={styles.background}\n      />\n      <LinearGradient\n        // Button Linear Gradient\n        colors={['#4c669f', '#3b5998', '#192f6a']}\n        style={styles.button}>\n        <Text style={styles.text}>Sign in with Facebook</Text>\n      </LinearGradient>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({ ... }); </code></pre>","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}