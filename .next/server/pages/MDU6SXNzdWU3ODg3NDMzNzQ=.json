{"pageProps":{"post":{"id":"MDU6SXNzdWU3ODg3NDMzNzQ=","url":"https://github.com/xiaotiandada/blog/issues/28","title":" dfs 深度优先搜索【js】","updatedAt":"2021-01-19T06:23:14Z","createdAt":"2021-01-19T06:23:14Z","body":"2019-08-19 12:32:52\r\n\r\n# 资料\r\n\r\n题目: https://www.spoj.com/problems/PT07Z/\r\n\r\n\r\nhttps://zh.wikipedia.org/wiki/%E6%A0%91_(%E5%9B%BE%E8%AE%BA)\r\n\r\n谢谢岛老师的教学\r\n\r\n[岛娘blog](http://www.shuizilong.com/house/)\r\n\r\n[岛娘Github](https://github.com/lychees)\r\n\r\n[岛娘Youtube](https://www.youtube.com/channel/UCkGmTVYI7xNW-ffuh5oV71Q)\r\n\r\n[code source](https://github.com/xiaotiandada/algorithm)\r\n\r\n\r\n# Go\r\n\r\n下面根据上面资料的wiki图来生成的点和边 看不见可能需要科学上网\r\n\r\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/24/Tree_graph.svg/360px-Tree_graph.svg.png\">\r\n\r\n点: 1 2 3 4 5 6\r\n\r\n边: 14 24 34 45 56\r\n\r\n## 设置顶点\r\n\r\n使用 Map https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\r\n\r\n```js\r\nlet vertexLen = 6; // 顶点数\r\nlet vertex = new Map(); // 顶点数据集合 map 可以设置键对值 0 1 2 3 4 5 or 1 2 3 4 5 6 or A B C D E F G ... ...\r\n```\r\n\r\n## 设置顶点和边\r\n\r\n```js\r\n/**\r\n * 设置顶点\r\n * @param {String || Number} v 顶点\r\n */\r\nconst setVertex = v => vertex.set(v, []);\r\n/**\r\n * 设置边\r\n * @param {String || Number} v1 点\r\n * @param {String || Number} v2 点\r\n */\r\nconst setVertexEdge = (v1, v2) => {\r\n  vertex.get(v1).push(v2);\r\n  vertex.get(v2).push(v1);\r\n};\r\n\r\n// 设置点\r\nfor (let i = 1; i <= vertexLen; i++) setVertex(i);\r\n\r\n// 定义边\r\nlet vertexEdge = [[1, 4], [2, 4], [3, 4], [4, 5], [5, 6]];\r\n\r\n// 设置边\r\nfor (let i = 0; i < vertexEdge.length; i++)\r\n  setVertexEdge(vertexEdge[i][0], vertexEdge[i][1]);\r\n\r\n```\r\n\r\n得到的集合\r\n\r\n```js\r\nMap {\r\n  1 => [ 4 ],\r\n  2 => [ 4 ],\r\n  3 => [ 4 ],\r\n  4 => [ 1, 2, 3, 5 ],\r\n  5 => [ 4, 6 ],\r\n  6 => [ 5 ] }\r\n```\r\n\r\n## dfs\r\n\r\nvertex 结构目前是这样点 ⬆️️️️️️️️️️ ⬆️️️️️️️️️️ ⬆️️️️️️️️️️\r\n\r\n\r\n这个方法主要通过存放一个map保存访问状态\r\n\r\n参考地址 https://www.geeksforgeeks.org/implementation-graph-javascript/\r\n\r\n``` js\r\n/**\r\n * dfs\r\n * @param {String || Number} startNode 开始点\r\n */\r\nconst dfs = startNode => {\r\n  let visited = new Map(); // 保持和顶点结构一样\r\n  for (let i = 1; i <= vertexLen; i++) visited.set(i, false); // 设置访问状态\r\n\r\n  // dfs 方法\r\n  const dfsFunc = (startNode, visited) => {\r\n    let z = 0; // 长度\r\n    visited.set(startNode, true); // 第一个点设置已访问\r\n    let get_next = vertex.get(startNode); // 获得顶点的所有临接点\r\n    for (let i = 0; i < get_next.length; i++) {\r\n      // 循环临接点\r\n      let get_elem = get_next[i]; // 得到元素\r\n      if (!visited.get(get_elem)) {\r\n        // 是否访问\r\n        z = Math.max(z, dfsFunc(get_elem, visited) + 1); // 增加边数\r\n      }\r\n    }\r\n    return z;\r\n  };\r\n  return dfsFunc(startNode, visited);\r\n};\r\n```\r\n\r\n## dfs\r\n\r\n下面这个是岛老师👨‍🏫教我方法\r\n\r\n主要通过存父节点来判断\r\n\r\n``` js\r\n/**\r\n * dfs\r\n * @param {String || Number} startNode 开始点\r\n */\r\nconst dfs1 = startNode => {\r\n  // 记录开始点和父级节点\r\n  const dfsFunc = (startNode, parentNode = -1) => {\r\n    let z = 0; // 记录长度\r\n    let get_next = vertex.get(startNode); // 得到相邻节点\r\n    for (let i = 0; i < get_next.length; i++) { // 循环点\r\n      let get_elem = get_next[i]; // 得到点\r\n      if (get_elem === parentNode) continue; // 如果是父节点 跳过\r\n      z = Math.max(z, dfsFunc(get_elem, startNode) + 1); // 递归添加长度\r\n    }\r\n    return z;\r\n  };\r\n  return dfsFunc(startNode);\r\n};\r\n\r\n```\r\n\r\n\r\n<details>\r\n<summary>查看所有代码</summary>\r\n\r\n\r\n``` js\r\nlet vertexLen = 6; // 顶点数\r\nlet vertex = new Map(); // 顶点数据集合 map 可以设置键对值 0 1 2 3 4 5 or 1 2 3 4 5 6 or A B C D E F G ... ...\r\n\r\n/**\r\n * 设置顶点\r\n * @param {String || Number} v 顶点\r\n */\r\nconst setVertex = v => vertex.set(v, []);\r\n/**\r\n * 设置边\r\n * @param {String || Number} v1 点\r\n * @param {String || Number} v2 点\r\n */\r\nconst setVertexEdge = (v1, v2) => {\r\n  vertex.get(v1).push(v2);\r\n  vertex.get(v2).push(v1);\r\n};\r\n\r\n// 设置点\r\nfor (let i = 1; i <= vertexLen; i++) setVertex(i);\r\n\r\n// 定义边\r\nlet vertexEdge = [[1, 4], [2, 4], [3, 4], [4, 5], [5, 6]];\r\n\r\n// 设置边\r\nfor (let i = 0; i < vertexEdge.length; i++)\r\n  setVertexEdge(vertexEdge[i][0], vertexEdge[i][1]);\r\n\r\n/**\r\n * dfs\r\n * @param {String || Number} startNode 开始点\r\n */\r\nconst dfs = startNode => {\r\n  let visited = new Map(); // 保持和顶点结构一样\r\n  for (let i = 1; i <= vertexLen; i++) visited.set(i, false); // 设置访问状态\r\n\r\n  // dfs 方法\r\n  const dfsFunc = (startNode, visited) => {\r\n    let z = 0; // 长度\r\n    visited.set(startNode, true); // 第一个点设置已访问\r\n    let get_next = vertex.get(startNode); // 获得顶点的所有临接点\r\n    for (let i = 0; i < get_next.length; i++) {\r\n      // 循环临接点\r\n      let get_elem = get_next[i]; // 得到元素\r\n      if (!visited.get(get_elem)) {\r\n        // 是否访问\r\n        z = Math.max(z, dfsFunc(get_elem, visited) + 1); // 增加边数\r\n      }\r\n    }\r\n    return z;\r\n  };\r\n  return dfsFunc(startNode, visited);\r\n};\r\n\r\n/**\r\n * dfs\r\n * @param {String || Number} startNode 开始点\r\n */\r\nconst dfs1 = startNode => {\r\n  // 记录开始点和父级节点\r\n  const dfsFunc = (startNode, parentNode = -1) => {\r\n    let z = 0; // 记录长度\r\n    let get_next = vertex.get(startNode); // 得到相邻节点\r\n    for (let i = 0; i < get_next.length; i++) { // 循环点\r\n      let get_elem = get_next[i]; // 得到点\r\n      if (get_elem === parentNode) continue; // 如果是父节点 跳过\r\n      z = Math.max(z, dfsFunc(get_elem, startNode) + 1); // 递归添加长度\r\n    }\r\n    return z;\r\n  };\r\n  return dfsFunc(startNode);\r\n};\r\n\r\nlet z = dfs(1);\r\nconsole.log(z);\r\n\r\nlet z1 = dfs1(1);\r\nconsole.log(z1);\r\n\r\nconsole.log(vertex);\r\n\r\n```\r\n\r\n</details>\r\n\r\n------\r\n\r\n\r\n--- 分割线 ---\r\n\r\n很遗憾上面的是有问题的\r\n\r\n[岛老师的作业批改](http://www.shuizilong.com/house/archives/pt07z/)\r\n\r\n- 数据没有从 IO 读入读出。\r\n\r\n- 第一个 dfs 求出的不是最远的端点。\r\n\r\n\r\n正确的解法应该是先求最深的一个端点,然后用从这个端点再搜索一次.\r\n\r\n>   因为 js 在 https://www.spoj.com 跑不过, 在http://codeforces.com 可以跑但是没找到题目,然后就选用了c++ \r\n\r\n在codeforces js输入输出\r\n\r\nhttp://codeforces.com/blog/entry/10594\r\n\r\nhttp://codeforces.com/blog/entry/64707\r\n\r\n\r\n---\r\n\r\n``` c++\r\n// u 开始点 p 父节点\r\npair<int, int> dfs(int u, int p = -1) {\r\n  // z first 长度 z second 最深点\r\n  // first += 1 second 为 u\r\n  pair<int, int> z = {0, u};\r\n  // for edge u 的 边\r\n  for(auto v: edge[u]) {\r\n    // 如果是父级点 跳过\r\n    if (v == p) continue;\r\n    z = max(z, dfs(v, u));\r\n  }\r\n  // 边+1\r\n  z.first += 1;\r\n  return z;\r\n}\r\n```\r\n\r\n<details>\r\n<summary>查看所有代码</summary>\r\n\r\n\r\n``` c++\r\n#include <iostream>\r\n#include <vector>\r\nusing namespace std;\r\n\r\nconst int N = 1e6;\r\nvector<int> edge[N];\r\n\r\n// u 开始点 p 父节点\r\npair<int, int> dfs(int u, int p = -1) {\r\n  // z first 长度 z second 最深点\r\n  // first += 1 second 为 u\r\n  pair<int, int> z = {0, u};\r\n  // for edge u 的 边\r\n  for(auto v: edge[u]) {\r\n    // 如果是父级点 跳过\r\n    if (v == p) continue;\r\n    z = max(z, dfs(v, u));\r\n  }\r\n  // 边+1\r\n  z.first += 1;\r\n  return z;\r\n}\r\n\r\n\r\nint main() {\r\n  int n;\r\n  // 输入\r\n  cin >> n;\r\n  \r\n  // 输入端点循环下面的边\r\n  for(int i = 0; i < n - 1; i++) {\r\n    int v, u;\r\n    cin >> v >> u;\r\n    edge[v].push_back(u);\r\n    edge[u].push_back(v);\r\n  }\r\n  \r\n  // 得到最深的端点\r\n  pair<int, int> z = dfs(1);\r\n  // 从最深的端点搜索\r\n  z = dfs(z.second);\r\n\r\n  // 边-1\r\n  cout << z.first-1 << endl;\r\n}\r\n\r\n```\r\n\r\n</details>\r\n\r\n\r\n希望看到的大佬可以多多指点迷津!!! 右边有我的联系方式💗💗","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<p>2019-08-19 12:32:52</p>\n<h1 id=\"资料\">资料</h1>\n<p>题目: <a href=\"https://www.spoj.com/problems/PT07Z/\">https://www.spoj.com/problems/PT07Z/</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%A0%91_(%E5%9B%BE%E8%AE%BA)\">https://zh.wikipedia.org/wiki/%E6%A0%91_(%E5%9B%BE%E8%AE%BA)</a></p>\n<p>谢谢岛老师的教学</p>\n<p><a href=\"http://www.shuizilong.com/house/\">岛娘blog</a></p>\n<p><a href=\"https://github.com/lychees\">岛娘Github</a></p>\n<p><a href=\"https://www.youtube.com/channel/UCkGmTVYI7xNW-ffuh5oV71Q\">岛娘Youtube</a></p>\n<p><a href=\"https://github.com/xiaotiandada/algorithm\">code source</a></p>\n<h1 id=\"go\">Go</h1>\n<p>下面根据上面资料的wiki图来生成的点和边 看不见可能需要科学上网</p>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/24/Tree_graph.svg/360px-Tree_graph.svg.png\">\n\n<p>点: 1 2 3 4 5 6</p>\n<p>边: 14 24 34 45 56</p>\n<h2 id=\"设置顶点\">设置顶点</h2>\n<p>使用 Map <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map</a></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> vertexLen <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 顶点数</span>\n<span class=\"token keyword\">let</span> vertex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 顶点数据集合 map 可以设置键对值 0 1 2 3 4 5 or 1 2 3 4 5 6 or A B C D E F G ... ...</span></code></pre><h2 id=\"设置顶点和边\">设置顶点和边</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * 设置顶点\n * @param {String || Number} v 顶点\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setVertex</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> vertex<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * 设置边\n * @param {String || Number} v1 点\n * @param {String || Number} v2 点\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setVertexEdge</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v1<span class=\"token punctuation\">,</span> v2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  vertex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  vertex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 设置点</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> vertexLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">setVertex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 定义边</span>\n<span class=\"token keyword\">let</span> vertexEdge <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 设置边</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vertexEdge<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setVertexEdge</span><span class=\"token punctuation\">(</span>vertexEdge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vertexEdge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>得到的集合</p>\n<pre class=\"language-js\"><code class=\"language-js\">Map <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">1</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">3</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">4</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">5</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">6</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre><h2 id=\"dfs\">dfs</h2>\n<p>vertex 结构目前是这样点 ⬆️️️️️️️️️️ ⬆️️️️️️️️️️ ⬆️️️️️️️️️️</p>\n<p>这个方法主要通过存放一个map保存访问状态</p>\n<p>参考地址 <a href=\"https://www.geeksforgeeks.org/implementation-graph-javascript/\">https://www.geeksforgeeks.org/implementation-graph-javascript/</a></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * dfs\n * @param {String || Number} startNode 开始点\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dfs</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">startNode</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保持和顶点结构一样</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> vertexLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> visited<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置访问状态</span>\n\n  <span class=\"token comment\">// dfs 方法</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dfsFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">startNode<span class=\"token punctuation\">,</span> visited</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 长度</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>startNode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一个点设置已访问</span>\n    <span class=\"token keyword\">let</span> get_next <span class=\"token operator\">=</span> vertex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>startNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获得顶点的所有临接点</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> get_next<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 循环临接点</span>\n      <span class=\"token keyword\">let</span> get_elem <span class=\"token operator\">=</span> get_next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到元素</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>get_elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 是否访问</span>\n        z <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span> <span class=\"token function\">dfsFunc</span><span class=\"token punctuation\">(</span>get_elem<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 增加边数</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> z<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">dfsFunc</span><span class=\"token punctuation\">(</span>startNode<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><h2 id=\"dfs-1\">dfs</h2>\n<p>下面这个是岛老师👨‍🏫教我方法</p>\n<p>主要通过存父节点来判断</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * dfs\n * @param {String || Number} startNode 开始点\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dfs1</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">startNode</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 记录开始点和父级节点</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dfsFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">startNode<span class=\"token punctuation\">,</span> parentNode <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录长度</span>\n    <span class=\"token keyword\">let</span> get_next <span class=\"token operator\">=</span> vertex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>startNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到相邻节点</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> get_next<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 循环点</span>\n      <span class=\"token keyword\">let</span> get_elem <span class=\"token operator\">=</span> get_next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到点</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>get_elem <span class=\"token operator\">===</span> parentNode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果是父节点 跳过</span>\n      z <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span> <span class=\"token function\">dfsFunc</span><span class=\"token punctuation\">(</span>get_elem<span class=\"token punctuation\">,</span> startNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归添加长度</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> z<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">dfsFunc</span><span class=\"token punctuation\">(</span>startNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><details>\n<summary>查看所有代码</summary>\n\n\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> vertexLen <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 顶点数</span>\n<span class=\"token keyword\">let</span> vertex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 顶点数据集合 map 可以设置键对值 0 1 2 3 4 5 or 1 2 3 4 5 6 or A B C D E F G ... ...</span>\n\n<span class=\"token comment\">/**\n * 设置顶点\n * @param {String || Number} v 顶点\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setVertex</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> vertex<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * 设置边\n * @param {String || Number} v1 点\n * @param {String || Number} v2 点\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setVertexEdge</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v1<span class=\"token punctuation\">,</span> v2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  vertex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  vertex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 设置点</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> vertexLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">setVertex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 定义边</span>\n<span class=\"token keyword\">let</span> vertexEdge <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 设置边</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vertexEdge<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setVertexEdge</span><span class=\"token punctuation\">(</span>vertexEdge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vertexEdge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * dfs\n * @param {String || Number} startNode 开始点\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dfs</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">startNode</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保持和顶点结构一样</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> vertexLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> visited<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置访问状态</span>\n\n  <span class=\"token comment\">// dfs 方法</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dfsFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">startNode<span class=\"token punctuation\">,</span> visited</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 长度</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>startNode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一个点设置已访问</span>\n    <span class=\"token keyword\">let</span> get_next <span class=\"token operator\">=</span> vertex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>startNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获得顶点的所有临接点</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> get_next<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 循环临接点</span>\n      <span class=\"token keyword\">let</span> get_elem <span class=\"token operator\">=</span> get_next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到元素</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>get_elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 是否访问</span>\n        z <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span> <span class=\"token function\">dfsFunc</span><span class=\"token punctuation\">(</span>get_elem<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 增加边数</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> z<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">dfsFunc</span><span class=\"token punctuation\">(</span>startNode<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * dfs\n * @param {String || Number} startNode 开始点\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dfs1</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">startNode</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 记录开始点和父级节点</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dfsFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">startNode<span class=\"token punctuation\">,</span> parentNode <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录长度</span>\n    <span class=\"token keyword\">let</span> get_next <span class=\"token operator\">=</span> vertex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>startNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到相邻节点</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> get_next<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 循环点</span>\n      <span class=\"token keyword\">let</span> get_elem <span class=\"token operator\">=</span> get_next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到点</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>get_elem <span class=\"token operator\">===</span> parentNode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果是父节点 跳过</span>\n      z <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span> <span class=\"token function\">dfsFunc</span><span class=\"token punctuation\">(</span>get_elem<span class=\"token punctuation\">,</span> startNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归添加长度</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> z<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">dfsFunc</span><span class=\"token punctuation\">(</span>startNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> z1 <span class=\"token operator\">=</span> <span class=\"token function\">dfs1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>z1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></details>\n\n<hr>\n<p>--- 分割线 ---</p>\n<p>很遗憾上面的是有问题的</p>\n<p><a href=\"http://www.shuizilong.com/house/archives/pt07z/\">岛老师的作业批改</a></p>\n<ul>\n<li><p>数据没有从 IO 读入读出。</p>\n</li>\n<li><p>第一个 dfs 求出的不是最远的端点。</p>\n</li>\n</ul>\n<p>正确的解法应该是先求最深的一个端点,然后用从这个端点再搜索一次.</p>\n<blockquote>\n<p>  因为 js 在 <a href=\"https://www.spoj.com\">https://www.spoj.com</a> 跑不过, 在<a href=\"http://codeforces.com\">http://codeforces.com</a> 可以跑但是没找到题目,然后就选用了c++ </p>\n</blockquote>\n<p>在codeforces js输入输出</p>\n<p><a href=\"http://codeforces.com/blog/entry/10594\">http://codeforces.com/blog/entry/10594</a></p>\n<p><a href=\"http://codeforces.com/blog/entry/64707\">http://codeforces.com/blog/entry/64707</a></p>\n<hr>\n<pre class=\"language-c++\"><code class=\"language-c++\">// u 开始点 p 父节点\npair<int, int> dfs(int u, int p = -1) {\n  // z first 长度 z second 最深点\n  // first += 1 second 为 u\n  pair<int, int> z = {0, u};\n  // for edge u 的 边\n  for(auto v: edge[u]) {\n    // 如果是父级点 跳过\n    if (v == p) continue;\n    z = max(z, dfs(v, u));\n  }\n  // 边+1\n  z.first += 1;\n  return z;\n}</code></pre><details>\n<summary>查看所有代码</summary>\n\n\n<pre class=\"language-c++\"><code class=\"language-c++\">#include <iostream>\n#include <vector>\nusing namespace std;\n\nconst int N = 1e6;\nvector<int> edge[N];\n\n// u 开始点 p 父节点\npair<int, int> dfs(int u, int p = -1) {\n  // z first 长度 z second 最深点\n  // first += 1 second 为 u\n  pair<int, int> z = {0, u};\n  // for edge u 的 边\n  for(auto v: edge[u]) {\n    // 如果是父级点 跳过\n    if (v == p) continue;\n    z = max(z, dfs(v, u));\n  }\n  // 边+1\n  z.first += 1;\n  return z;\n}\n\n\nint main() {\n  int n;\n  // 输入\n  cin >> n;\n  \n  // 输入端点循环下面的边\n  for(int i = 0; i < n - 1; i++) {\n    int v, u;\n    cin >> v >> u;\n    edge[v].push_back(u);\n    edge[u].push_back(v);\n  }\n  \n  // 得到最深的端点\n  pair<int, int> z = dfs(1);\n  // 从最深的端点搜索\n  z = dfs(z.second);\n\n  // 边-1\n  cout << z.first-1 << endl;\n}\n</code></pre></details>\n\n\n<p>希望看到的大佬可以多多指点迷津!!! 右边有我的联系方式💗💗</p>\n","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}