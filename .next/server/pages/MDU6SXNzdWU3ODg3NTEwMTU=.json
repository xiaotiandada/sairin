{"pageProps":{"post":{"id":"MDU6SXNzdWU3ODg3NTEwMTU=","url":"https://github.com/xiaotiandada/blog/issues/55","title":"elasticsearch node 简单使用","updatedAt":"2021-01-19T06:38:40Z","createdAt":"2021-01-19T06:38:40Z","body":" 2020-08-02 22:20:54\r\n\r\nelasticsearch node 简单的使用 [repo](https://github.com/xiaotiandada/brick)\r\n\r\nhttps://juejin.im/entry/6844903607775526919\r\n\r\nhttps://www.elastic.co/guide/en/elasticsearch/client/javascript-api/16.x/api-reference-6-8.html#api-search-6-8\r\n\r\nhttps://www.npmjs.com/package/elasticsearch\r\n\r\nhttps://www.npmjs.com/package/egg-es\r\n\r\n<!-- more -->\r\n\r\n##### 前置条件\r\n\r\n1. elasticsearch 环境\r\n2. node(用了 egg) 环境\r\n\r\n###### 填充数据\r\n\r\n开始选择用了 [elasticsearch](https://www.npmjs.com/package/elasticsearch) 包利用 **js** 直接填充**城市 cities**数据\r\n\r\nhttps://juejin.im/entry/6844903607775526919\r\n\r\n> 这里有一些 index、type、id 需要相同 这样才能正确的使用和填充数据删除之类的\r\n\r\n```javascript\r\nconst elasticsearch = require(\"elasticsearch\");\r\n// 所有城市数据\r\nconst cities = require('./cities.json')\r\nconst axios = require('axios')\r\n\r\n// init apiVersion 需要和本地一样\r\nconst client = new elasticsearch.Client({\r\n    host: \"localhost:9200\",\r\n    log: \"trace\",\r\n    apiVersion: \"6.8\", // use the same version of your Elasticsearch instance\r\n});\r\nconst sleep = time => new Promise(reslove => setTimeout(reslove, time))\r\n\r\nconst init = async () => {\r\n    try {\r\n        await client.ping({\r\n            requestTimeout: 30000\r\n        });\r\n    } catch (e) {\r\n        console.log('e', e)\r\n    }\r\n}\r\ninit()\r\n\r\n// 创建索引\r\n// -> POST http://localhost:9200/es_user/_doc/1/_create\r\nconst createFunc = async () => {\r\n    try {\r\n        await client.create({\r\n            index: 'es_user',\r\n            type: '_doc',\r\n            id: '1',\r\n            body: {}\r\n        });\r\n    } catch (error) {\r\n        console.log('create error', error)\r\n    }\r\n}\r\n\r\n// 删除\r\n// -> DELETE http://localhost:9200/es_user/_doc/1\r\nconst deleteFunc = async () => {\r\n    try {\r\n        await client.delete({\r\n            index: 'es_user',\r\n            type: '_doc',\r\n            id: '1',\r\n        });\r\n    } catch (error) {\r\n        console.log('delete error', error)\r\n    }\r\n}\r\n\r\n// 填充数据\r\nconst push = (cities, start, end) => {\r\n    var bulk = [];\r\n    cities.slice(start, end).forEach(city => {\r\n        bulk.push({\r\n            index: {\r\n                _index: 'es_user',\r\n                _type: '_doc',\r\n            }\r\n        })\r\n        bulk.push(city)\r\n    })\r\n\r\n    // console.log('bulk: go', bulk)\r\n\r\n    // 对传递的数据执行批量索引\r\n    client.bulk({\r\n        body: bulk\r\n    }, function (err, response) {\r\n        if (err) {\r\n            console.log(\"Failed Bulk operation\".red, err)\r\n        } else {\r\n            console.log(\"Successfully imported %s\".green, cities.length);\r\n        }\r\n    });\r\n\r\n}\r\n\r\n// 开始冲\r\n// 这里为什么这样写....\r\nconst go = async () => {\r\n\t  // 1. 因为例子的json的数据非常大按照官方的建议说 1000-5000个数据 所以我这里拆了一下\r\n    let citiesLen = Math.ceil(cities.length / 1000)\r\n    for (let i = 0; i <= citiesLen; i++) {\r\n\t      // 2. 因为有时候老是提示没有权限 然后这里直接 设置一下(可以忽略的 因为第一次不太会)\r\n        await axios({\r\n            method: 'put',\r\n            url: 'http://localhost:9200/_all/_settings',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            data: {\r\n                \"index.blocks.read_only_allow_delete\": false\r\n            }\r\n        })\r\n\t      // 2. 让他停一会儿 懒得用 async map (可以在npm search)\r\n        await sleep(300)\r\n\t      // 3. 开始填充数据 \r\n        push(cities, i * 1000, (i+1) * 1000)\r\n    }\r\n}\r\n\r\n// deleteFunc()\r\n// createFunc()\r\n// go()\r\n```\r\n\r\n##### 写接口\r\n\r\nnode用了egg初始化的项目\r\n\r\n###### router\r\n\r\n```javascript\r\n// elasticsearch\r\nrouter.get('/api/search', controller.elasticsearch.search);\r\n```\r\n\r\n###### func\r\n\r\n```javascript\r\n// 因为用了 egg 为了方便 用 egg-es \r\n// https://www.npmjs.com/package/egg-es\r\n// 文档的方法⬇️⬇️⬇️ \r\n\r\n// Usage\r\n// {app_root}/config/plugin.js\r\nexports.elasticsearch = {\r\n  enable: true,\r\n  package: 'egg-es',\r\n};\r\n\r\n// Configuration\r\n// {app_root}/config/config.default.js\r\nexports.elasticsearch = {\r\n  host: 'localhost:9200',\r\n  apiVersion: '6.3'\r\n};\r\n\r\nexport default class Elasticsearch extends Service {\r\n  public async search(wd: string) {\r\n    try {\r\n      // https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/16.x/api-reference-6-8.html#api-search-6-8\r\n      // search doc 因为body还没有理解 赞赏用了简单的搜索🔍\r\n      const response = await this.app.elasticsearch.search({\r\n        index: 'es_user',\r\n        body: {\r\n          query: {\r\n            match: {\r\n              name: wd,\r\n            },\r\n          },\r\n        }\r\n      })\r\n      console.log('response', response)\r\n      // 格式化一下数据\r\n      const list = response.hits.hits.map((i: { _source: object[] }) => i._source)\r\n      return {\r\n        count: response.hits.total || 0,\r\n        list,\r\n      }\r\n    } catch (e) {\r\n      console.log('search e', e)\r\n      return ''\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n数据都已经有了, 前端大伙随便搞搞就好了 后面还有很多功能还没有使用 **分词、过滤、什么什么吧啦吧啦** 后面用到了继续写文章介绍\r\n\r\n","comments":{"nodes":[]},"reactionGroups":[{"content":"THUMBS_UP","reactors":{"totalCount":0}},{"content":"THUMBS_DOWN","reactors":{"totalCount":0}},{"content":"LAUGH","reactors":{"totalCount":0}},{"content":"HOORAY","reactors":{"totalCount":0}},{"content":"CONFUSED","reactors":{"totalCount":0}},{"content":"HEART","reactors":{"totalCount":0}},{"content":"ROCKET","reactors":{"totalCount":0}},{"content":"EYES","reactors":{"totalCount":0}}],"author":{"login":"xiaotiandada","url":"https://github.com/xiaotiandada","avatarUrl":"https://avatars.githubusercontent.com/u/24250627?u=51a93e07957381123eb9fbdd6407de36033b578d&v=4"},"html":"<p> 2020-08-02 22:20:54</p>\n<p>elasticsearch node 简单的使用 <a href=\"https://github.com/xiaotiandada/brick\">repo</a></p>\n<p><a href=\"https://juejin.im/entry/6844903607775526919\">https://juejin.im/entry/6844903607775526919</a></p>\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/16.x/api-reference-6-8.html#api-search-6-8\">https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/16.x/api-reference-6-8.html#api-search-6-8</a></p>\n<p><a href=\"https://www.npmjs.com/package/elasticsearch\">https://www.npmjs.com/package/elasticsearch</a></p>\n<p><a href=\"https://www.npmjs.com/package/egg-es\">https://www.npmjs.com/package/egg-es</a></p>\n<!-- more -->\n\n<h5 id=\"前置条件\">前置条件</h5>\n<ol>\n<li>elasticsearch 环境</li>\n<li>node(用了 egg) 环境</li>\n</ol>\n<h6 id=\"填充数据\">填充数据</h6>\n<p>开始选择用了 <a href=\"https://www.npmjs.com/package/elasticsearch\">elasticsearch</a> 包利用 <strong>js</strong> 直接填充<strong>城市 cities</strong>数据</p>\n<p><a href=\"https://juejin.im/entry/6844903607775526919\">https://juejin.im/entry/6844903607775526919</a></p>\n<blockquote>\n<p>这里有一些 index、type、id 需要相同 这样才能正确的使用和填充数据删除之类的</p>\n</blockquote>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> elasticsearch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"elasticsearch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 所有城市数据</span>\n<span class=\"token keyword\">const</span> cities <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./cities.json'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// init apiVersion 需要和本地一样</span>\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">elasticsearch<span class=\"token punctuation\">.</span>Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:9200\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">log</span><span class=\"token operator\">:</span> <span class=\"token string\">\"trace\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">apiVersion</span><span class=\"token operator\">:</span> <span class=\"token string\">\"6.8\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// use the same version of your Elasticsearch instance</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sleep</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">time</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reslove</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>reslove<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">init</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">requestTimeout</span><span class=\"token operator\">:</span> <span class=\"token number\">30000</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 创建索引</span>\n<span class=\"token comment\">// -> POST http://localhost:9200/es_user/_doc/1/_create</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token string\">'es_user'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'_doc'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create error'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 删除</span>\n<span class=\"token comment\">// -> DELETE http://localhost:9200/es_user/_doc/1</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token string\">'es_user'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'_doc'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'delete error'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 填充数据</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">push</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cities<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> bulk <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    cities<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">city</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        bulk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">_index</span><span class=\"token operator\">:</span> <span class=\"token string\">'es_user'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">_type</span><span class=\"token operator\">:</span> <span class=\"token string\">'_doc'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        bulk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// console.log('bulk: go', bulk)</span>\n\n    <span class=\"token comment\">// 对传递的数据执行批量索引</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">bulk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> bulk\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed Bulk operation\"</span><span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Successfully imported %s\"</span><span class=\"token punctuation\">.</span>green<span class=\"token punctuation\">,</span> cities<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 开始冲</span>\n<span class=\"token comment\">// 这里为什么这样写....</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">go</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 1. 因为例子的json的数据非常大按照官方的建议说 1000-5000个数据 所以我这里拆了一下</span>\n    <span class=\"token keyword\">let</span> citiesLen <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> citiesLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 2. 因为有时候老是提示没有权限 然后这里直接 设置一下(可以忽略的 因为第一次不太会)</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'put'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:9200/_all/_settings'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string-property property\">\"index.blocks.read_only_allow_delete\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token comment\">// 2. 让他停一会儿 懒得用 async map (可以在npm search)</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n          <span class=\"token comment\">// 3. 开始填充数据 </span>\n        <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// deleteFunc()</span>\n<span class=\"token comment\">// createFunc()</span>\n<span class=\"token comment\">// go()</span></code></pre><h5 id=\"写接口\">写接口</h5>\n<p>node用了egg初始化的项目</p>\n<h6 id=\"router\">router</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// elasticsearch</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/search'</span><span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h6 id=\"func\">func</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 因为用了 egg 为了方便 用 egg-es </span>\n<span class=\"token comment\">// https://www.npmjs.com/package/egg-es</span>\n<span class=\"token comment\">// 文档的方法⬇️⬇️⬇️ </span>\n\n<span class=\"token comment\">// Usage</span>\n<span class=\"token comment\">// {app_root}/config/plugin.js</span>\nexports<span class=\"token punctuation\">.</span>elasticsearch <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">enable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">package</span><span class=\"token operator\">:</span> <span class=\"token string\">'egg-es'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Configuration</span>\n<span class=\"token comment\">// {app_root}/config/config.default.js</span>\nexports<span class=\"token punctuation\">.</span>elasticsearch <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">'localhost:9200'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">apiVersion</span><span class=\"token operator\">:</span> <span class=\"token string\">'6.3'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Elasticsearch</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Service</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">wd</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/16.x/api-reference-6-8.html#api-search-6-8</span>\n      <span class=\"token comment\">// search doc 因为body还没有理解 赞赏用了简单的搜索🔍</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token string\">'es_user'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">match</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> wd<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'response'</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 格式化一下数据</span>\n      <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">i</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">_source</span><span class=\"token operator\">:</span> object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> i<span class=\"token punctuation\">.</span>_source<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">.</span>total <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        list<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'search e'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">''</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>数据都已经有了, 前端大伙随便搞搞就好了 后面还有很多功能还没有使用 <strong>分词、过滤、什么什么吧啦吧啦</strong> 后面用到了继续写文章介绍</p>\n","attributes":{}},"themeConfig":{"title":"Blog(issues)","links":[{"title":"GitHub","url":"https://github.com/xiaotiandada/blog"},{"title":"Twitter","url":"https://twitter.com/XiaoTianIsMe"}]}},"__N_SSG":true}